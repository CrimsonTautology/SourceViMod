*sourcemod.txt*	Documentation Helpfile for SourceMod





==============================================================================
*sourcemod-AcceptEntityInput*


Syntax:
	AcceptEntityInput(dest, const String:input[], activator=-1, caller=-1, outputid=0);
Usage:
    dest                Destination entity index.
    input               Input action.
    activator           Entity index which initiated the sequence of actions (-1 for a NULL entity).
    caller              Entity index from which this event is sent (-1 for a NULL entity).
    outputid            Unknown.
Notes:
    Invokes a named input method on an entity. After completion (successful or not), 
    the current global variant is re-initalized.
Return:
    True if successful otherwise false.
==============================================================================
*sourcemod-ActivateEntity*


Syntax:
	ActivateEntity(entity);
Usage:
    entity              Entity index.
Notes:
    Activates an entity (CBaseAnimating::Activate)
Return:
    No return.
==============================================================================
*sourcemod-AddAdmGroupCmdOverride*


Syntax:
	AddAdmGroupCmdOverride(GroupId:id, const String:name[], OverrideType:type, OverrideRule:rule);
Usage:
    id                  Group id.
    name                String containing command name (case sensitive).
    type                Override type (specific command or group).
    rule                Override allow/deny setting.
Notes:
    Adds a group-specific override type.
Return:
    No return.
==============================================================================
*sourcemod-AddAmbientSoundHook*


Syntax:
	AddAmbientSoundHook(AmbientSHook:hook);
Usage:
    hook                Function to use as a hook.
Notes:
    Hooks all played ambient sounds.
Return:
    No return.
==============================================================================
*sourcemod-AddCommandOverride*


Syntax:
	AddCommandOverride(const String:cmd[], OverrideType:type, flags);
Usage:
    cmd                 String containing command name (case sensitive).
    type                Override type (specific command or group).
    flags               New admin flag.
Notes:
    Adds a global command flag override.  Any command registered with this name will 
    assume the new flag.  This is applied retroactively as well.
Return:
    No return.
==============================================================================
*sourcemod-AddFileToDownloadsTable*


Syntax:
	AddFileToDownloadsTable(const String:filename[]);
Usage:
    filename            File that will be added to downloadables table.
Notes:
    Adds a file to the downloadables network string table. This forces a client to download 
    the file if they do not already have it.
Return:
    
==============================================================================
*sourcemod-AddGameLogHook*


Syntax:
	AddGameLogHook(GameLogHook:hook);
Usage:
    hook                Hook function.
Notes:
    Adds a game log hook.
Return:
    No return.
==============================================================================
*sourcemod-AddMenuItem*


Syntax:
	AddMenuItem(Handle:menu, const String:info[], const String:display[], style=ITEMDRAW_DEFAULT);
Usage:
    menu                Menu Handle.
    info                Item information string.
    display             Default item display string.
    style               Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.
Notes:
    Appends a new item to the end of a menu.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-AddNormalSoundHook*


Syntax:
	AddNormalSoundHook(NormalSHook:hook);
Usage:
    hook                Function to use as a hook.
Notes:
    Hooks all played normal sounds.
Return:
    No return.
==============================================================================
*sourcemod-AddServerTag*


Syntax:
	AddServerTag(const String:tag[]);
Usage:
    tag                 Tag string to append.
Notes:
    Appends a string to Valve's sv_tags convar and makes sure it remains after mapchanges.Note: 
    Tags are automatically removed on plugin unload
Return:
    No return.
==============================================================================
*sourcemod-AddTargetsToMenu*


Syntax:
	AddTargetsToMenu(Handle:menu, source_client, bool:in_game_only=true, bool:alive_only=false);
Usage:
    menu                Menu Handle.
    source_client       Source client, or 0 to ignore immunity.
    in_game_only        True to only select in-game players.
    alive_only          True to only select alive players.
Notes:
    Adds targets to an admin menu. Each client is displayed as: name (userid) Each item 
    contains the userid as a string for its info.
Return:
    Number of clients added.
==============================================================================
*sourcemod-AddTargetsToMenu2*


Syntax:
	AddTargetsToMenu2(Handle:menu, source_client, flags);
Usage:
    menu                Menu Handle.
    source_client       Source client, or 0 to ignore immunity.
    flags               COMMAND_FILTER flags from commandfilters.inc.
Notes:
    Adds targets to an admin menu. Each client is displayed as: name (userid) Each item 
    contains the userid as a string for its info.
Return:
    Number of clients added.
==============================================================================
*sourcemod-AddTempEntHook*


Syntax:
	AddTempEntHook(const String:te_name[], TEHook:hook);
Usage:
    te_name             TE name to hook.
    hook                Function to use as a hook.
Notes:
    Hooks a temp entity.
Return:
    No return.
==============================================================================
*sourcemod-AddToForward*


Syntax:
	AddToForward(Handle:fwd, Handle:plugin, Function:func);
Usage:
    fwd                 Handle to private forward.
    plugin              Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.
    func                Function to add to forward.
Notes:
    Adds a function to a private forward's call list.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-AddToStringTable*


Syntax:
	AddToStringTable(tableidx, const String:str[], const String:userdata[]='', length=-1);
Usage:
    tableidx            A string table index.
    string              String to add.
    userdata            An optional user data string.
    length              Length of user data string. This should include the null terminator. If set to -1, then user data will be not be altered if the specified string already exists in the string table.
Notes:
    Adds a string to a given string table.
Return:
    
==============================================================================
*sourcemod-AddToTopMenu*


Syntax:
	AddToTopMenu(Handle:topmenu, const String:name[], TopMenuObjectType:type, TopMenuHandler:handler, TopMenuObject:parent, const String:cmdname[]='', flags=0, const String:info_string[]='');
Usage:
    topmenu             TopMenu Handle.
    name                Object name (MUST be unique).
    type                Object type.
    handler             Handler for object.
    cmdname             Command name (for access overrides).
    flags               Default access flags.
    parent              Parent object ID, or INVALID_TOPMENUOBJECT for none. Items must have a category parent. Categories must not have a parent.
    info_string         Arbitrary storage (max 255 bytes).
Notes:
    Adds an object to a TopMenu.
Return:
    A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure.
==============================================================================
*sourcemod-AddUserFlags*


Syntax:
	AddUserFlags(client, AdminFlag:...);
Usage:
    client              Player's index.
    ...                 Flags to set on the client.
Notes:
    Sets access flags on a client.  If the client is not an admin, a temporary, anonymous 
    AdminId is given.
Return:
    No return.
==============================================================================
*sourcemod-AddVectors*


Syntax:
	AddVectors(const Float:vec1[3], const Float:vec2[3], Float:result[3]);
Usage:
    vec1                First vector.
    vec2                Second vector.
    result              Result buffer.
Notes:
    Adds two vectors.  It is safe to use either input buffer as an output buffer.
Return:
    No return.
==============================================================================
*sourcemod-AdminInheritGroup*


Syntax:
	AdminInheritGroup(AdminId:id, GroupId:gid);
Usage:
    id                  AdminId index of the admin.
    gid                 GroupId index of the group.
Notes:
    Adds a group to an admin's inherited group list.  Any flags the group has will be 
    added to the admin's effective flags.
Return:
    True on success, false on invalid input or duplicate membership.
==============================================================================
*sourcemod-AmbientSHook*


Syntax:
	AmbientSHook(String:sample[PLATFORM_MAX_PATH], &entity, &Float:volume, &level, &pitch, Float:pos[3], &flags, &Float:delay);
Usage:
    sample              Sound file name relative to the 'sounds' folder.
    entity              Entity index associated to the sound.
    volume              Volume (from 0.0 to 1.0).
    level               Sound level (from 0 to 255).
    pitch               Pitch (from 0 to 255).
    pos                 Origin of sound.
    flags               Sound flags.
    delay               Play delay.
Notes:
    Called when an ambient sound is about to be emitted to one or more clients. NOTICE: 
    all parameters can be overwritten to modify the default behavior.
Return:
    Plugin_Continue to allow the sound to be played, Plugin_Stop to block it, Plugin_Changed 
    when any parameter has been modified.
==============================================================================
*sourcemod-ArcCosine*


Syntax:
	ArcCosine(Float:angle);
Usage:
    angle               Input value.
Notes:
    Returns the arccosine of the input value.
Return:
    acos(value) in radians.
==============================================================================
*sourcemod-ArcSine*


Syntax:
	ArcSine(Float:angle);
Usage:
    angle               Input value.
Notes:
    Returns the arcsine of the input value.
Return:
    asin(value) in radians.
==============================================================================
*sourcemod-ArcTangent*


Syntax:
	ArcTangent(Float:angle);
Usage:
    angle               Input value.
Notes:
    Returns the arctangent of the input value.
Return:
    atan(value) in radians.
==============================================================================
*sourcemod-ArcTangent2*


Syntax:
	ArcTangent2(Float:x, Float:y);
Usage:
    x                   Horizontal value.
    y                   Vertical value.
Notes:
    Returns the arctangent2 of the input values.
Return:
    atan2(value) in radians.
==============================================================================
*sourcemod-AreClientCookiesCached*


Syntax:
	AreClientCookiesCached(client);
Usage:
    client              Client index.
Notes:
    Checks if a clients cookies have been loaded from the database.
Return:
    True if loaded, false otherwise.
==============================================================================
*sourcemod-AskPluginLoad*


Syntax:
	AskPluginLoad(Handle:myself, bool:late, String:error[], err_max);
Usage:
    myself              Handle to the plugin.
    late                Whether or not the plugin was loaded 'late' (after map load).
    error               Error message buffer in case load failed.
    err_max             Maximum number of characters for error message buffer.
Notes:
    Called before OnPluginStart, in case the plugin wants to check for load failure. 
    This is called even if the plugin type is 'private.'  Any natives from modules are 
    not available at this point.  Thus, this forward should only be used for explicit 
    pre-emptive things, such as adding dynamic natives, or setting certain types of 
    load filters.
Return:
    True if load success, false otherwise.
==============================================================================
*sourcemod-ATTN_TO_SNDLEVEL*


Syntax:
	ATTN_TO_SNDLEVEL(Float:attn);
Usage:
    attn                Attenuation value.
Notes:
    Converts an attenuation value to a sound level. This function is from the HL2SDK.
Return:
    Integer sound level.
==============================================================================
*sourcemod-AutoExecConfig*


Syntax:
	AutoExecConfig(bool:autoCreate=true, const String:name[]='', const String:folder[]='sourcemod');
Usage:
    autoCreate          If true, and the config file does not exist, such a config file will be automatically created and populated with information from the plugin's registered cvars.
    name                Name of the config file, excluding the .cfg extension. If empty, <plugin.filename.cfg> is assumed.
    folder              Folder under cfg/ to use.  By default this is 'sourcemod.'
Notes:
    Specifies that the given config file should be executed after plugin load. OnConfigsExecuted() 
    will not be called until the config file has executed, but it will be called if 
    the execution fails.
Return:
    No return.
==============================================================================
*sourcemod-BanClient*


Syntax:
	BanClient(client, time, flags, const String:reason[], const String:kick_message[]='', const String:command[]='', any:source=0);
Usage:
    client              Client being banned.
    time                Time (in minutes) to ban (0 = permanent).
    flags               Flags for controlling the ban mechanism.  If AUTHID is set and no AUTHID is available, the ban will fail unless AUTO is also flagged.
    reason              Reason to ban the client for.
    kick_message        Message to display to the user when kicking.
    command             Command string to identify the source.  If this is left empty, then the OnBanClient forward will not be called.
    source              A source value that could be interpreted as a player index of any sort (not actually checked by Core).
Notes:
    Bans a client.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-BanIdentity*


Syntax:
	BanIdentity(const String:identity[], time, flags, const String:reason[], const String:command[]='', any:source=0);
Usage:
    identity            String to ban (ip or authstring).
    time                Time to ban for (0 = permanent).
    flags               Flags (only IP and AUTHID are valid flags here).
    reason              Ban reason string.
    command             Command string to identify the source.  If this is left empty, then the OnBanIdentity forward will not be called.
    source              A source value that could be interpreted as a player index of any sort (not actually checked by Core).
Notes:
    Bans an identity (either an IP address or auth string).
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-BfGetNumBytesLeft*


Syntax:
	BfGetNumBytesLeft(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Returns the number of bytes left in a readable bitbuffer (bf_read).
Return:
    Number of bytes left unread.
==============================================================================
*sourcemod-BfReadAngle*


Syntax:
	BfReadAngle(Handle:bf, numBits=8);
Usage:
    bf                  bf_read handle to read from.
    numBits             Optional number of bits to use.
Notes:
    Reads a bit angle from a readable bitbuffer (bf_read).
Return:
    Angle read.
==============================================================================
*sourcemod-BfReadAngles*


Syntax:
	BfReadAngles(Handle:bf, Float:angles[3]);
Usage:
    bf                  bf_read handle to read from.
    angles              Destination angle vector.
Notes:
    Reads a 3D angle vector from a readable bitbuffer (bf_read).
Return:
    No return.
==============================================================================
*sourcemod-BfReadBool*


Syntax:
	BfReadBool(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a single bit from a readable bitbuffer (bf_read).
Return:
    Bit value read.
==============================================================================
*sourcemod-BfReadByte*


Syntax:
	BfReadByte(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a byte from a readable bitbuffer (bf_read).
Return:
    Byte value read (read as 8bit).
==============================================================================
*sourcemod-BfReadChar*


Syntax:
	BfReadChar(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a character from a readable bitbuffer (bf_read).
Return:
    Character value read.
==============================================================================
*sourcemod-BfReadCoord*


Syntax:
	BfReadCoord(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a coordinate from a readable bitbuffer (bf_read).
Return:
    Coordinate read.
==============================================================================
*sourcemod-BfReadEntity*


Syntax:
	BfReadEntity(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads an entity from a readable bitbuffer (bf_read).
Return:
    Entity index read.
==============================================================================
*sourcemod-BfReadFloat*


Syntax:
	BfReadFloat(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a floating point number from a readable bitbuffer (bf_read).
Return:
    Floating point value read.
==============================================================================
*sourcemod-BfReadNum*


Syntax:
	BfReadNum(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a normal integer to a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 32bit).
==============================================================================
*sourcemod-BfReadShort*


Syntax:
	BfReadShort(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a 16bit integer from a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 16bit).
==============================================================================
*sourcemod-BfReadString*


Syntax:
	BfReadString(Handle:bf, String:buffer[], maxlength, bool:line=false);
Usage:
    bf			       bf_read handle to read from.
    buffer		       Destination string buffer.
    maxlength		   Maximum length of output string buffer.
    line			   If true the buffer will be copied until it reaches a '\n'  or a null terminator.
Notes:
    Reads a string from a readable bitbuffer (bf_read).
Return:
    Number of bytes written to the buffer.  If the bitbuffer stream overflowed, that 
    is, had no terminator before the end of the stream, then a negative number will 
    be returned equal to the number of characters written to the buffer minus 1.  The 
    buffer will
==============================================================================
*sourcemod-BfReadVecCoord*


Syntax:
	BfReadVecCoord(Handle:bf, Float:coord[3]);
Usage:
    bf                  bf_read handle to read from.
    coord               Destination coordinate array.
Notes:
    Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).
Return:
    No return.
==============================================================================
*sourcemod-BfReadVecNormal*


Syntax:
	BfReadVecNormal(Handle:bf, Float:vec[3]);
Usage:
    bf                  bf_read handle to read from.
    vec                 Destination vector array.
Notes:
    Reads a 3D normal vector from a readable bitbuffer (bf_read).
Return:
    No return.
==============================================================================
*sourcemod-BfReadWord*


Syntax:
	BfReadWord(Handle:bf);
Usage:
    bf                  bf_read handle to read from.
Notes:
    Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 16bit).
==============================================================================
*sourcemod-BfWriteAngle*


Syntax:
	BfWriteAngle(Handle:bf, Float:angle, numBits=8);
Usage:
    bf                  bf_write handle to write to.
    angle               Angle to write.
    numBits             Optional number of bits to use.
Notes:
    Writes a bit angle to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteAngles*


Syntax:
	BfWriteAngles(Handle:bf, Float:angles[3]);
Usage:
    bf                  bf_write handle to write to.
    angles              Angle vector to write.
Notes:
    Writes a 3D angle vector to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteBool*


Syntax:
	BfWriteBool(Handle:bf, bool:bit);
Usage:
    bf                  bf_write handle to write to.
    bit                 Bit to write (true for 1, false for 0).
Notes:
    Writes a single bit to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteByte*


Syntax:
	BfWriteByte(Handle:bf, byte);
Usage:
    bf                  bf_write handle to write to.
    byte                Byte to write (value will be written as 8bit).
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteChar*


Syntax:
	BfWriteChar(Handle:bf, chr);
Usage:
    bf                  bf_write handle to write to.
    chr                 Character to write.
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteCoord*


Syntax:
	BfWriteCoord(Handle:bf, Float:coord);
Usage:
    bf                  bf_write handle to write to.
    coord               Coordinate to write.
Notes:
    Writes a coordinate to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteEntity*


Syntax:
	BfWriteEntity(Handle:bf, ent);
Usage:
    bf                  bf_write handle to write to.
    ent                 Entity index to write.
Notes:
    Writes an entity to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteFloat*


Syntax:
	BfWriteFloat(Handle:bf, Float:num);
Usage:
    bf                  bf_write handle to write to.
    num                 Number to write.
Notes:
    Writes a floating point number to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteNum*


Syntax:
	BfWriteNum(Handle:bf, num);
Usage:
    bf                  bf_write handle to write to.
    num                 Integer to write (value will be written as 32bit).
Notes:
    Writes a normal integer to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteShort*


Syntax:
	BfWriteShort(Handle:bf, num);
Usage:
    bf                  bf_write handle to write to.
    num                 Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit integer to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteString*


Syntax:
	BfWriteString(Handle:bf, const String:string[]);
Usage:
    bf                  bf_write handle to write to.
    string              Text string to write.
Notes:
    Writes a string to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteVecCoord*


Syntax:
	BfWriteVecCoord(Handle:bf, Float:coord[3]);
Usage:
    bf                  bf_write handle to write to.
    coord               Coordinate array to write.
Notes:
    Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteVecNormal*


Syntax:
	BfWriteVecNormal(Handle:bf, Float:vec[3]);
Usage:
    bf                  bf_write handle to write to.
    vec                 Vector to write.
Notes:
    Writes a 3D normal vector to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BfWriteWord*


Syntax:
	BfWriteWord(Handle:bf, num);
Usage:
    bf                  bf_write handle to write to.
    num                 Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).
Return:
    No return.
==============================================================================
*sourcemod-BindAdminIdentity*


Syntax:
	BindAdminIdentity(AdminId:id, const String:auth[], const String:ident[]);
Usage:
    id                  AdminId of the admin.
    auth                Auth method to use, predefined or from RegisterAuthIdentType().
    ident               String containing the arbitrary, unique identity.
Notes:
    Binds an admin to an identity for fast lookup later on.  The bind must be unique.
Return:
    True on success, false if the auth method was not found, or ident was already taken.
==============================================================================
*sourcemod-BitToFlag*


Syntax:
	BitToFlag(bit, &AdminFlag:flag);
Usage:
    bit                 Bit to convert.
    flag                Stores the converted flag by reference.
Notes:
    Converts a bit to an AdminFlag.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-BreakString*


Syntax:
	BreakString(const String:source[], String:arg[], argLen);
Usage:
    source              Source input string.
    arg                 Stores argument read from string.
    argLen              Maximum length of argument buffer.
Notes:
    Finds the first 'argument' in a string; either a set of space terminated characters, 
    or a fully quoted string.  After the argument is found, whitespace is read until 
    the next portion of the string is reached.  If nothing remains, -1 is returned. 
    Otherwise, the index to the first character is returned.
Return:
    Index to next piece of string, or -1 if none.
==============================================================================
*sourcemod-BuildPath*


Syntax:
	BuildPath(PathType:type, String:buffer[], maxlength, const String:fmt[], any:...);
Usage:
    type                Type of path to build as the base.
    buffer              Buffer to store the path.
    maxlength           Maximum length of buffer.
    fmt                 Format string.
    ...                 Format arguments.
Notes:
    Builds a path relative to the SourceMod folder.  This should be used instead of directly 
    referencing addons/sourcemod, in case users change the name of their folder layout.
Return:
    Number of bytes written to buffer (not including null terminator).
==============================================================================
*sourcemod-ByteCountToCells*


Syntax:
	ByteCountToCells(size);
Usage:
    size                Number of bytes.
Notes:
    Given a maximum string size (including the null terminator), returns the number of 
    cells required to fit that string.
Return:
    Minimum number of cells required to fit the byte count.
==============================================================================
*sourcemod-Call_Cancel*


Syntax:
	Call_Cancel();
Usage:
Notes:
    Cancels a call to a function or forward's call list.
Return:
    No return.
==============================================================================
*sourcemod-Call_Finish*


Syntax:
	Call_Finish(&any:result=0);
Usage:
    result              Return value of function or forward's call list.
Notes:
    Completes a call to a function or forward's call list.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
==============================================================================
*sourcemod-Call_PushArray*


Syntax:
	Call_PushArray(const any:value[], size);
Usage:
    value               Array to push.
    size                Size of array.
Notes:
    Pushes an array onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushArrayEx*


Syntax:
	Call_PushArrayEx(any:value[], size, cpflags);
	Syntax:
		o return.">
Usage:
    value               Array to push.
    size                Size of array.
    cpflags             Whether or not changes should be copied back to the input array. See SP_PARAM_* constants for details.
Notes:
    Pushes an array onto the current call.
Return:
		</KeyWord>
==============================================================================
*sourcemod-Call_PushCell*


Syntax:
	Call_PushCell(any:value);
Usage:
    value               Cell value to push.
Notes:
    Pushes a cell onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushCellRef*


Syntax:
	Call_PushCellRef(&any:value);
Usage:
    value               Cell reference to push.
Notes:
    Pushes a cell by reference onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushFloat*


Syntax:
	Call_PushFloat(Float:value);
Usage:
    value               Floating point value to push.
Notes:
    Pushes a float onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushFloatRef*


Syntax:
	Call_PushFloatRef(&Float:value);
Usage:
    value               Floating point reference to push.
Notes:
    Pushes a float by reference onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushString*


Syntax:
	Call_PushString(const String:value[]);
Usage:
    value               String to push.
Notes:
    Pushes a string onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_PushStringEx*


Syntax:
	Call_PushStringEx(String:value[], length, szflags, cpflags);
Usage:
    value               String to push.
    length              Length of string buffer.
    szflags             Flags determining how string should be handled. See SP_PARAM_STRING_* constants for details. The default (0) is to push ASCII.
    cpflags             Whether or not changes should be copied back to the input array. See SP_PARAM_* constants for details.
Notes:
    Pushes a string onto the current call.
Return:
    No return.
==============================================================================
*sourcemod-Call_StartForward*


Syntax:
	Call_StartForward(Handle:fwd);
Usage:
    fwd                 Handle to global or private forward.
Notes:
    Starts a call to functions in a forward's call list.
Return:
    No return.
==============================================================================
*sourcemod-Call_StartFunction*


Syntax:
	Call_StartFunction(Handle:plugin, Function:func);
Usage:
    plugin              Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.
    func                Function to call.
Notes:
    Starts a call to a function.
Return:
    No return.
==============================================================================
*sourcemod-CanAdminTarget*


Syntax:
	CanAdminTarget(AdminId:admin, AdminId:target);
Usage:
    admin               Admin doing the targetting (may be INVALID_ADMIN_ID).
    target              Target admin (may be INVALID_ADMIN_ID).
Notes:
    Tests whether one admin can target another. The hueristics for this check are as 
    follows: 0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails. 1. If 
    the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds. 2. If the targeted 
    AdminId is the same as the targeting AdminId, (self) targeting succeeds. 3. If the 
    targeting admin is root, targeting succeeds. 4. If the targeted admin has access 
    higher (as interpreted by (sm_immunity_mode) than the targeting admin, then targeting 
    fails. 5. If the targeted admin has specific immunity from the targeting admin via 
    group immunities, targeting fails. 6. Targeting succeeds.
Return:
    True if targetable, false if immune.
==============================================================================
*sourcemod-CancelClientMenu*


Syntax:
	CancelClientMenu(client, bool:autoIgnore=false, Handle:hStyle=INVALID_HANDLE);
Usage:
    hstyle              MenuStyle Handle, or INVALID_HANDLE to use the default style.
    client              Client index.
    autoIgnore          If true, no menus can be re-drawn on the client during the cancellation process.
Notes:
    Cancels a menu on a client.  This will only affect non-external menus.
Return:
    True if a menu was cancelled, false otherwise.
==============================================================================
*sourcemod-CancelCreatedEvent*


Syntax:
	CancelCreatedEvent(Handle:event);
Usage:
    event               Handled to the event.
Notes:
    Cancels a previously created game event that has not been fired.
Return:
    No return.
==============================================================================
*sourcemod-CancelMenu*


Syntax:
	CancelMenu(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Cancels a menu from displaying on all clients.  While the cancellation is in progress, 
    this menu cannot be re-displayed to any clients. The menu may still exist on the 
    client's screen after this command. This simply verifies that the menu is not being 
    used anywhere. If any vote is in progress on a menu, it will be cancelled.
Return:
    No return.
==============================================================================
*sourcemod-CancelVote*


Syntax:
	CancelVote();
Usage:
Notes:
    Cancels the vote in progress.
Return:
    No return.
==============================================================================
*sourcemod-CanMapChooserStartVote*


Syntax:
	CanMapChooserStartVote();
Usage:
Notes:
    Checks if MapChooser will allow a vote
Return:
    True if a vote can be held, or false if mapchooser is already holding a vote.
==============================================================================
*sourcemod-CanPanelDrawFlags*


Syntax:
	CanPanelDrawFlags(Handle:panel, style);
Usage:
    panel               A MenuPanel Handle.
    style               ITEMDRAW style flags.
Notes:
    Returns whether or not the given drawing flags are supported by the menu style.
Return:
    True if item is drawable, false otherwise.
==============================================================================
*sourcemod-CanUserTarget*


Syntax:
	CanUserTarget(client, target);
Usage:
    client              Player's index.
    target              Target player's index.
Notes:
    Returns whether a user can target another user. This is a helper function for CanAdminTarget.
Return:
    True if target is targettable by the player, false otherwise.
==============================================================================
*sourcemod-ChangeClientTeam*


Syntax:
	ChangeClientTeam(client, team);
Usage:
    client              Client index.
    team                Mod-specific team index.
Notes:
    Changes a client's team through the mod's generic team changing function. On CS:S, 
    this will kill the player.
Return:
    No return.
==============================================================================
*sourcemod-ChangeEdictState*


Syntax:
	ChangeEdictState(edict, offset = 0);
Usage:
    edict               Index to the edict.
    offset              Offset to mark as changed.  If 0, the entire edict is marked as changed.
Notes:
    Marks an entity as state changed.  This can be useful if you set an offset and wish 
    for it to be immediately changed over the network.  By default this is not done 
    for offset setting functions.
Return:
    No return.
==============================================================================
*sourcemod-CharToLower*


Syntax:
	CharToLower(chr);
Usage:
    chr                 Characer to convert.
Notes:
    Returns a lowercase character to an uppercase character.
Return:
    Uppercase character on success, no change on failure.
==============================================================================
*sourcemod-CharToUpper*


Syntax:
	CharToUpper(chr);
Usage:
    chr                 Characer to convert.
Notes:
    Returns an uppercase character to a lowercase character.
Return:
    Lowercase character on success, no change on failure.
==============================================================================
*sourcemod-CheckCommandAccess*


Syntax:
	CheckCommandAccess(client, const String:command[], flags, bool:override_only=false);
Usage:
    client              Client index.
    command             Command name.  If the command is not found, the default flags are used.
    flags               Flag string to use as a default, if the command or override is not found.
    override_only       If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command.
Notes:
    Returns whether a client has access to a given command string.  The string can also 
    be any override string, as overrides can be independent of commands.  This important 
    feature essentially allows you to create custom flags using the override system.
Return:
    True if the client has access, false otherwise.
==============================================================================
*sourcemod-CheckVoteDelay*


Syntax:
	CheckVoteDelay();
Usage:
Notes:
    Returns the number of seconds you should 'wait' before displaying a publicly invocable 
    menu.  This number is the time remaining until (last_vote + sm_vote_delay).
Return:
    Number of seconds to wait, or 0 for none.
==============================================================================
*sourcemod-ClearArray*


Syntax:
	ClearArray(Handle:array);
Usage:
    array               Array Handle.
Notes:
    Clears an array of all entries.  This is the same as ResizeArray(0).
Return:
    No return.
==============================================================================
*sourcemod-ClearSyncHud*


Syntax:
	ClearSyncHud(client, Handle:sync);
Usage:
    client              Client index to send the message to.
    sync                Synchronization object.
Notes:
    Clears the text on a synchronized HUD channel. This is not the same as sending '' 
    because it guarantees that it won't overwrite text on another channel.  For example, 
    consider the scenario: 1. Your synchronized message goes to channel 3. 2. Someone 
    else's non-synchronized message goes to channel 3. If you were to simply send '' 
    on your synchronized message, then someone else's text could be overwritten.
Return:
    No return.
==============================================================================
*sourcemod-ClearTrie*


Syntax:
	ClearTrie(Handle:trie);
Usage:
    trie                Trie Handle.
Notes:
    Clears all entries from a Trie.
Return:
    
==============================================================================
*sourcemod-ClientCommand*


Syntax:
	ClientCommand(client, const String:fmt[], any:...);
Usage:
    client              Index of the client.
    fmt                 Format of the client command.
    ...                 Format parameters/
Notes:
    Executes a client command.  Note that this will not work on clients unless they have 
    cl_restrict_server_commands set to 0.
Return:
    No return.
==============================================================================
*sourcemod-CloneHandle*


Syntax:
	CloneHandle(Handle:hndl, Handle:plugin=INVALID_HANDLE);
Usage:
    hndl                Handle to clone/duplicate.
    plugin              Optional Handle to another plugin to mark as the new owner. If no owner is passed, the owner becomes the calling plugin.
Notes:
    Clones a Handle.  When passing handles in between plugins, caching handles can result 
    in accidental invalidation when one plugin releases the Handle, or is its owner 
    is unloaded from memory.  To prevent this, the Handle may be 'cloned' with a new 
    owner.
Return:
    Handle on success, INVALID_HANDLE if not cloneable.
==============================================================================
*sourcemod-CloseHandle*


Syntax:
	CloseHandle(Handle:hndl);
Usage:
    hndl                Handle to close.
Notes:
    Closes a Handle.  If the handle has multiple copies open, it is not destroyed unless 
    all copies are closed.
Return:
    True if successful, false if not closeable.
==============================================================================
*sourcemod-CompileRegex*


Syntax:
	CompileRegex(const String:pattern[], flags = 0, String:error[]='', maxLen = 0, &RegexError:errcode = REGEX_ERROR_NONE);
Usage:
    pattern             The regular expression pattern.
    flags               General flags for the regular expression.
    error               Error message encountered, if applicable.
    maxLen              Maximum string length of the error buffer.
    errcode             Regex type error code encountered, if applicable.
Notes:
    Precompile a regular expression.  Use this if you intend on using the same expression 
    multiple times.  Pass the regex handle returned here to MatchRegex to check for 
    matches.
Return:
    Valid regex handle on success, INVALID_HANDLE on failure.
==============================================================================
*sourcemod-ConCmd*


Syntax:
	ConCmd(client, args);
Usage:
    client              Index of the client, or 0 from the server.
    args                Number of arguments that were in the argument string.
Notes:
    Called when a generic console command is invoked.
Return:
    An Action value.  Not handling the command means that Source will report it as 'not 
    found.'
==============================================================================
*sourcemod-ConVarChanged*


Syntax:
	ConVarChanged(Handle:convar, const String:oldValue[], const String:newValue[]);
Usage:
    convar              Handle to the convar that was changed.
    oldValue            String containing the value of the convar before it was changed.
    newValue            String containing the new value of the convar.
Notes:
    Called when a console variable's value is changed.
Return:
    No return.
==============================================================================
*sourcemod-CookieMenuHandler*


Syntax:
	CookieMenuHandler(client, CookieMenuAction:action, any:info, String:buffer[], maxlen);
Usage:
    client              Client index.
    action              CookeMenuAction being performed.
    data                Info data passed.
    buffer              Outbut buffer.
    maxlen              Max length of the output buffer.
Notes:
    Cookie Menu Callback prototype
Return:
    
==============================================================================
*sourcemod-Cosine*


Syntax:
	Cosine(Float:value);
Usage:
    value               Input value in radians.
Notes:
    Returns the cosine of the argument.
Return:
    cos(value).
==============================================================================
*sourcemod-CreateAdmGroup*


Syntax:
	CreateAdmGroup(const String:group_name[]);
Usage:
    group_name          String containing the group name.
Notes:
    Adds a new group.  Name must be unique.
Return:
    A new group id, INVALID_GROUP_ID if it already exists.
==============================================================================
*sourcemod-CreateAdmin*


Syntax:
	CreateAdmin(const String:name[]='');
Usage:
    name                Name for this entry (does not have to be unique). Specify an empty string for an anonymous admin.
Notes:
    Creates a new admin entry in the permissions cache.
Return:
    
==============================================================================
*sourcemod-CreateArray*


Syntax:
	CreateArray(blocksize=1, startsize=0);
Usage:
    blocksize           The number of cells each member of the array can hold.  For example, 32 cells is equivalent to: new Array[X][32]
    startsize           Initial size of the array.  Note that data will NOT be auto-intialized.
Notes:
    Creates a dynamic global cell array.  While slower than a normal array, it can be 
    used globally AND dynamically, which is otherwise impossible. The contents of the 
    array are uniform; i.e. storing a string at index X and then retrieving it as an 
    integer is NOT the same as StringToInt()! The 'blocksize' determines how many cells 
    each array slot has; it cannot be changed after creation.
Return:
    New Handle to the array object.
==============================================================================
*sourcemod-CreateAuthMethod*


Syntax:
	CreateAuthMethod(const String:method[]);
Usage:
    method              Name of the authentication method.
Notes:
    Creates an admin auth method.  This does not need to be called more than once per 
    method, ever.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-CreateConVar*


Syntax:
	CreateConVar(const String:name[], const String:defaultValue[], const String:description[]='', flags=0, bool:hasMin=false, Float:min=0.0, bool:hasMax=false, Float:max=0.0);
Usage:
    name                Name of new convar.
    defaultValue        String containing the default value of new convar.
    description         Optional description of the convar.
    flags               Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details.
    hasMin              Optional boolean that determines if the convar has a minimum value.
    min                 Minimum floating point value that the convar can have if hasMin is true.
    hasMax              Optional boolean that determines if the convar has a maximum value.
    max                 Maximum floating point value that the convar can have if hasMax is true.
Notes:
    Creates a new console variable.
Return:
    A handle to the newly created convar. If the convar already exists, a handle to it 
    will still be returned.
==============================================================================
*sourcemod-CreateDataPack*


Syntax:
	CreateDataPack();
Usage:
Notes:
    Creates a new data pack.
Return:
    A Handle to the data pack.  Must be closed with CloseHandle().
==============================================================================
*sourcemod-CreateDataTimer*


Syntax:
	CreateDataTimer(Float:interval, Timer:func, &Handle:datapack, flags=0);
Usage:
    interval            Interval from the current game time to execute the given function.
    func                Function to execute once the given interval has elapsed.
    datapack            The newly created datapack is passed though this by-reference parameter to the timer callback function.
    flags               Timer flags.
Notes:
    Creates a timer associated with a new datapack, and returns the datapack.
Return:
    Handle to the timer object.  You do not need to call CloseHandle().
==============================================================================
*sourcemod-CreateDialog*


Syntax:
	CreateDialog(client, Handle:kv, DialogType:type);
Usage:
    client              Index of the client.
    kv                  KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information).
    type                Message type to display ingame.
Notes:
    Creates different types of ingame messages.
Return:
    No return.
==============================================================================
*sourcemod-CreateDirectory*


Syntax:
	CreateDirectory(const String:path[], mode);
Usage:
    path                Path to create.
    mode                Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have the execute bit set on Linux.  On Windows, the mode is ignored.
Notes:
    Creates a directory.
Return:
    
==============================================================================
*sourcemod-CreateEdict*


Syntax:
	CreateEdict();
Usage:
Notes:
    Creates a new edict (the basis of a networkable entity)
Return:
    Index of the edict, 0 on failure.
==============================================================================
*sourcemod-CreateEntityByName*


Syntax:
	CreateEntityByName(const String:classname[], ForceEdictIndex=-1);
Usage:
    classname           Entity classname.
    ForceEdictIndex     Edict index used by the created entity.
Notes:
    Creates an entity by string name, but does not spawn it (see DispatchSpawn). If ForceEdictIndex 
    is not -1, then it will use the edict by that index. If the index is invalid or 
    there is already an edict using that index, it will error out.
Return:
    Entity index on success, or -1 on failure.
==============================================================================
*sourcemod-CreateEvent*


Syntax:
	CreateEvent(const String:name[], bool:force=false);
Usage:
    name                Name of event.
    force               If set to true, this forces the event to be created even if it's not being hooked. Note that this will not force it if the event doesn't exist at all.
Notes:
    Creates a game event to be fired later. The Handle should not be closed via CloseHandle(). 
     It must be closed via FireEvent() or CancelCreatedEvent().
Return:
    Handle to event. INVALID_HANDLE is returned if the event doesn't exist or isn't
==============================================================================
*sourcemod-CreateFakeClient*


Syntax:
	CreateFakeClient(const String:name[]);
Usage:
    name                Name to use.
Notes:
    Creates a fake client.
Return:
    Client index on success, 0 otherwise.
==============================================================================
*sourcemod-CreateForward*


Syntax:
	CreateForward(ExecType:type, ParamType:...);
Usage:
    type                Execution type to be used.
    ...                 Variable number of parameter types (up to 32).
Notes:
    Creates a private forward.
Return:
    Handle to new private forward.
==============================================================================
*sourcemod-CreateGlobalForward*


Syntax:
	CreateGlobalForward(const String:name[], ExecType:type, ParamType:...);
Usage:
    name                Name of public function to use in forward.
    type                Execution type to be used.
    ...                 Variable number of parameter types (up to 32).
Notes:
    Creates a global forward.
Return:
    Handle to new global forward.
==============================================================================
*sourcemod-CreateHudSynchronizer*


Syntax:
	CreateHudSynchronizer();
Usage:
Notes:
    Creates a HUD synchronization object.  This object is used to automatically assign 
    and re-use channels for a set of messages. The HUD has a hardcoded number of channels 
    (usually 6) for displaying text.  You can use any channel for any area of the screen. 
     Text on different channels can overlap, but text on the same channel will erase 
    the old text first.  This overlapping and overwriting gets problematic. A HUD synchronization 
    object automatically selects channels for you based on the following heuristics: 
    - If channel X was last used by the object, and hasn't been modified again, channel 
    X gets re-used. - Otherwise, a new channel is chosen based on the least-recently-used 
    channel. This ensures that if you display text on a sync object, that the previous 
    text displayed on it will always be cleared first.  This is because your new text 
    will either overwrite the old text on the same channel, or because another channel 
    has already erased your text. Note that messages can still overlap if they are on 
    different synchronization objects, or they are displayed to manual channels. These 
    are particularly useful for displaying repeating or refreshing HUD text, in addition 
    to displaying multiple message sets in one area of the screen (for example, center-say 
    messages that may pop up randomly that you don't want to overlap each other).
Return:
    New HUD synchronization object. The Handle can be closed with CloseHandle(). If HUD 
    text is not supported on this mod, then INVALID_HANDLE is returned.
==============================================================================
*sourcemod-CreateKeyValues*


Syntax:
	CreateKeyValues(const String:name[], const String:firstkey[]='', const String:firstValue[]='');
Usage:
    name                Name of the root section.
    firstKey            If non-empty, specifies the first key value.
    firstValue          If firstKey is non-empty, specifies the first key's value.
Notes:
    Creates a new KeyValues structure.  The Handle must always be closed.
Return:
    A Handle to a new KeyValues structure.
==============================================================================
*sourcemod-CreateMenu*


Syntax:
	CreateMenu(MenuHandler:handler, MenuAction:actions=MENU_ACTIONS_DEFAULT);
Usage:
    handler             Function which will receive menu actions.
    actions             Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions.
Notes:
    Creates a new, empty menu using the default style.
Return:
    A new menu Handle.
==============================================================================
*sourcemod-CreateMenuEx*


Syntax:
	CreateMenuEx(Handle:hStyle=INVALID_HANDLE, MenuHandler:handler, MenuAction:actions=MENU_ACTIONS_DEFAULT);
Usage:
    handler             Function which will receive menu actions.
    actions             Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions.
Notes:
    Creates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle().
Return:
    A new menu Handle.
==============================================================================
*sourcemod-CreateNative*


Syntax:
	CreateNative(const String:name[], NativeCall:func);
Usage:
    name                Name of the dynamic native; must be unique amongst all other registered dynamic natives.
    func                Function to use as the dynamic native.
Notes:
    Creates a dynamic native.  This should only be called in AskPluginLoad(), or else 
    you risk not having your native shared with other plugins.
Return:
    No return.
==============================================================================
*sourcemod-CreatePanel*


Syntax:
	CreatePanel(Handle:hStyle=INVALID_HANDLE);
Usage:
    hStyle              MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without 
    any extra helper functions.  The Handle must be closed with CloseHandle().
Return:
    A new MenuPanel Handle.
==============================================================================
*sourcemod-CreatePanelFromMenu*


Syntax:
	CreatePanelFromMenu(Handle:menu);
Usage:
Notes:
    Creates a raw MenuPanel based off the menu's style. The Handle must be freed with 
    CloseHandle().
Return:
    A new MenuPanel Handle.
==============================================================================
*sourcemod-CreateProfiler*


Syntax:
	CreateProfiler();
Usage:
Notes:
    Creates a new profile object.  The Handle must be freed using CloseHandle().
Return:
    Handle to the profiler object.
==============================================================================
*sourcemod-CreateStack*


Syntax:
	CreateStack(blocksize=1);
Usage:
    blocksize           The number of cells each entry in the stack can hold.  For example, 32 cells is equivalent to: new Array[X][32]
Notes:
    Creates a stack structure.  A stack is a LIFO (last in, first out) vector (array) 
    of items.  It has O(1) insertion and O(1) removal. Stacks have two operations: Push 
    (adding an item) and Pop (removes items in reverse-push order). The contents of 
    the stack are uniform; i.e. storing a string and then retrieving it as an integer 
    is NOT the same as StringToInt()! The 'blocksize' determines how many cells each 
    slot has; it cannot be changed after creation.
Return:
    New stack Handle.
==============================================================================
*sourcemod-CreateTimer*


Syntax:
	CreateTimer(Float:interval, Timer:func, any:data=INVALID_HANDLE, flags=0);
Usage:
    interval            Interval from the current game time to execute the given function.
    func                Function to execute once the given interval has elapsed.
    data                Handle or value to pass through to the timer callback function.
    flags               Flags to set (such as repeatability or auto-Handle closing).
Notes:
    Creates a basic timer.  Calling CloseHandle() on a timer will end the timer.
Return:
    Handle to the timer object.  You do not need to call CloseHandle(). If the timer 
    could not be created, INVALID_HANDLE will be returned.
==============================================================================
*sourcemod-CreateTopMenu*


Syntax:
	CreateTopMenu(TopMenuHandler:handler);
Usage:
    handler             Handler to use for drawing the root title.
Notes:
    Creates a TopMenu.
Return:
    A new TopMenu Handle, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-CreateTrie*


Syntax:
	CreateTrie();
Usage:
Notes:
    Creates a Trie structure.  A trie is a data storage object that maps any value to 
    a string of text.  It features very fast lookup and deletion, but grows very slow 
    for insertion once tens of thousands of items are added. Keys in Tries are unique. 
     That is, each key may only have one value.  Unlike arrays, Tries cannot be iterated 
    right now.  Since the contents are known to be unique, to work around this, you 
    can use ADT Arrays to store a list of keys known to be in a Trie.
Return:
    New Trie Handle, which must be freed via CloseHandle().
==============================================================================
*sourcemod-CS_RespawnPlayer*


Syntax:
	CS_RespawnPlayer(client);
Usage:
    client              Player's index.
Notes:
    Respawns a player.
Return:
    No return.
==============================================================================
*sourcemod-CS_SwitchTeam*


Syntax:
	CS_SwitchTeam(client, team);
Usage:
    client              Player's index.
    team                Team index.
Notes:
    Switches the player's team.
Return:
    No return.
==============================================================================
*sourcemod-DegToRad*


Syntax:
	DegToRad(Float:angle);
Usage:
    angle               Degrees.
Notes:
    Converts degrees to radians.
Return:
    Radians.
==============================================================================
*sourcemod-DeleteFile*


Syntax:
	DeleteFile(const String:path[]);
Usage:
    path                Path of the file to delete.
Notes:
    Deletes a file.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-DirExists*


Syntax:
	DirExists(const String:path[]);
Usage:
    path                Path to the directory.
Notes:
    Checks if a directory exists.
Return:
    True if the directory exists, false otherwise.
==============================================================================
*sourcemod-DispatchKeyValue*


Syntax:
	DispatchKeyValue(entity, const String:keyName[], const String:value[]);
Usage:
    entity              Destination entity index.
    keyName             Name of the key.
    value               String value.
Notes:
    Dispatches a KeyValue into given entity using a string value.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-DispatchKeyValueFloat*


Syntax:
	DispatchKeyValueFloat(entity, const String:keyName[], Float:value);
Usage:
    entity              Destination entity index.
    keyName             Name of the key.
    value               Floating point value.
Notes:
    Dispatches a KeyValue into given entity using a floating point value.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-DispatchKeyValueVector*


Syntax:
	DispatchKeyValueVector(entity, const String:keyName[], const Float:vector[3]);
Usage:
    entity              Destination entity index.
    keyName             Name of the key.
    vec                 Vector value.
Notes:
    Dispatches a KeyValue into given entity using a vector value.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-DispatchSpawn*


Syntax:
	DispatchSpawn(entity);
Usage:
    entity              Entity index of the created entity.
Notes:
    Spawns an entity into the game.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-DisplayAskConnectBox*


Syntax:
	DisplayAskConnectBox(client, Float:time, const String:ip[]);
Usage:
    client              Client index.
    time                Duration to hold the panel on the client's screen.
    ip                  Destionation IP.
Notes:
    Displays a panel asking the client to connect to a specified IP.
Return:
    No return.
==============================================================================
*sourcemod-DisplayMenu*


Syntax:
	DisplayMenu(Handle:menu, client, time);
Usage:
    menu                Menu Handle.
    client              Client index.
    time                Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-DisplayMenuAtItem*


Syntax:
	DisplayMenuAtItem(Handle:menu, client, first_item, time);
Usage:
    menu                Menu Handle.
    client              Client index.
    first_item          First item to begin drawing from.
    time                Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client, starting from the given item.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-DisplayTopMenu*


Syntax:
	DisplayTopMenu(Handle:topmenu, client, TopMenuPosition:position);
Usage:
    topmenu             TopMenu Handle.
    client              Client index.
    position            Position to display from.
Notes:
    Displays a TopMenu to a client.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-DrawPanelItem*


Syntax:
	DrawPanelItem(Handle:panel, const String:text[], style=ITEMDRAW_DEFAULT);
Usage:
    panel               A MenuPanel Handle.
    text                Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed.
    style               ITEMDRAW style flags.
Notes:
    Draws an item on a panel.  If the item takes up a slot, the position is returned.
Return:
    A slot position, or 0 if item was a rawline or could not be drawn.
==============================================================================
*sourcemod-DrawPanelText*


Syntax:
	DrawPanelText(Handle:panel, const String:text[]);
Usage:
    panel               A MenuPanel Handle, or INVALID_HANDLE if inside a MenuAction_DisplayItem callback.
    text                Display text to use.
Notes:
    Draws a raw line of text on a panel, without any markup other than a newline.
Return:
    True on success, false if raw lines are not supported.
==============================================================================
*sourcemod-DumpAdminCache*


Syntax:
	DumpAdminCache(AdminCachePart:part, bool:rebuild);
Usage:
    part                Part of the cache to dump.  Specifying groups also dumps admins.
    rebuild             If true, the rebuild forwards will fire.
Notes:
    Tells the admin system to dump a portion of the cache.
Return:
    No return.
==============================================================================
*sourcemod-EmitAmbientSound*


Syntax:
	EmitAmbientSound(const String:name[], const Float:pos[3], entity = SOUND_FROM_WORLD, level = SNDLEVEL_NORMAL, flags = SND_NOFLAGS, Float:vol = SNDVOL_NORMAL, pitch = SNDPITCH_NORMAL, Float:delay = 0.0);
Usage:
    name                Sound file name relative to the 'sounds' folder.
    pos                 Origin of sound.
    entity              Entity index to associate sound with.
    level               Sound level (from 0 to 255).
    flags               Sound flags.
    vol                 Volume (from 0.0 to 1.0).
    pitch               Pitch (from 0 to 255).
    delay               Play delay.
Notes:
    Emits an ambient sound.
Return:
    No return.
==============================================================================
*sourcemod-EmitSentence*


Syntax:
	EmitSentence(const clients[], numClients, sentence, entity, channel = SNDCHAN_AUTO, level = SNDLEVEL_NORMAL, flags = SND_NOFLAGS, Float:volume = SNDVOL_NORMAL, pitch = SNDPITCH_NORMAL, speakerentity = -1, const Float:origin[3] = NULL_VECTOR, const Float:dir[3] = NULL_VECTOR, bool:updatePos = true, Float:soundtime = 0.0, any:...);
Usage:
    clients             Array of client indexes.
    numClients          Number of clients in the array.
    sentence            Sentence index (from PrecacheSenteFile).
    entity              Entity to emit from.
    channel             Channel to emit with.
    level               Sound level.
    flags               Sound flags.
    volume              Sound volume.
    pitch               Sound pitch.
    speakerentity       Unknown.
    origin              Sound origin.
    dir                 Sound direction.
    updatePos           Unknown (updates positions?)
    soundtime           Alternate time to play sound for.
    ...                 Optional list of Float[3] arrays to specify additional origins.
Notes:
    Emits a sentence to a list of clients.
Return:
    No return.
==============================================================================
*sourcemod-EmitSound*


Syntax:
	EmitSound(const clients[], numClients, const String:sample[], entity = SOUND_FROM_PLAYER, channel = SNDCHAN_AUTO, level = SNDLEVEL_NORMAL, flags = SND_NOFLAGS, Float:volume = SNDVOL_NORMAL, pitch = SNDPITCH_NORMAL, speakerentity = -1, const Float:origin[3] = NULL_VECTOR, const Float:dir[3] = NULL_VECTOR, bool:updatePos = true, Float:soundtime = 0.0, any:...);
Usage:
    clients             Array of client indexes.
    numClients          Number of clients in the array.
    sample              Sound file name relative to the 'sounds' folder.
    entity              Entity to emit from.
    channel             Channel to emit with.
    level               Sound level.
    flags               Sound flags.
    volume              Sound volume.
    pitch               Sound pitch.
    speakerentity       Unknown.
    origin              Sound origin.
    dir                 Sound direction.
    updatePos           Unknown (updates positions?)
    soundtime           Alternate time to play sound for.
    ...                 Optional list of Float[3] arrays to specify additional origins.
Notes:
    Emits a sound to a list of clients.
Return:
    No return.
==============================================================================
*sourcemod-EmitSoundToAll*


Syntax:
	EmitSoundToAll(const String:sample[], entity = SOUND_FROM_PLAYER, channel = SNDCHAN_AUTO, level = SNDLEVEL_NORMAL, flags = SND_NOFLAGS, Float:volume = SNDVOL_NORMAL, pitch = SNDPITCH_NORMAL, speakerentity = -1, const Float:origin[3] = NULL_VECTOR, const Float:dir[3] = NULL_VECTOR, bool:updatePos = true, Float:soundtime = 0.0);
Usage:
    sample              Sound file name relative to the 'sounds' folder.
    entity              Entity to emit from.
    channel             Channel to emit with.
    level               Sound level.
    flags               Sound flags.
    volume              Sound volume.
    pitch               Sound pitch.
    speakerentity       Unknown.
    origin              Sound origin.
    dir                 Sound direction.
    updatePos           Unknown (updates positions?)
    soundtime           Alternate time to play sound for.
Notes:
    Wrapper to emit sound to all clients.
Return:
    No return.
==============================================================================
*sourcemod-EmitSoundToClient*


Syntax:
	EmitSoundToClient(client, const String:sample[], entity = SOUND_FROM_PLAYER, channel = SNDCHAN_AUTO, level = SNDLEVEL_NORMAL, flags = SND_NOFLAGS, Float:volume = SNDVOL_NORMAL, pitch = SNDPITCH_NORMAL, speakerentity = -1, const Float:origin[3] = NULL_VECTOR, const Float:dir[3] = NULL_VECTOR, bool:updatePos = true, Float:soundtime = 0.0);
Usage:
    client              Client index.
    sample              Sound file name relative to the 'sounds' folder.
    entity              Entity to emit from.
    channel             Channel to emit with.
    level               Sound level.
    flags               Sound flags.
    volume              Sound volume.
    pitch               Sound pitch.
    speakerentity       Unknown.
    origin              Sound origin.
    dir                 Sound direction.
    updatePos           Unknown (updates positions?)
    soundtime           Alternate time to play sound for.
Notes:
    Wrapper to emit sound to one client.
Return:
    No return.
==============================================================================
*sourcemod-EndMessage*


Syntax:
	EndMessage();
Usage:
Notes:
    Ends a previously started user message (network message).
Return:
    No return.
==============================================================================
*sourcemod-EndOfMapVoteEnabled*


Syntax:
	EndOfMapVoteEnabled();
Usage:
Notes:
    Checks if MapChooser is set to run an end of map vote.
Return:
    True if enabled, false otherwise.
==============================================================================
*sourcemod-EndPrepSDKCall*


Syntax:
	EndPrepSDKCall();
Usage:
Notes:
    Finalizes an SDK call preparation and returns the resultant Handle.
Return:
    A new SDKCall Handle on success, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-EntityOutput*


Syntax:
	EntityOutput(const String:output[], caller, activator, Float:delay);
Usage:
    output              Name of the output that fired.
    caller              Entity index of the caller.
    activator           Entity index of the activator.
    delay               Delay in seconds? before the event gets fired.
Notes:
    Called when an entity output is fired.
Return:
    
==============================================================================
*sourcemod-EquipPlayerWeapon*


Syntax:
	EquipPlayerWeapon(client, weapon);
Usage:
    client              Client index.
    item                CBaseCombatWeapon entity index.
Notes:
    Equip's a player's weapon.
Return:
    No return.
==============================================================================
*sourcemod-ExplodeString*


Syntax:
	ExplodeString(const String:text[], const String:split[], String:buffers[][], maxStrings, maxStringLength);
Usage:
    text                The string to split.
    split               The string to use as a split delimiter.
    buffers             An array of string buffers (2D array).
    maxStrings          Number of string buffers (first dimension size).
    maxStringLength     Maximum length of each string buffer.
Notes:
    Breaks a string into pieces and stores each piece into an array of buffers.
Return:
    Number of strings retrieved.
==============================================================================
*sourcemod-Exponential*


Syntax:
	Exponential(Float:value);
Usage:
    value               Input value.
Notes:
    Returns the value of raising the input by e.
Return:
    exp(value).
==============================================================================
*sourcemod-ExtendMapTimeLimit*


Syntax:
	ExtendMapTimeLimit(time);
Usage:
    time                Number of seconds to extend map time limit by. The number can be negative to decrease the time limit. If 0, the map will be set to have no time limit.
Notes:
    Extends the map time limit in a way that will notify all plugins.
Return:
    True on success, false if operation is not supported.
==============================================================================
*sourcemod-ExtinguishEntity*


Syntax:
	ExtinguishEntity(client);
Usage:
    entity              Entity index.
Notes:
    Extinguishes a player that is on fire.
Return:
    No return.
==============================================================================
*sourcemod-FadeClientVolume*


Syntax:
	FadeClientVolume(client, Float:percent, Float:outtime, Float:holdtime, Float:intime);
Usage:
    client              Client index.
    percent             Fade percentage.
    outtime             Fade out time, in seconds.
    holdtime            Hold time, in seconds.
    intime              Fade in time, in seconds.
Notes:
    Fades a client's volume level toward silence or a given percentage.
Return:
    No return.
==============================================================================
*sourcemod-FakeClientCommand*


Syntax:
	FakeClientCommand(client, const String:fmt[], any:...);
Usage:
    client              Index of the client.
    fmt                 Format of the client command.
    ...                 Format parameters
Notes:
    Executes a client command on the server without being networked. FakeClientCommand() 
    overwrites the command tokenization buffer.  This can cause undesired effects because 
    future calls to GetCmdArg* will return data from the FakeClientCommand(), not the 
    parent command.  If you are in a hook where this matters (for example, a 'say' hook), 
    you should use FakeClientCommandEx() instead.
Return:
    No return.
==============================================================================
*sourcemod-FakeClientCommandEx*


Syntax:
	FakeClientCommandEx(client, const String:fmt[], any:...);
Usage:
    client              Index of the client.
    fmt                 Format of the client command.
    ...                 Format parameters
Notes:
    Executes a client command on the server without being networked.  The execution of 
    the client command is delayed by one frame to prevent any re-entrancy issues that 
    might surface with FakeClientCommand().
Return:
    No return.
==============================================================================
*sourcemod-FileExists*


Syntax:
	FileExists(const String:path[], bool:use_valve_fs=false);
Usage:
    path                Path to the file.
    use_valve_fs        If true, the Valve file system will be used instead. This can be used to check for the existance of files inside GCFs or the game cache, rather than solely files that are on disk.
Notes:
    Checks if a file exists.
Return:
    True if the file exists, false otherwise.
==============================================================================
*sourcemod-FilePosition*


Syntax:
	FilePosition(Handle:file);
Usage:
    file                Handle to the file.
Notes:
    Get current position in the file.
Return:
    Value for the file position indicator.
==============================================================================
*sourcemod-FileSeek*


Syntax:
	FileSeek(Handle:file, position, where);
Usage:
    file                Handle to the file.
    position            Position relative to what is specified in whence.
    where               SEEK_ constant value of where to see from.
Notes:
    Sets the file position indicator.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-FileSize*


Syntax:
	FileSize(const String:path[]);
Usage:
    path                Path to the file.
Notes:
    Get the file size in bytes.
Return:
    File size in bytes, -1 if file not found.
==============================================================================
*sourcemod-FileToKeyValues*


Syntax:
	FileToKeyValues(Handle:kv, const String:file[]);
Usage:
    kv                  KeyValues Handle.
    file                File to read from.
Notes:
    Converts a file to a KeyValues tree.  The file is read into the current position 
    of the tree.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-FindAdmGroup*


Syntax:
	FindAdmGroup(const String:group_name[]);
Usage:
    group_name          String containing the group name.
Notes:
    Finds a group by name.
Return:
    A group id, or INVALID_GROUP_ID if not found.
==============================================================================
*sourcemod-FindAdminByIdentity*


Syntax:
	FindAdminByIdentity(const String:auth[], const String:identity[]);
Usage:
    auth                Auth method to try.
    identity            Identity string to look up.
Notes:
    Attempts to find an admin by an auth method and an identity.
Return:
    An AdminId index if found, INVALID_ADMIN_ID otherwise.
==============================================================================
*sourcemod-FindCharInString*


Syntax:
	FindCharInString(const String:str[], c, bool:reverse = false);
Usage:
    str                 String.
    c                   Character to search for.
    reverse             False (default) to search forward, true to search backward.
Notes:
    Finds the first occurrence of a character in a string.
Return:
    The index of the first occurrence of the character in the string, or -1 if the character 
    was not found.
==============================================================================
*sourcemod-FindClientCookie*


Syntax:
	FindClientCookie(const String:name[]);
Usage:
    name                Name of cookie to find.
Notes:
    Searches for a Client preference cookie.
Return:
    A handle to the cookie if it is found. INVALID_HANDLE otherwise.
==============================================================================
*sourcemod-FindConVar*


Syntax:
	FindConVar(const String:name[]);
Usage:
    name                Name of convar to find.
Notes:
    Searches for a console variable.
Return:
    A handle to the convar if it is found. INVALID_HANDLE otherwise.
==============================================================================
*sourcemod-FindDataMapOffs*


Syntax:
	FindDataMapOffs(entity, const String:prop[], &PropFieldType:type=PropFieldType:0, &num_bits=0);
Usage:
    entity              Entity index.
    prop                Property name.
    type                Optional parameter to store the type.
    num_bits            Optional parameter to store the number of bits the field uses.  The bit count will either be 1 (for boolean) or divisible by 8 (including 0 if unknown).
Notes:
    Given an entity, finds a datamap property offset. This information is cached for 
    future calls.
Return:
    An offset, or -1 on failure.
==============================================================================
*sourcemod-FindEntityByClassname*


Syntax:
	FindEntityByClassname(startEnt, const String:classname[]);
Usage:
    startEnt            The entity index after which to begin searching from. Use -1 to start from the first entity.
    classname           Classname of the entity to find.
Notes:
    Searches for an entity by classname.
Return:
    Entity index >= 0 if found, -1 otherwise.
==============================================================================
*sourcemod-FindFirstConCommand*


Syntax:
	FindFirstConCommand(String:buffer[], max_size, &bool:isCommand, &flags=0, String:description[]='', descrmax_size=0);
Usage:
    buffer              Buffer to store entry name.
    max_size            Maximum size of the buffer.
    isCommand           Variable to store whether the entry is a command. If it is not a command, it is a ConVar.
    flags               Variable to store entry flags.
    description         Buffer to store the description, empty if no description present.
    descrmax_size       Maximum size of the description buffer.
Notes:
    Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  
    If a Handle is returned, the next entry must be read via FindNextConCommand().  
    The order of the list is undefined.
Return:
    On success, a ConCmdIter Handle is returned, which can be read via FindNextConCommand(), 
    and must be closed via CloseHandle().  Additionally, the output parameters will 
    be filled with information of the first ConCommandBase entry. On failure, INVALID_HAND
==============================================================================
*sourcemod-FindFlagByChar*


Syntax:
	FindFlagByChar(c, &AdminFlag:flag);
Usage:
    c                   Flag ASCII character/token.
    flag                Variable to store flag in.
Notes:
    Finds a flag by a given character.
Return:
    True on success, false if not found.
==============================================================================
*sourcemod-FindFlagByName*


Syntax:
	FindFlagByName(const String:name[], &AdminFlag:flag);
Usage:
    name                Flag name (like 'kick'), case sensitive.
    flag                Variable to store flag in.
Notes:
    Finds a flag by its string name.
Return:
    True on success, false if not found.
==============================================================================
*sourcemod-FindNextConCommand*


Syntax:
	FindNextConCommand(Handle:search, String:buffer[], max_size, &bool:isCommand, &flags=0, String:description[]='', descrmax_size=0);
Usage:
    search              ConCmdIter Handle to search.
    buffer              Buffer to store entry name.
    max_size            Maximum size of the buffer.
    isCommand           Variable to store whether the entry is a command. If it is not a command, it is a ConVar.
    flags               Variable to store entry flags.
    description         Buffer to store the description, empty if no description present.
    descrmax_size       Maximum size of the description buffer.
Notes:
    Reads the next entry in a ConCommandBase iterator.
Return:
    On success, the outputs are filled, the iterator is advanced to the next entry, and 
    true is returned. If no more entries exist, false is returned, and the contents 
    of outputs is undefined.
==============================================================================
*sourcemod-FindPluginByFile*


Syntax:
	FindPluginByFile(const String:filename[]);
Usage:
    filename            Filename of the plugin to search for.
Notes:
    Returns plugin handle from plugin filename.
Return:
    Handle to plugin if found, INVALID_HANDLE otherwise.
==============================================================================
*sourcemod-FindPluginByNumber*


Syntax:
	FindPluginByNumber(order_num);
Usage:
    order_num           Number of the plugin as it appears in 'sm plugins list'.
Notes:
    Finds a plugin by its order in the list from the 'plugins list' server 'sm' command. 
     You should not use this function to loop through all plugins, use the iterator 
    instead.  Looping through all plugins using this native is O(n^2), whereas using 
    the iterator is O(n).
Return:
    Plugin Handle on success, INVALID_HANDLE if no plugin matches the given number.
==============================================================================
*sourcemod-FindSendPropInfo*


Syntax:
	FindSendPropInfo(const String:cls[], const String:prop[], &PropFieldType:type=PropFieldType:0, &num_bits=0, &local_offset=0);
Usage:
    cls                 Classname.
    prop                Property name.
    type                Optional parameter to store the type.
    num_bits            Optional parameter to store the number of bits the field uses, if applicable (otherwise 0 is stored).  The number of bits varies for integers and floats, and is always 0 for strings.
    local_offset        Optional parameter to store the local offset, as FindSendPropOffs() would return.
Notes:
    Given a ServerClass name, finds a networkable send property offset. This information 
    is cached for future calls. Note: This function will correctly compute nested offsets, 
    unlike FindSendPropOffs().  YOU SHOULD NOT use this function to self-compute nested 
    offsets.  For example, it is okay to add indexes for arrays, but not to add DT_LocalPlayer 
    to m_nDisguiseClass.
Return:
    On success, returns an absolutely computed offset. If no offset is available, 0 is 
    returned. If the property is not found, -1 is returned.
==============================================================================
*sourcemod-FindSendPropOffs*


Syntax:
	FindSendPropOffs(const String:cls[], const String:prop[]);
Usage:
    cls                 Classname.
    prop                Property name.
Notes:
    Given a ServerClass name, finds a networkable send property offset. This information 
    is cached for future calls. Note, this function may return offsets that do not work! 
    If a property is nested beneath a parent object, the resulting offset will be invalid 
    for direct use with data functions.  Therefore, you should use FindSendPropInfo() 
    instead.  An example of such a property is CTFPlayer::DT_LocalPlayer.m_nDisguiseClass 
    on Team Fortress.
Return:
    An offset, or -1 on failure.
==============================================================================
*sourcemod-FindStringInArray*


Syntax:
	FindStringInArray(Handle:array, const String:item[]);
Usage:
    array               Array Handle.
    item                String to search for
Notes:
    Returns the index for the first occurance of the provided string. If the string cannot 
    be located, -1 will be returned.
Return:
    Array index, or -1 on failure
==============================================================================
*sourcemod-FindStringIndex*


Syntax:
	FindStringIndex(tableidx, const String:str[]);
Usage:
    tableidx            A string table index.
    string              String to find.
Notes:
    Searches for the index of a given string in a string table.
Return:
    String index if found, INVALID_STRING_INDEX otherwise.
==============================================================================
*sourcemod-FindStringTable*


Syntax:
	FindStringTable(const String:name[]);
Usage:
    name                Name of string table to find.
Notes:
    Searches for a string table.
Return:
    A string table index number if found, INVALID_STRING_TABLE otherwise.
==============================================================================
*sourcemod-FindTarget*


Syntax:
	FindTarget(client, const String:target[], bool:nobots = false, bool:immunity = true);
Usage:
    client              Client who issued command
    target              Client's target argument
    nobots              Optional. Set to true if bots should NOT be targetted
    immunity            Optional. Set to false to ignore target immunity.
Notes:
    Wraps ProcessTargetString() and handles producing error messages for bad targets.
Return:
    Index of target client, or -1 on error.
==============================================================================
*sourcemod-FindTeamByName*


Syntax:
	FindTeamByName(const String:name[]);
Usage:
    name                Partial or full team name.
Notes:
    Given a partial team name, attempts to find a matching team. The search is performed 
    case insensitively and only against the first N characters of the team names, where 
    N is the number of characters in the search pattern.
Return:
    A valid team index on success. -1 if no team matched. -2 if more than one team matched.
==============================================================================
*sourcemod-FindTopMenuCategory*


Syntax:
	FindTopMenuCategory(Handle:topmenu, const String:name[]);
Usage:
    topmenu             TopMenu Handle.
    name                Object's unique name.
Notes:
    Finds a category's object ID in a TopMenu.
Return:
    TopMenuObject ID on success, or INVALID_TOPMENUOBJECT on failure.
==============================================================================
*sourcemod-FindValueInArray*


Syntax:
	FindValueInArray(Handle:array, any:item);
Usage:
    array               Array Handle.
    item                Value to search for
Notes:
    Returns the index for the first occurance of the provided value. If the value cannot 
    be located, -1 will be returned.
Return:
    Array index, or -1 on failure
==============================================================================
*sourcemod-FireEvent*


Syntax:
	FireEvent(Handle:event, bool:dontBroadcast=false);
Usage:
    event               Handle to the event.
    dontBroadcast       Optional boolean that determines if event should be broadcast to clients.
Notes:
    Fires a game event. This function closes the event Handle after completing.
Return:
    No return.
==============================================================================
*sourcemod-FlagArrayToBits*


Syntax:
	FlagArrayToBits(const AdminFlag:array[], numFlags);
Usage:
    array               Array containing flags that are enabled.
    numFlags            Number of flags in the array.
Notes:
    Converts an array of flags to bits.
Return:
    A bit string composed of the array flags.
==============================================================================
*sourcemod-FlagBitArrayToBits*


Syntax:
	FlagBitArrayToBits(const bool:array[], maxSize);
Usage:
    array               Array containing true or false for each AdminFlag.
    maxSize             Maximum size of the flag array.
Notes:
    Converts a flag array to a bit string.
Return:
    A bit string composed of the array bits.
==============================================================================
*sourcemod-FlagBitsToArray*


Syntax:
	FlagBitsToArray(bits, AdminFlag:array[], maxSize);
Usage:
    bits                Bit string containing the flags.
    array               Output array to write flags.
    maxSize             Maximum size of the flag array.
Notes:
    Converts a bit string to an array of flags.
Return:
    Number of flags written.
==============================================================================
*sourcemod-FlagBitsToBitArray*


Syntax:
	FlagBitsToBitArray(bits, bool:array[], maxSize);
Usage:
    bits                Bit string containing the flags.
    array               Array to write the flags to.  Enabled flags will be 'true'.
    maxSize             Maximum number of flags the array can store.
Notes:
    Converts a flag bit string to a bit array.
Return:
    Number of flags written.
==============================================================================
*sourcemod-FlagToBit*


Syntax:
	FlagToBit(AdminFlag:flag);
Usage:
    flag                Flag to convert.
Notes:
    Converts a flag to its single bit.
Return:
    Bit representation of the flag.
==============================================================================
*sourcemod-float*


Syntax:
	float(value);
Usage:
    value               Integer to convert.
Notes:
    Converts an integer into a floating point value.
Return:
    Floating point value.
==============================================================================
*sourcemod-FloatAbs*


Syntax:
	FloatAbs(Float:value);
Usage:
    value               Input value.
Notes:
    Returns an absolute value.
Return:
    Absolute value of the input.
==============================================================================
*sourcemod-FloatAdd*


Syntax:
	FloatAdd(Float:oper1, Float:oper2);
Usage:
    oper1               First value.
    oper2               Second value.
Notes:
    Adds two floats together.
Return:
    oper1+oper2.
==============================================================================
*sourcemod-FloatCompare*


Syntax:
	FloatCompare(Float:fOne, Float:fTwo);
Usage:
    fOne                First value.
    fTwo                Second value.
Notes:
    Compares two floats.
Return:
    Returns 1 if the first argument is greater than the second argument. Returns -1 if 
    the first argument is smaller than the second argument. Returns 0 if both arguments 
    are equal.
==============================================================================
*sourcemod-FloatDiv*


Syntax:
	FloatDiv(Float:dividend, Float:divisor);
Usage:
    dividend            First value.
    divisor             Second value.
Notes:
    Divides the dividend by the divisor.
Return:
    dividend/divisor.
==============================================================================
*sourcemod-FloatFraction*


Syntax:
	FloatFraction(Float:value);
Usage:
    value               Input value.
Notes:
    Returns the decimal part of a float.
Return:
    Decimal part.
==============================================================================
*sourcemod-FloatMul*


Syntax:
	FloatMul(Float:oper1, Float:oper2);
Usage:
    oper1               First value.
    oper2               Second value.
Notes:
    Multiplies two floats together.
Return:
    oper1*oper2.
==============================================================================
*sourcemod-FloatSub*


Syntax:
	FloatSub(Float:oper1, Float:oper2);
Usage:
    oper1               First value.
    oper2               Second value.
Notes:
    Subtracts oper2 from oper1.
Return:
    oper1-oper2.
==============================================================================
*sourcemod-FloatToString*


Syntax:
	FloatToString(Float:num, String:str[], maxlength);
Usage:
    num                 Floating point number to convert.
    str                 Buffer to store string in.
    maxlength           Maximum length of string buffer.
Notes:
    Converts a floating point number to a string.
Return:
    Number of cells written to buffer.
==============================================================================
*sourcemod-FlushFile*


Syntax:
	FlushFile(Handle:file);
Usage:
    file                Handle to the file.
Notes:
    Flushes a file's buffered output; any buffered output is immediately written to the 
    file.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-ForceChangeLevel*


Syntax:
	ForceChangeLevel(const String:map[], const String:reason[]);
Usage:
    map                 Map to change to.
    reason              Reason for change.
Notes:
    Changes the current map and records the reason for the change with maphistory
Return:
    No return.
==============================================================================
*sourcemod-ForcePlayerSuicide*


Syntax:
	ForcePlayerSuicide(client);
Usage:
    client              Client index.
Notes:
    Forces a player to commit suicide.
Return:
    No return.
==============================================================================
*sourcemod-Format*


Syntax:
	Format(String:buffer[], maxlength, const String:format[], any:...);
Usage:
    buffer              Destination string buffer.
    maxlength           Maximum length of output string buffer.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
Return:
    Number of cells written.
==============================================================================
*sourcemod-FormatActivitySource*


Syntax:
	FormatActivitySource(client, target, const String:namebuf[], maxlength);
Usage:
    client        Originating client; may be 0 for server console. target        Targeted client.
    namebuf       Name buffer. maxlength     Maximum size of the name buffer.
Notes:
    Given an originating client and a target client, returns the string that describes 
    the originating client according to the sm_show_activity cvar. For example, 'ADMIN', 
    'PLAYER', or a player's name could be placed in this buffer.
Return:
    True if activity should be shown.  False otherwise.  In either case, the name buffer 
    is filled.  The return value can be used to broadcast a 'safe' name to all players 
    regardless of the sm_show_activity filters.
==============================================================================
*sourcemod-FormatEx*


Syntax:
	FormatEx(String:buffer[], maxlength, const String:format[], any:...);
Usage:
    buffer              Destination string buffer.
    maxlength           Maximum length of output string buffer.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
Return:
    Number of cells written.
==============================================================================
*sourcemod-FormatNativeString*


Syntax:
	FormatNativeString(out_param, fmt_param, vararg_param, out_len, &written=0, String:out_string[]='', const String:fmt_string[]='');
Usage:
    out_param           Output parameter number to write to.  If 0, out_string is used.
    fmt_param           Format parameter number.  If 0, fmt_string is used.
    vararg_param        First variable parameter number.
    out_len             Output string buffer maximum length (always required).
    written             Optionally stores the number of bytes written.
    out_string          Output string buffer to use if out_param is not used.
    fmt_string          Format string to use if fmt_param is not used.
Notes:
    Formats a string using parameters from a native.
Return:
    SP_ERROR_NONE on success, anything else on failure.
==============================================================================
*sourcemod-FormatTime*


Syntax:
	FormatTime(String:buffer[], maxlength, const String:format[], stamp=-1);
Usage:
    buffer              Destination string buffer.
    maxlength           Maximum length of output string buffer.
    format              Formatting rules (passing NULL_STRING will use the rules defined in sm_datetime_format).
    stamp               Optional time stamp.
Notes:
    Produces a date and/or time string value for a timestamp. See this URL for valid 
    parameters: http://cplusplus.com/reference/clibrary/ctime/strftime.html
Return:
    No return.
==============================================================================
*sourcemod-FormatUserLogText*


Syntax:
	FormatUserLogText(client, String:buffer[], maxlength);
Usage:
    client              Client index.
    buffer              Buffer for text.
    maxlength           Maximum length of text.
Notes:
    Formats a user's info as log text.  This is usually not needed because %L can be 
    used to auto-format client information into a string.
Return:
    
==============================================================================
*sourcemod-GameConfGetKeyValue*


Syntax:
	GameConfGetKeyValue(Handle:gc, const String:key[], String:buffer[], maxlen);
Usage:
    gc                  Game config handle.
    key                 Key to retrieve from the Keys section.
    buffer              Destination string buffer.
    maxlen              Maximum length of output string buffer.
Notes:
    Gets the value of a key from the 'Keys' section.
Return:
    True if key existed, false otherwise.
==============================================================================
*sourcemod-GameConfGetOffset*


Syntax:
	GameConfGetOffset(Handle:gc, const String:key[]);
Usage:
    gc                  Game config handle.
    key                 Key to retrieve from the offset section.
Notes:
    Returns an offset value.
Return:
    An offset, or -1 on failure.
==============================================================================
*sourcemod-GameLogHook*


Syntax:
	GameLogHook(const String:message[]);
Usage:
    message             Message contents.
Notes:
    Called when a game log message is received. Any Log*() functions called within this 
    callback will not recursively pass through.  That is, they will log directly, bypassing 
    this callback. Note that this does not capture log messages from the engine.  It 
    only captures log messages being sent from the game/mod itself.
Return:
    Plugin_Handled or Plugin_Stop will prevent the message from being written to the 
    log file.
==============================================================================
*sourcemod-GeoipCode2*


Syntax:
	GeoipCode2(const String:ip[], String:ccode[3]);
Usage:
    ip                  Ip to determine the country code.
    ccode               Destination string buffer to store the code.
Notes:
    Gets the two character country code from an IP address. (US, CA, etc)
Return:
    True on success, false if no country found.
==============================================================================
*sourcemod-GeoipCode3*


Syntax:
	GeoipCode3(const String:ip[], String:ccode[4]);
Usage:
    ip                  Ip to determine the country code.
    ccode               Destination string buffer to store the code.
Notes:
    Gets the three character country code from an IP address. (USA, CAN, etc)
Return:
    True on success, false if no country found.
==============================================================================
*sourcemod-GeoipCountry*


Syntax:
	GeoipCountry(const String:ip[], String:name[], maxlength);
Usage:
    ip                  Ip to determine the country code.
    ccode               Destination string buffer to store the country name.
    len                 Maximum length of output string buffer.
Notes:
    Gets the full country name. (max length of output string is 45)
Return:
    True on success, false if no country found.
==============================================================================
*sourcemod-GetAdmGroupAddFlag*


Syntax:
	GetAdmGroupAddFlag(GroupId:id, AdminFlag:flag);
Usage:
    id                  Group id.
    flag                Admin flag to retrieve.
Notes:
    Gets the set value of an add flag on a group's flag set.
Return:
    True if enabled, false otherwise,
==============================================================================
*sourcemod-GetAdmGroupAddFlags*


Syntax:
	GetAdmGroupAddFlags(GroupId:id);
Usage:
    id                  GroupId of the group.
Notes:
    Returns the flag set that is added to a user from their group.
Return:
    Bitstring containing the flags enabled.
==============================================================================
*sourcemod-GetAdmGroupCmdOverride*


Syntax:
	GetAdmGroupCmdOverride(GroupId:id, const String:name[], OverrideType:type, &OverrideRule:rule);
Usage:
    id                  Group id.
    name                String containing command name (case sensitive).
    type                Override type (specific command or group).
    rule                Optional pointer to store allow/deny setting.
Notes:
    Retrieves a group-specific command override.
Return:
    True if an override exists, false otherwise.
==============================================================================
*sourcemod-GetAdmGroupImmuneCount*


Syntax:
	GetAdmGroupImmuneCount(GroupId:id);
Usage:
    id                  Group id.
Notes:
    Returns the number of specific group immunities.
Return:
    Number of group immunities.
==============================================================================
*sourcemod-GetAdmGroupImmuneFrom*


Syntax:
	GetAdmGroupImmuneFrom(GroupId:id, number);
Usage:
    id                  Group id.
    number              Index from 0 to N-1, from GetAdmGroupImmuneCount().
Notes:
    Returns a group that this group is immune to given an index.
Return:
    GroupId that this group is immune to, or INVALID_GROUP_ID on failure.
==============================================================================
*sourcemod-GetAdmGroupImmunityLevel*


Syntax:
	GetAdmGroupImmunityLevel(GroupId:gid);
Usage:
    gid                 Group Id.
Notes:
    Gets a group's immunity level (defaults to 0).
Return:
    Immunity level value.
==============================================================================
*sourcemod-GetAdminFlag*


Syntax:
	GetAdminFlag(AdminId:id, AdminFlag:flag, AdmAccessMode:mode=Access_Effective);
Usage:
    id                  AdminId index of the admin.
    flag                Admin flag to use.
    mode                Access mode to check.
Notes:
    Returns whether or not a flag is enabled on an admin.
Return:
    True if enabled, false otherwise.
==============================================================================
*sourcemod-GetAdminFlags*


Syntax:
	GetAdminFlags(AdminId:id, AdmAccessMode:mode);
Usage:
    id                  AdminId index of the admin.
    mode                Access mode to use.
Notes:
    Returns the bitstring of access flags on an admin.
Return:
    A bitstring containing which flags are enabled.
==============================================================================
*sourcemod-GetAdminGroup*


Syntax:
	GetAdminGroup(AdminId:id, index, const String:name[], maxlength);
Usage:
    id                  AdminId index of the admin.
    index               Group number to retrieve, from 0 to N-1, where N is the value of GetAdminGroupCount(id).
    name                Buffer to store the group's name. Note: This will safely chop UTF-8 strings.
    maxlength           Maximum size of the output name buffer.
Notes:
    Returns group information from an admin.
Return:
    A GroupId index and a name pointer, or INVALID_GROUP_ID and NULL if an error occurred.
==============================================================================
*sourcemod-GetAdminGroupCount*


Syntax:
	GetAdminGroupCount(AdminId:id);
Usage:
    id                  AdminId index of the admin.
Notes:
    Returns the number of groups this admin is a member of.
Return:
    Number of groups this admin is a member of.
==============================================================================
*sourcemod-GetAdminImmunityLevel*


Syntax:
	GetAdminImmunityLevel(AdminId:id);
Usage:
    id                  Admin Id.
Notes:
    Gets an admin's immunity level.
Return:
    Immunity level value.
==============================================================================
*sourcemod-GetAdminPassword*


Syntax:
	GetAdminPassword(AdminId:id, const String:buffer[]='', maxlength=0);
Usage:
    id                  AdminId index of the admin.
    name                Optional buffer to store the admin's password.
    maxlength           Maximum size of the output name buffer. Note: This will safely chop UTF-8 strings.
Notes:
    Gets an admin's password.
Return:
    True if there was a password set, false otherwise.
==============================================================================
*sourcemod-GetAdminTopMenu*


Syntax:
	GetAdminTopMenu();
Usage:
Notes:
    Retrieves the Handle to the admin top menu.
Return:
    Handle to the admin menu's TopMenu, or INVALID_HANDLE if not created yet.
==============================================================================
*sourcemod-GetAdminUsername*


Syntax:
	GetAdminUsername(AdminId:id, const String:name[], maxlength);
Usage:
    id                  AdminId of the admin.
    name                String buffer to store name.
    maxlength           Maximum size of string buffer.
Notes:
    Retrieves an admin's user name as made with CreateAdmin().
Return:
    Number of bytes written.
==============================================================================
*sourcemod-GetAngleVectors*


Syntax:
	GetAngleVectors(const Float:angle[3], Float:fwd[3], Float:right[3], Float:up[3]);
Usage:
    angle               Angle.
    fwd                 Forward vector buffer or NULL_VECTOR.
    right               Right vector buffer or NULL_VECTOR.
    up                  Up vector buffer or NULL_VECTOR.
Notes:
    Returns vectors in the direction of an angle.
Return:
    No return.
==============================================================================
*sourcemod-GetArrayArray*


Syntax:
	GetArrayArray(Handle:array, index, any:buffer[], size=-1);
Usage:
    array               Array Handle.
    index               Index in the array.
    buffer              Buffer to store the array in.
    size                If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used.
Notes:
    Retrieves an array of cells from an array.
Return:
    Number of cells copied.
==============================================================================
*sourcemod-GetArrayCell*


Syntax:
	GetArrayCell(Handle:array, index, block=0, bool:asChar=false);
Usage:
    array               Array Handle.
    index               Index in the array.
    block               Optionally specify which block to read from (useful if the blocksize > 0).
    asChar              Optionally read as a byte instead of a cell.
Notes:
    Retrieves a cell value from an array.
Return:
    Value read.
==============================================================================
*sourcemod-GetArraySize*


Syntax:
	GetArraySize(Handle:array);
Usage:
    array               Array Handle.
Notes:
    Returns the array size.
Return:
    Number of elements in the array.
==============================================================================
*sourcemod-GetArrayString*


Syntax:
	GetArrayString(Handle:array, index, String:buffer[], maxlength);
Usage:
    array               Array Handle.
    index               Index in the array.
    buffer              Buffer to copy to.
    maxlength           Maximum size of the buffer.
Notes:
    Retrieves a string value from an array.
Return:
    Number of characters copied.
==============================================================================
*sourcemod-GetCharBytes*


Syntax:
	GetCharBytes(const String:source[]);
Usage:
    source              Source input string.
Notes:
    Returns the number of bytes a character is using.  This is for multi-byte characters 
    (UTF-8).  For normal ASCII characters, this will return 1.
Return:
    Number of bytes the current character uses.
==============================================================================
*sourcemod-GetClientAbsAngles*


Syntax:
	GetClientAbsAngles(client, Float:ang[3]);
Usage:
    client              Player's index.
    ang                 Destination vector to store the client's position angle.
Notes:
    Returns the client's position angle.
Return:
    No return.
==============================================================================
*sourcemod-GetClientAbsOrigin*


Syntax:
	GetClientAbsOrigin(client, Float:vec[3]);
Usage:
    client              Player's index.
    vec                 Destination vector to store the client's origin vector.
Notes:
    Returns the client's origin vector.
Return:
    No return.
==============================================================================
*sourcemod-GetClientAimTarget*


Syntax:
	GetClientAimTarget(client, bool:only_clients=true);
Usage:
    client              Client performing the aiming.
    only_clients        True to exclude all entities but clients.
Notes:
    Returns the entity a client is aiming at.
Return:
    Entity index being aimed at. -1 if no entity is being aimed at. -2 if the function 
    is not supported.
==============================================================================
*sourcemod-GetClientArmor*


Syntax:
	GetClientArmor(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's armor.
Return:
    Armor value.
==============================================================================
*sourcemod-GetClientAuthString*


Syntax:
	GetClientAuthString(client, String:auth[], maxlen);
Usage:
    client              Player index.
    auth                Buffer to store the client's auth string.
    maxlen              Maximum length of string buffer (includes NULL terminator).
Notes:
    Retrieves a client's authentication string (SteamID).
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-GetClientAvgChoke*


Syntax:
	GetClientAvgChoke(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's average packet choke, values go from 0 to 1 (for percentages).
Return:
    Average packet choke.
==============================================================================
*sourcemod-GetClientAvgData*


Syntax:
	GetClientAvgData(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's data flow in bytes/sec.
Return:
    Data flow.
==============================================================================
*sourcemod-GetClientAvgLatency*


Syntax:
	GetClientAvgLatency(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's average packet latency in seconds.
Return:
    Average latency.
==============================================================================
*sourcemod-GetClientAvgLoss*


Syntax:
	GetClientAvgLoss(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's average packet loss, values go from 0 to 1 (for percentages).
Return:
    Average packet loss.
==============================================================================
*sourcemod-GetClientAvgPackets*


Syntax:
	GetClientAvgPackets(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's average packet frequency in packets/sec.
Return:
    Packet frequency.
==============================================================================
*sourcemod-GetClientButtons*


Syntax:
	GetClientButtons(client);
Usage:
    client              Client index
Notes:
    Get's a users current pressed buttons
Return:
    Bitsum of buttons
==============================================================================
*sourcemod-GetClientCookie*


Syntax:
	GetClientCookie(client, Handle:cookie, String:buffer[], maxlen);
Usage:
    client              Client index.
    cookie              Client preference cookie handle.
    buffer              Copyback buffer for value.
    maxlen              Maximum length of the buffer.
Notes:
    Retrieve the value of a Client preference cookie.
Return:
    No return.
==============================================================================
*sourcemod-GetClientCount*


Syntax:
	GetClientCount(bool:inGameOnly=true);
Usage:
    inGameOnly          If false connecting players are also counted.
Notes:
    Returns the client count put in the server.
Return:
    Client count in the server.
==============================================================================
*sourcemod-GetClientDataRate*


Syntax:
	GetClientDataRate(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's send data rate in bytes/sec.
Return:
    Data rate.
==============================================================================
*sourcemod-GetClientDeaths*


Syntax:
	GetClientDeaths(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's death count.
Return:
    Death count.
==============================================================================
*sourcemod-GetClientEyeAngles*


Syntax:
	GetClientEyeAngles(client, Float:ang[3]);
Usage:
    client              Player's index.
    ang                 Destination vector to store the client's eye angles.
Notes:
    Returns the client's eye angles.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-GetClientEyePosition*


Syntax:
	GetClientEyePosition(client, Float:pos[3]);
Usage:
    client              Player's index.
    pos                 Destination vector to store the client's eye position.
Notes:
    Returns the client's eye position.
Return:
    No return.
==============================================================================
*sourcemod-GetClientFrags*


Syntax:
	GetClientFrags(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's frag count.
Return:
    Frag count.
==============================================================================
*sourcemod-GetClientFromSerial*


Syntax:
	GetClientFromSerial(serial);
Usage:
Notes:
    Returns the client index by its serial number.
Return:
    Client index, or 0 for invalid serial.
==============================================================================
*sourcemod-GetClientHealth*


Syntax:
	GetClientHealth(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's health.
Return:
    Health value.
==============================================================================
*sourcemod-GetClientInfo*


Syntax:
	GetClientInfo(client, const String:key[], String:value[], maxlen);
Usage:
    client              Player's index.
    key                 Key string.
    value               Buffer to store value.
    maxlen              Maximum length of valve (UTF-8 safe).
Notes:
    Retrieves values from client replicated keys.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-GetClientIP*


Syntax:
	GetClientIP(client, String:ip[], maxlen, bool:remport=true);
Usage:
    client              Player index.
    name                Buffer to store the client's ip address.
    maxlen              Maximum length of string buffer (includes NULL terminator).
    remport             Remove client's port from the ip string (true by default).
Notes:
    Retrieves a client's IP address.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-GetClientLanguage*


Syntax:
	GetClientLanguage(client);
Usage:
    client              Client index.
Notes:
    Retrieves the language number of a client. Currently this simply returns the server 
    language index.
Return:
    Language number client is using.
==============================================================================
*sourcemod-GetClientLatency*


Syntax:
	GetClientLatency(client, NetFlow:flow);
Usage:
    client              Player's index.
    flow                Traffic flowing direction.
Notes:
    Returns the client's current latency (RTT), more accurate than GetAvgLatency but 
    jittering.
Return:
    Latency.
==============================================================================
*sourcemod-GetClientListening*


Syntax:
	GetClientListening(iReceiver, iSender);
Usage:
    iReceiver           The listener index.
    iSender             The sender index.
Notes:
    Retrieves if the receiver can listen to the sender.
Return:
    True if successful otherwise false.
==============================================================================
*sourcemod-GetClientListeningFlags*


Syntax:
	GetClientListeningFlags(client);
Usage:
    client              The client index
Notes:
    Retrieve the client current listening flags.
Return:
    The current voice flags
==============================================================================
*sourcemod-GetClientMaxs*


Syntax:
	GetClientMaxs(client, Float:vec[3]);
Usage:
    client              Player's index.
    vec                 Destination vector to store the client's max size.
Notes:
    Returns the client's max size vector.
Return:
    No return.
==============================================================================
*sourcemod-GetClientMenu*


Syntax:
	GetClientMenu(client, Handle:hStyle=INVALID_HANDLE);
Usage:
    client              Client index.
    hStyle              MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Returns whether a client is viewing a menu.
Return:
    A MenuSource value.
==============================================================================
*sourcemod-GetClientMins*


Syntax:
	GetClientMins(client, Float:vec[3]);
Usage:
    client              Player's index.
    vec                 Destination vector to store the client's min size.
Notes:
    Returns the client's min size vector.
Return:
    No return.
==============================================================================
*sourcemod-GetClientModel*


Syntax:
	GetClientModel(client, String:model[], maxlen);
Usage:
    client              Player's index.
    model               Buffer to store the client's model name.
    maxlen              Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client's model name.
Return:
    No return.
==============================================================================
*sourcemod-GetClientName*


Syntax:
	GetClientName(client, String:name[], maxlen);
Usage:
    client              Player index.
    name                Buffer to store the client's name.
    maxlen              Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client's name.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-GetClientOfUserId*


Syntax:
	GetClientOfUserId(userid);
Usage:
    userid              Userid value.
Notes:
    Translates an userid index to the real player index.
Return:
    Client value.
==============================================================================
*sourcemod-GetClientSerial*


Syntax:
	GetClientSerial(client);
Usage:
Notes:
    Returns the clients unique serial identifier.
Return:
    Serial number.
==============================================================================
*sourcemod-GetClientTeam*


Syntax:
	GetClientTeam(client);
Usage:
    client              Player's index.
Notes:
    Retrieves a client's team index.
Return:
    Team index the client is on (mod specific).
==============================================================================
*sourcemod-GetClientTime*


Syntax:
	GetClientTime(client);
Usage:
    client              Player's index.
Notes:
    Returns the client's connection time in seconds.
Return:
    Connection time.
==============================================================================
*sourcemod-GetClientUserId*


Syntax:
	GetClientUserId(client);
Usage:
    client              Player index.
Notes:
    Retrieves a client's user id, which is an index incremented for every client that 
    joins the server.
Return:
    User id of the client.
==============================================================================
*sourcemod-GetClientWeapon*


Syntax:
	GetClientWeapon(client, String:weapon[], maxlen);
Usage:
    client              Player's index.
    weapon              Buffer to store the client's weapon name.
    maxlen              Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client's weapon name.
Return:
    No return.
==============================================================================
*sourcemod-GetCmdArg*


Syntax:
	GetCmdArg(argnum, String:buffer[], maxlength);
Usage:
    argnum              Argument number to retrieve.
    buffer              Buffer to use for storing the string.
    maxlength           Maximum length of the buffer.
Notes:
    Retrieves a command argument given its index, from the current console or server 
    command.
Return:
    Length of string written to buffer.
==============================================================================
*sourcemod-GetCmdArgs*


Syntax:
	GetCmdArgs();
Usage:
Notes:
    Returns the number of arguments from the current console or server command.
Return:
    Number of arguments to the current command.
==============================================================================
*sourcemod-GetCmdArgString*


Syntax:
	GetCmdArgString(String:buffer[], maxlength);
Usage:
    buffer              Buffer to use for storing the string.
    maxlength           Maximum length of the buffer.
Notes:
    Retrieves the entire command argument string in one lump from the current console 
    or server command.
Return:
    Length of string written to buffer.
==============================================================================
*sourcemod-GetCmdReplySource*


Syntax:
	GetCmdReplySource();
Usage:
Notes:
    Returns the current reply source of a command.
Return:
    ReplySource value.
==============================================================================
*sourcemod-GetCommandFlags*


Syntax:
	GetCommandFlags(const String:name[]);
Usage:
    name                Name of the command.
Notes:
    Returns the bitstring of flags of a command.
Return:
    A bitstring containing the FCVAR_* flags that are enabled or INVALID_FCVAR_FLAGS 
    if command not found.
==============================================================================
*sourcemod-GetCommandIterator*


Syntax:
	GetCommandIterator();
Usage:
Notes:
    Gets a command iterator.  Must be freed with CloseHandle().
Return:
    A new command iterator.
==============================================================================
*sourcemod-GetCommandOverride*


Syntax:
	GetCommandOverride(const String:cmd[], OverrideType:type, &flags);
Usage:
    cmd                 String containing command name (case sensitive).
    type                Override type (specific command or group).
    flags               By-reference cell to store the flag (undefined if not found).
Notes:
    Returns a command override.
Return:
    True if there is an override, false otherwise.
==============================================================================
*sourcemod-GetConVarBool*


Syntax:
	GetConVarBool(Handle:convar);
Usage:
    convar              Handle to the convar.
Notes:
    Returns the boolean value of a console variable.
Return:
    The boolean value of the convar.
==============================================================================
*sourcemod-GetConVarBounds*


Syntax:
	GetConVarBounds(Handle:convar, ConVarBounds:type, &Float:value);
Usage:
    convar              Handle to the convar.
    type                Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper.
    value               By-reference cell to store the specified floating point bound value.
Notes:
    Retrieves the specified bound of a console variable.
Return:
    True if the convar has the specified bound set, false otherwise.
==============================================================================
*sourcemod-GetConVarFlags*


Syntax:
	GetConVarFlags(Handle:convar);
Usage:
    convar              Handle to the convar.
Notes:
    Returns the bitstring of flags on a console variable.
Return:
    A bitstring containing the FCVAR_* flags that are enabled.
==============================================================================
*sourcemod-GetConVarFloat*


Syntax:
	GetConVarFloat(Handle:convar);
Usage:
    convar              Handle to the convar.
Notes:
    Returns the floating point value of a console variable.
Return:
    The floating point value of the convar.
==============================================================================
*sourcemod-GetConVarInt*


Syntax:
	GetConVarInt(Handle:convar);
Usage:
    convar              Handle to the convar.
Notes:
    Returns the integer value of a console variable.
Return:
    The integer value of the convar.
==============================================================================
*sourcemod-GetConVarName*


Syntax:
	GetConVarName(Handle:convar, const String:name[], maxlength);
Usage:
    convar              Handle to the convar.
    value               Buffer to store the name of the convar.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the name of a console variable.
Return:
    No return.
==============================================================================
*sourcemod-GetConVarString*


Syntax:
	GetConVarString(Handle:convar, String:value[], maxlength);
Usage:
    convar              Handle to the convar.
    value               Buffer to store the value of the convar.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the string value of a console variable.
Return:
    No return.
==============================================================================
*sourcemod-GetCookieAccess*


Syntax:
	GetCookieAccess(Handle:cookie);
Usage:
    cookie              Client preference cookie handle.
Notes:
    Returns the access level of a cookie
Return:
    CookieAccess access level.
==============================================================================
*sourcemod-GetCookieIterator*


Syntax:
	GetCookieIterator();
Usage:
Notes:
    Gets a cookie iterator.  Must be freed with CloseHandle().
Return:
    A new cookie iterator.
==============================================================================
*sourcemod-GetCurrentMap*


Syntax:
	GetCurrentMap(String:buffer[], maxlength);
Usage:
    buffer              Buffer to store map name.
    maxlength           Maximum length of buffer.
Notes:
    Returns the current map name.
Return:
    Number of bytes written (UTF-8 safe).
==============================================================================
*sourcemod-GetEdictClassname*


Syntax:
	GetEdictClassname(edict, String:clsname[], maxlength);
Usage:
    edict               Index of the entity.
    clsname             Buffer to store the classname.
    maxlength           Maximum length of the buffer.
Notes:
    Retrieves an edict classname.
Return:
    True on success, false if there is no classname set.
==============================================================================
*sourcemod-GetEdictFlags*


Syntax:
	GetEdictFlags(edict);
Usage:
    edict               Index of the entity.
Notes:
    Returns the flags on an edict.  These are not the same as entity flags.
Return:
    Edict flags.
==============================================================================
*sourcemod-GetEngineTime*


Syntax:
	GetEngineTime();
Usage:
Notes:
    Returns a high-precision time value for profiling the engine.
Return:
    A floating point time value.
==============================================================================
*sourcemod-GetEntData*


Syntax:
	GetEntData(entity, offset, size=4);
Usage:
    entity              Edict index.
    offset              Offset to use.
    size                Number of bytes to read (valid values are 1, 2, or 4).
Notes:
    Peeks into an entity's object data and retrieves the integer value at the given offset.
Return:
    Value at the given memory location.
==============================================================================
*sourcemod-GetEntDataArray*


Syntax:
	GetEntDataArray(entity, offset, array[], arraySize, dataSize=4);
Usage:
    entity              Entity index.
    offset              Offset to use.
    array               Array to read into.
    arraySize           Number of values to read.
    dataSize            Size of each value in bytes (1, 2, or 4).
Notes:
    Copies an array of cells from an entity at a given offset.
Return:
    No return.
==============================================================================
*sourcemod-GetEntDataEnt2*


Syntax:
	GetEntDataEnt2(entity, offset);
Usage:
    entity              Edict index.
    offset              Offset to use.
Notes:
    Peeks into an entity's object data and retrieves the entity index at the given offset. 
    Note: This will only work on offsets that are stored as 'entity handles' (which 
    usually looks like m_h* in properties).  These are not SourceMod Handles, but internal 
    Source structures.
Return:
    Entity index at the given location.  If there is no entity, or the stored entity 
    is invalid, then -1 is returned.
==============================================================================
*sourcemod-GetEntDataFloat*


Syntax:
	GetEntDataFloat(entity, offset);
Usage:
    entity              Edict index.
    offset              Offset to use.
Notes:
    Peeks into an entity's object data and retrieves the float value at the given offset.
Return:
    Value at the given memory location.
==============================================================================
*sourcemod-GetEntDataString*


Syntax:
	GetEntDataString(entity, offset, String:buffer[], maxlen);
Usage:
    entity              Edict index.
    offset              Offset to use.
    buffer              Destination string buffer.
    maxlen              Maximum length of output string buffer.
Notes:
    Peeks into an entity's object data and retrieves the string at the given offset.
Return:
    Number of non-null bytes written.
==============================================================================
*sourcemod-GetEntDataVector*


Syntax:
	GetEntDataVector(entity, offset, Float:vec[3]);
Usage:
    entity              Edict index.
    offset              Offset to use.
    vec                 Vector buffer to store data in.
Notes:
    Peeks into an entity's object data and retrieves the vector at the given offset.
Return:
    No return.
==============================================================================
*sourcemod-GetEntityCount*


Syntax:
	GetEntityCount();
Usage:
Notes:
    Returns the number of entities in the server.
Return:
    Number of entities in the server.
==============================================================================
*sourcemod-GetEntityFlags*


Syntax:
	GetEntityFlags(entity);
Usage:
    entity              Entity index.
Notes:
    Get an entity's flags.
Return:
    Entity's flags, see m_fFlag defines above
==============================================================================
*sourcemod-GetEntityGravity*


Syntax:
	GetEntityGravity(entity);
Usage:
    entity              Entity index.
Notes:
    Gets an entity's gravity.
Return:
    Entity's m_flGravity value.
==============================================================================
*sourcemod-GetEntityMoveType*


Syntax:
	GetEntityMoveType(entity);
Usage:
    entity              Entity index.
Notes:
    Gets an entity's movetype.
Return:
    Movetype, see enum above.
==============================================================================
*sourcemod-GetEntityNetClass*


Syntax:
	GetEntityNetClass(edict, String:clsname[], maxlength);
Usage:
    edict               Index of the entity.
    clsname             Buffer to store the serverclass name.
    maxlength           Maximum lnegth of the buffer.
Notes:
    Retrieves an entity's networkable serverclass name. This is not the same as the classname 
    and is used for networkable state changes.
Return:
    True on success, false if the edict is not networkable.
==============================================================================
*sourcemod-GetEntityRenderFx*


Syntax:
	GetEntityRenderFx(entity);
Usage:
    entity              Entity index.
Notes:
    Gets an entity's render Fx.
Return:
    RenderFx value.
==============================================================================
*sourcemod-GetEntityRenderMode*


Syntax:
	GetEntityRenderMode(entity);
Usage:
    entity              Entity index.
Notes:
    Gets an entity's render mode.
Return:
    RenderMode value.
==============================================================================
*sourcemod-GetEntProp*


Syntax:
	GetEntProp(entity, PropType:type, const String:prop[], size=4);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    size                Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails.
Notes:
    Retrieves an integer value from an entity's property. This function is considered 
    safer and more robust over GetEntData, because it performs strict offset checking 
    and typing rules.
Return:
    Value at the given property offset.
==============================================================================
*sourcemod-GetEntPropEnt*


Syntax:
	GetEntPropEnt(entity, PropType:type, const String:prop[]);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
Notes:
    Retrieves an entity index from an entity's property. This function is considered 
    safer and more robust over GetEntDataEnt*, because it performs strict offset checking 
    and typing rules.
Return:
    Entity index at the given property. If there is no entity, or the entity is not valid, 
    then -1 is returned.
==============================================================================
*sourcemod-GetEntPropFloat*


Syntax:
	GetEntPropFloat(entity, PropType:type, const String:prop[]);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
Notes:
    Retrieves a float value from an entity's property. This function is considered safer 
    and more robust over GetEntDataFloat, because it performs strict offset checking 
    and typing rules.
Return:
    Value at the given property offset.
==============================================================================
*sourcemod-GetEntPropString*


Syntax:
	GetEntPropString(entity, PropType:type, const String:prop[], String:buffer[], maxlen);
Usage:
    entity              Edict index.
    type                Property type.
    prop                Property to use.
    buffer              Destination string buffer.
    maxlen              Maximum length of output string buffer.
Notes:
    Gets a network property as a string.
Return:
    Number of non-null bytes written.
==============================================================================
*sourcemod-GetEntPropVector*


Syntax:
	GetEntPropVector(entity, PropType:type, const String:prop[], Float:vec[3]);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    vec                 Vector buffer to store data in.
Notes:
    Retrieves a vector of floats from an entity, given a named network property. This 
    function is considered safer and more robust over GetEntDataVector, because it performs 
    strict offset checking and typing rules.
Return:
    No return.
==============================================================================
*sourcemod-GetEntSendPropOffs*


Syntax:
	GetEntSendPropOffs(ent, const String:prop[], bool:actual=false);
Usage:
    ent                 Entity index.
    prop                Property name.
    actual              Defaults to false for backwards compatibility. If true, the newer FindSendPropInfo() function is used instead.
Notes:
    Wrapper function for finding a send property for a particular entity.
Return:
    An offset, or -1 on failure.
==============================================================================
*sourcemod-GetEventBool*


Syntax:
	GetEventBool(Handle:event, const String:key[]);
Usage:
    event               Handle to the event.
    key                 Name of event key.
Notes:
    Returns the boolean value of a game event's key.
Return:
    The boolean value of the specfied event key.
==============================================================================
*sourcemod-GetEventFloat*


Syntax:
	GetEventFloat(Handle:event, const String:key[]);
Usage:
    event               Handle to the event.
    key                 Name of event key.
Notes:
    Returns the floating point value of a game event's key.
Return:
    The floating point value of the specfied event key.
==============================================================================
*sourcemod-GetEventInt*


Syntax:
	GetEventInt(Handle:event, const String:key[]);
Usage:
    event               Handle to the event.
    key                 Name of event key.
Notes:
    Returns the integer value of a game event's key.
Return:
    The integer value of the specfied event key.
==============================================================================
*sourcemod-GetEventName*


Syntax:
	GetEventName(Handle:event, String:name[], maxlength);
Usage:
    event               Handle to the event.
    value               Buffer to store the name of the event.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the name of a game event.
Return:
    No return.
==============================================================================
*sourcemod-GetEventString*


Syntax:
	GetEventString(Handle:event, const String:key[], String:value[], maxlength);
Usage:
    event               Handle to the event.
    key                 Name of event key.
    value               Buffer to store the value of the specified event key.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the string value of a game event's key.
Return:
    No return.
==============================================================================
*sourcemod-GetExcludeMapList*


Syntax:
	GetExcludeMapList(Handle:array);
Usage:
    array               An ADT array handle to add the map strings to. Needs to be
Notes:
    Gets the current list of excluded maps.
Return:
    No return.
==============================================================================
*sourcemod-GetExtensionFileStatus*


Syntax:
	GetExtensionFileStatus(const String:name[], String:error[]='', maxlength=0);
Usage:
    name                Extension name (like 'sdktools.ext').
    error               Optional error message buffer.
    maxlength           Length of optional error message buffer.
Notes:
    Returns the status of an extension, by filename.
Return:
    -2 if the extension was not found. -1 if the extension was found but failed to load. 
    0 if the extension loaded but reported an error. 1 if the extension is running without 
    error.
==============================================================================
*sourcemod-GetFileTime*


Syntax:
	GetFileTime(const String:file[], FileTimeMode:tmode);
Usage:
    file                File name.
    tmode               Time mode.
Notes:
    Returns a file timestamp as a unix timestamp.
Return:
    Time value, or -1 on failure.
==============================================================================
*sourcemod-GetForwardFunctionCount*


Syntax:
	GetForwardFunctionCount(Handle:fwd);
Usage:
    fwd                 Handle to global or private forward.
Notes:
    Returns the number of functions in a global or private forward's call list.
Return:
    Number of functions in forward.
==============================================================================
*sourcemod-GetFunctionByName*


Syntax:
	GetFunctionByName(Handle:plugin, const String:name[]);
Usage:
    plugin              Handle of the plugin that contains the function.
    name                Name of the function.
Notes:
    Gets a function id from a function name.
Return:
    Function id or INVALID_FUNCTION if not found.
==============================================================================
*sourcemod-GetGameDescription*


Syntax:
	GetGameDescription(String:buffer[], maxlength, bool:original=false);
Usage:
    buffer              Buffer to store the description.
    maxlength           Maximum size of the buffer.
    original            If true, retrieves the original game description, ignoring any potential hooks from plugins.
Notes:
    Returns the game description from the mod.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
==============================================================================
*sourcemod-GetGameFolderName*


Syntax:
	GetGameFolderName(String:buffer[], maxlength);
Usage:
    buffer		Buffer to store the directory name.
    maxlength		Maximum size of the buffer.
Notes:
    Returns the name of the game's directory.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
    
==============================================================================
*sourcemod-GetGameTime*


Syntax:
	GetGameTime();
Usage:
Notes:
    Returns the game time based on the game tick.
Return:
    Game tick time.
==============================================================================
*sourcemod-GetLanguageCount*


Syntax:
	GetLanguageCount();
Usage:
Notes:
    Returns the number of languages known in languages.cfg.
Return:
    Language count.
==============================================================================
*sourcemod-GetLanguageInfo*


Syntax:
	GetLanguageInfo(language, String:code[]='', codeLen=0, String:name[]='', nameLen=0);
Usage:
    language            Language number.
    code                Language code buffer (2-3 characters usually).
    codeLen             Maximum length of the language code buffer.
    name                Language name buffer.
    nameLen             Maximum length of the language name buffer.
Notes:
    Retrieves info about a given language number.
Return:
    No return.
==============================================================================
*sourcemod-GetMapHistory*


Syntax:
	GetMapHistory(item, String:map[], mapLen, String:reason[], reasonLen, &startTime);
Usage:
    item                Item number. Must be 0 or greater and less than GetMapHistorySize().
    map                 Buffer to store the map name.
    mapLen              Length of map buffer.
    reason              Buffer to store the change reason.
    reasonLen           Length of the reason buffer.
    startTime           Time the map started.
Notes:
    Retrieves a map from the map history list.
Return:
    No return.
==============================================================================
*sourcemod-GetMapHistorySize*


Syntax:
	GetMapHistorySize();
Usage:
Notes:
    Gets the current number of maps in the map history
Return:
    Number of maps.
==============================================================================
*sourcemod-GetMapTimeLeft*


Syntax:
	GetMapTimeLeft(&timeleft);
Usage:
    timeleft            Variable to store the time, in seconds.  If the value is less than 0, the time limit is infinite.
Notes:
    Returns an estimate of the time left before the map ends.  If the server has not 
    processed any frames yet (i.e. no players have joined the map yet), then the time 
    left returned will always be infinite.
Return:
    True if the operation is supported, false otherwise.
==============================================================================
*sourcemod-GetMapTimeLimit*


Syntax:
	GetMapTimeLimit(&time);
Usage:
    time                Set to the number of total seconds in the map time limit, or 0 if there is no time limit set.
Notes:
    Retrieves the current map time limit.  If the server has not processed any frames 
    yet (i.e. no players have joined the map yet), then the time limit returned will 
    always be 0.
Return:
    True on success, false if operation is not supported.
==============================================================================
*sourcemod-GetMaxClients*


Syntax:
	GetMaxClients();
Usage:
Notes:
    This function will be deprecated in a future release.  Use the MaxClients variable 
    instead. Returns the maximum number of clients allowed on the server.  This may 
    return 0 if called before OnMapStart(), and thus should not be called in OnPluginStart(). 
    You should not globally cache the value to GetMaxClients() because it can change 
    from SourceTV or TF2's arena mode.  Use the 'MaxClients' dynamic variable documented 
    at the top of this file.
Return:
    Maximum number of clients allowed.
==============================================================================
*sourcemod-GetMaxEntities*


Syntax:
	GetMaxEntities();
Usage:
Notes:
    Returns the maximum number of entities.
Return:
    Maximum number of entities.
==============================================================================
*sourcemod-GetMaxPageItems*


Syntax:
	GetMaxPageItems(Handle:hStyle=INVALID_HANDLE);
Usage:
    hStyle              MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Returns a style's maximum items per page.
Return:
    Maximum items per page.
==============================================================================
*sourcemod-GetMenuExitBackButton*


Syntax:
	GetMenuExitBackButton(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Returns whether or not the menu has an 'exit back' button.  By default, menus do 
    not have an exit back button. Exit Back buttons appear as 'Back' on page 1 of paginated 
    menus and have functionality defined by the user in MenuEnd_ExitBack.
Return:
    True if the menu has an exit back button; false otherwise.
==============================================================================
*sourcemod-GetMenuExitButton*


Syntax:
	GetMenuExitButton(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Returns whether or not the menu has an exit button. By default, menus have an exit 
    button.
Return:
    True if the menu has an exit button; false otherwise.
==============================================================================
*sourcemod-GetMenuItem*


Syntax:
	GetMenuItem(Handle:menu, position, String:infoBuf[], infoBufLen, &style=0, String:dispBuf[]='', dispBufLen=0);
Usage:
    menu                Menu Handle.
    position            Position, starting from 0.
    infoBuf             Info buffer.
    infoBufLen          Maximum length of the info buffer.
    style               By-reference variable to store drawing flags.
    dispBuf             Display buffer.
    dispBufLen          Maximum length of the display buffer.
Notes:
    Retrieves information about a menu item.
Return:
    True on success, false if position is invalid.
==============================================================================
*sourcemod-GetMenuItemCount*


Syntax:
	GetMenuItemCount(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Returns the number of items in a menu.
Return:
    Number of items in the menu.
==============================================================================
*sourcemod-GetMenuOptionFlags*


Syntax:
	GetMenuOptionFlags(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Retrieves a menu's option flags.
Return:
    A bitstring of MENUFLAG bits.
==============================================================================
*sourcemod-GetMenuPagination*


Syntax:
	GetMenuPagination(Handle:menu);
Usage:
    menu                Handle to the menu.
Notes:
    Returns a menu's pagination setting.
Return:
    Pagination setting.
==============================================================================
*sourcemod-GetMenuSelectionPosition*


Syntax:
	GetMenuSelectionPosition();
Usage:
Notes:
    Returns the first item on the page of a currently selected menu. This is only valid 
    inside a MenuAction_Select callback.
Return:
    First item number on the page the client was viewing before selecting the item in 
    the callback.  This can be used to re-display the menu from the original position.
==============================================================================
*sourcemod-GetMenuStyle*


Syntax:
	GetMenuStyle(Handle:menu);
Usage:
    menu                Handle to the menu.
Notes:
    Returns a menu's MenuStyle Handle.  The Handle is global and cannot be freed.
Return:
    Handle to the menu's draw style.
==============================================================================
*sourcemod-GetMenuStyleHandle*


Syntax:
	GetMenuStyleHandle(MenuStyle:style);
Usage:
    style               Menu Style.
Notes:
    Returns a style's global Handle.
Return:
    A Handle, or INVALID_HANDLE if not found or unusable.
==============================================================================
*sourcemod-GetMenuTitle*


Syntax:
	GetMenuTitle(Handle:menu, String:buffer[], maxlength);
Usage:
    menu                Menu Handle.
    buffer              Buffer to store title.
    maxlength           Maximum length of the buffer.
Notes:
    Returns the text of a menu's title.
Return:
    Number of bytes written.
==============================================================================
*sourcemod-GetMenuVoteInfo*


Syntax:
	GetMenuVoteInfo(param2, &winningVotes, &totalVotes);
Usage:
    param2              Second parameter of MenuAction_VoteEnd.
    winningVotes        Number of votes received by the winning option.
    totalVotes          Number of total votes received.
Notes:
    Retrieves voting information from MenuAction_VoteEnd.
Return:
    No return.
==============================================================================
*sourcemod-GetMyHandle*


Syntax:
	GetMyHandle();
Usage:
Notes:
    Returns the calling plugin's Handle.
Return:
    Handle of the calling plugin.
==============================================================================
*sourcemod-GetNativeArray*


Syntax:
	GetNativeArray(param, any:local[], size);
Usage:
    param               Parameter number, starting from 1.
    local               Local array to copy into.
    size                Maximum size of local array.
Notes:
    Gets an array from a native parameter (always by reference).
Return:
    SP_ERROR_NONE on success, anything else on failure.
==============================================================================
*sourcemod-GetNativeCell*


Syntax:
	GetNativeCell(param);
Usage:
    param               Parameter number, starting from 1.
Notes:
    Gets a cell from a native parameter.
Return:
    Cell value at the parameter number.
==============================================================================
*sourcemod-GetNativeCellRef*


Syntax:
	GetNativeCellRef(param);
Usage:
    param               Parameter number, starting from 1.
Notes:
    Gets a cell from a native parameter, by reference.
Return:
    Cell value at the parameter number.
==============================================================================
*sourcemod-GetNativeString*


Syntax:
	GetNativeString(param, String:buffer[], maxlength, &bytes=0);
Usage:
    param               Parameter number, starting from 1.
    buffer              Buffer to store the string in.
    maxlength           Maximum length of the buffer.
    bytes               Optionally store the number of bytes written.
Notes:
    Retrieves a string from a native parameter.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
==============================================================================
*sourcemod-GetNativeStringLength*


Syntax:
	GetNativeStringLength(param, &length);
Usage:
    param               Parameter number, starting from 1.
    length              Stores the length of the string.
Notes:
    Retrieves the string length from a native parameter string.  This is useful fetching 
    the entire string using dynamic arrays.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
==============================================================================
*sourcemod-GetNextMap*


Syntax:
	GetNextMap(String:map[], maxlen);
Usage:
    map                 Buffer to store the nextmap name.
    maxlen              Maximum length of the map buffer.
Notes:
    Returns SourceMod's internal nextmap.
Return:
    True if a Map was found and copied, false if no nextmap is set (map will be unchanged).
==============================================================================
*sourcemod-GetNumStringTables*


Syntax:
	GetNumStringTables();
Usage:
Notes:
    Returns the number of string tables that currently exist.
Return:
    Number of string tables that currently exist.
==============================================================================
*sourcemod-GetPackPosition*


Syntax:
	GetPackPosition(Handle:pack);
Usage:
    pack                Handle to the data pack.
Notes:
    Returns the read or write position in a data pack.
Return:
    Numerical position in the data pack.
==============================================================================
*sourcemod-GetPanelCurrentKey*


Syntax:
	GetPanelCurrentKey(Handle:panel);
Usage:
    panel               A MenuPanel Handle.
Notes:
    Returns the current key position.
Return:
    Current key position starting at 1.
==============================================================================
*sourcemod-GetPanelStyle*


Syntax:
	GetPanelStyle(Handle:panel);
Usage:
    panel               A MenuPanel Handle.
Notes:
    Returns a MenuPanel's parent style.
Return:
    The MenuStyle Handle that created the panel.
==============================================================================
*sourcemod-GetPanelTextRemaining*


Syntax:
	GetPanelTextRemaining(Handle:panel);
Usage:
    panel               A MenuPanel Handle.
Notes:
    Returns the amount of text the menu can still hold.  If this is limit is reached 
    or overflowed, the text is silently truncated. Radio menus: Currently 511 characters 
    (512 bytes). Valve menus: Currently -1 (no meaning).
Return:
    Number of characters that the menu can still hold, or -1 if there is no known limit.
==============================================================================
*sourcemod-GetPlayerDecalFile*


Syntax:
	GetPlayerDecalFile(client, String:hex[], maxlength);
Usage:
    client              Player's index.
    hex                 Buffer to store the logo filename.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the decal file name associated to a given client.
Return:
    True on success, otherwise false.
==============================================================================
*sourcemod-GetPlayerWeaponSlot*


Syntax:
	GetPlayerWeaponSlot(client, slot);
Usage:
    client              Client index.
    slot                Slot index (mod specific).
Notes:
    Returns the weapon in a player's slot.
Return:
    Entity index on success, -1 if no weapon existed.
==============================================================================
*sourcemod-GetPluginFilename*


Syntax:
	GetPluginFilename(Handle:plugin, String:buffer[], maxlength);
Usage:
    plugin              Plugin Handle (INVALID_HANDLE uses the calling plugin).
    buffer              Buffer to the store the file name.
    maxlength           Maximum length of the name buffer.
Notes:
    Retrieves a plugin's file name relative to the plugins folder.
Return:
    No return.
==============================================================================
*sourcemod-GetPluginInfo*


Syntax:
	GetPluginInfo(Handle:plugin, PluginInfo:info, String:buffer[], maxlength);
Usage:
    plugin              Plugin Handle (INVALID_HANDLE uses the calling plugin).
    info                Plugin info property to retrieve.
    buffer              Buffer to store info in.
    maxlength           Maximum length of buffer.
Notes:
    Retrieves a plugin's public info.
Return:
    True on success, false if property is not available.
==============================================================================
*sourcemod-GetPluginIterator*


Syntax:
	GetPluginIterator();
Usage:
Notes:
    Returns an iterator that can be used to search through plugins.
Return:
    Handle to iterate with.  Must be closed via CloseHandle().
==============================================================================
*sourcemod-GetPluginStatus*


Syntax:
	GetPluginStatus(Handle:plugin);
Usage:
    plugin              Plugin Handle (INVALID_HANDLE uses the calling plugin).
Notes:
    Returns a plugin's status.
Return:
    Status code for the plugin.
==============================================================================
*sourcemod-GetProfilerTime*


Syntax:
	GetProfilerTime(Handle:prof);
Usage:
    prof                Profiling object.
Notes:
    Returns the amount of high-precision time in seconds that passed during the profiler's 
    last start/stop cycle.
Return:
    Time elapsed in seconds.
==============================================================================
*sourcemod-GetRandomFloat*


Syntax:
	GetRandomFloat(Float:fMin=0.0, Float:fMax=1.0);
Usage:
    fMin                Minimum random bound.
    fMax                Maximum random bound.
Notes:
    Returns a random floating point number from the Half-Life 2 Random Stream.
Return:
    A random number between (inclusive) fMin and fMax.
==============================================================================
*sourcemod-GetRandomInt*


Syntax:
	GetRandomInt(nmin, nmax);
Usage:
    nmin                Minimum random bound.
    nmax                Maximum random bound.
Notes:
    Returns a random number from the Half-Life 2 Random Stream.
Return:
    A random number between (inclusive) nmin and nmax.
==============================================================================
*sourcemod-GetRegexSubString*


Syntax:
	GetRegexSubString(Handle:regex, str_id, String:buffer[], maxlen);
Usage:
    regex               The regex handle to extract data from.
    str_id              The index of the expression to get - starts at 0, and ends at substrings - 1.
    buffer              The buffer to set to the matching substring.
    maxLen              The maximum string length of the buffer.
Notes:
    Returns a matched substring from a regex handle. Substring ids start at 0 and end 
    at substrings-1, where substrings is the number returned by MatchRegex
Return:
    True if a substring was found, False on fail/error
==============================================================================
*sourcemod-GetServerLanguage*


Syntax:
	GetServerLanguage();
Usage:
Notes:
    Retrieves the server's language.
Return:
    Language number server is using.
==============================================================================
*sourcemod-GetServerNetStats*


Syntax:
	GetServerNetStats(&Float:in, &Float:out);
Usage:
    in                  Buffer to store the input traffic velocity.
    out                 Buffer to store the output traffic velocity.
Notes:
    Returns the average server network traffic in bytes/sec.
Return:
    No return.
==============================================================================
*sourcemod-GetStringTableData*


Syntax:
	GetStringTableData(tableidx, stringIdx, String:userdata[], maxlength);
Usage:
    tableidx            A string table index.
    stringidx           A string index.
    userdata            Buffer to store the user data. This will be set to '' if there is no user data.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the user data associated with a given string index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
==============================================================================
*sourcemod-GetStringTableDataLength*


Syntax:
	GetStringTableDataLength(tableidx, stringidx);
Usage:
    tableidx            A string table index.
    stringidx           A string index.
Notes:
    Returns the length of the user data associated with a given string index.
Return:
    Length of user data. This will be 0 if there is no user data.
==============================================================================
*sourcemod-GetStringTableMaxStrings*


Syntax:
	GetStringTableMaxStrings(tableidx);
Usage:
    tableidx            A string table index.
Notes:
    Returns the maximum number of strings that are allowed in a given string table.
Return:
    Maximum number of strings allowed.
==============================================================================
*sourcemod-GetStringTableName*


Syntax:
	GetStringTableName(tableidx, String:name[], maxlength);
Usage:
    tableidx            A string table index.
    name                Buffer to store the name of the string table.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the name of a string table.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
==============================================================================
*sourcemod-GetStringTableNumStrings*


Syntax:
	GetStringTableNumStrings(tableidx);
Usage:
    tableidx            A string table index.
Notes:
    Returns the number of strings that currently exist in a given string table.
Return:
    Number of strings that currently exist.
==============================================================================
*sourcemod-GetSysTickCount*


Syntax:
	GetSysTickCount();
Usage:
Notes:
    Returns the operating system's 'tick count,' which is a number of milliseconds since 
    the operating system loaded.  This can be used for basic benchmarks.
Return:
    Tick count in milliseconds.
==============================================================================
*sourcemod-GetTeamClientCount*


Syntax:
	GetTeamClientCount(index);
Usage:
    index               Team index.
Notes:
    Retrieves the number of players in a certain team. Note: This native should not be 
    called before OnMapStart.
Return:
    Number of players in the team.
==============================================================================
*sourcemod-GetTeamCount*


Syntax:
	GetTeamCount();
Usage:
Notes:
    Returns the total number of teams in a game. Note: This native should not be called 
    before OnMapStart.
Return:
    Total number of teams.
==============================================================================
*sourcemod-GetTeamName*


Syntax:
	GetTeamName(index, String:name[], maxlength);
Usage:
    index               Team index.
    name                Buffer to store string in.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the team name based on a team index. Note: This native should not be called 
    before OnMapStart.
Return:
    No return.
==============================================================================
*sourcemod-GetTeamScore*


Syntax:
	GetTeamScore(index);
Usage:
    index               Team index.
Notes:
    Returns the score of a team based on a team index. Note: This native should not be 
    called before OnMapStart.
Return:
    Score.
==============================================================================
*sourcemod-GetTickedTime*


Syntax:
	GetTickedTime();
Usage:
Notes:
    Returns the simulated game time. This time is internally maintained by SourceMod 
    and is based on the game tick count and tick rate.  Unlike GetGameTime(), it will 
    increment past map changes and while no players are connected.  Unlike GetEngineTime(), 
    it will not increment based on the system clock (i.e. it is still bound to the ticking 
    process).
Return:
    Time based on the game tick count.
==============================================================================
*sourcemod-GetTickInterval*


Syntax:
	GetTickInterval();
Usage:
Notes:
    Returns the number of seconds in between game server ticks. Note: A tick, in this 
    context, is a frame.
Return:
    Number of seconds in between ticks.
==============================================================================
*sourcemod-GetTime*


Syntax:
	GetTime(bigStamp[2]={0,0});
Usage:
    bigStamp            Optional array to store the 64bit timestamp in.
Notes:
    Gets the system time as a unix timestamp.
Return:
    32bit timestamp (number of seconds since unix epoch).
==============================================================================
*sourcemod-GetTopMenuInfoString*


Syntax:
	GetTopMenuInfoString(Handle:topmenu, TopMenuObject:parent, String:buffer[], maxlength);
Usage:
    topmenu             TopMenu Handle.
    object              TopMenuObject ID.
    buffer              Buffer to store info string.
    maxlength           Maximum size of info string.
Notes:
    Retrieves the info string of a top menu item.
Return:
    Number of bytes written, not including the null terminator.
==============================================================================
*sourcemod-GetTopMenuObjName*


Syntax:
	GetTopMenuObjName(Handle:topmenu, TopMenuObject:object, String:buffer[], maxlength);
Usage:
    topmenu             TopMenu Handle.
    object              TopMenuObject ID.
    buffer              Buffer to store info string.
    maxlength           Maximum size of info string.
Notes:
    Retrieves the name string of a top menu item.
Return:
    Number of bytes written, not including the null terminator.
==============================================================================
*sourcemod-GetTrieArray*


Syntax:
	GetTrieArray(Handle:trie, const String:key[], any:array[], max_size, &size=0);
Usage:
    trie                Trie Handle.
    key                 Key string.
    array               Buffer to store array.
    max_size            Maximum size of array buffer.
    size                Optional parameter to store the number of elements written to the buffer.
Notes:
    Retrieves an array in a Trie.
Return:
    True on success.  False if the key is not set, or the key is set as a value or string 
    (not an array).
==============================================================================
*sourcemod-GetTrieSize*


Syntax:
	GetTrieSize(Handle:trie);
Usage:
    trie                Trie Handle.
Notes:
    Retrieves the number of elements in a trie. Note that trie items are not enumerable/iteratable. 
     If you need to retrieve the elements in a trie, store its keys in an ADT Array.
Return:
    Number of elements in the trie.
==============================================================================
*sourcemod-GetTrieString*


Syntax:
	GetTrieString(Handle:trie, const String:key[], String:value[], max_size, &size=0);
Usage:
    trie                Trie Handle.
    key                 Key string.
    value               Buffer to store value.
    max_size            Maximum size of string buffer.
    size                Optional parameter to store the number of bytes written to the buffer.
Notes:
    Retrieves a string in a Trie.
Return:
    True on success.  False if the key is not set, or the key is set as a value or array 
    (not a string).
==============================================================================
*sourcemod-GetTrieValue*


Syntax:
	GetTrieValue(Handle:trie, const String:key[], &any:value);
Usage:
    trie                Trie Handle.
    key                 Key string.
    val                 Variable to store value.
Notes:
    Retrieves a value in a Trie.
Return:
    True on success.  False if the key is not set, or the key is set as an array or string 
    (not a value).
==============================================================================
*sourcemod-GetUserAdmin*


Syntax:
	GetUserAdmin(client);
Usage:
    client              Player's index.
Notes:
    Retrieves a client's AdminId.
Return:
    AdminId of the client, or INVALID_ADMIN_ID if none.
==============================================================================
*sourcemod-GetUserFlagBits*


Syntax:
	GetUserFlagBits(client);
Usage:
    client              Player's index.
Notes:
    Returns client access flags.  If the client is not an admin, the result is always 
    0.
Return:
    Flags
==============================================================================
*sourcemod-GetUserMessageId*


Syntax:
	GetUserMessageId(const String:msg[]);
Usage:
    msg                 String containing message name (case sensitive).
Notes:
    Returns the ID of a given message, or -1 on failure.
Return:
    A message index, or INVALID_MESSAGE_ID on failure.
==============================================================================
*sourcemod-GetUserMessageName*


Syntax:
	GetUserMessageName(UserMsg:msg_id, String:msg[], maxlength);
Usage:
    msg_id              Message index.
    msg                 Buffer to store the name of the message.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the name of a message by ID.
Return:
    True if message index is valid, false otherwise.
==============================================================================
*sourcemod-GetVectorAngles*


Syntax:
	GetVectorAngles(const Float:vec[3], Float:angle[3]);
Usage:
    vec                 Vector.
    angle               Angle buffer.
Notes:
    Returns angles from a vector.
Return:
    No return.
==============================================================================
*sourcemod-GetVectorCrossProduct*


Syntax:
	GetVectorCrossProduct(const Float:vec1[3], const Float:vec2[3], Float:result[3]);
Usage:
    vec1                First vector.
    vec2                Second vector.
    result              Resultant vector.
Notes:
    Computes the cross product of two vectors.  Any input array can be the same as the 
    output array.
Return:
    No return.
==============================================================================
*sourcemod-GetVectorDistance*


Syntax:
	GetVectorDistance(const Float:vec1[3], const Float:vec2[3], bool:squared=false);
Usage:
    vec1                First vector.
    vec2                Second vector.
    squared             If true, the result will be squared (for optimization).
Notes:
    Calculates the distance between two vectors.
Return:
    Vector distance.
==============================================================================
*sourcemod-GetVectorDotProduct*


Syntax:
	GetVectorDotProduct(const Float:vec1[3], const Float:vec2[3]);
Usage:
    vec1                First vector.
    vec2                Second vector.
Notes:
    Calculates the dot product of two vectors.
Return:
    Dot product of the two vectors.
==============================================================================
*sourcemod-GetVectorLength*


Syntax:
	GetVectorLength(const Float:vec[3], bool:squared=false);
Usage:
    vec                 Vector.
    squared             If true, the result will be squared (for optimization).
Notes:
    Calculates a vector's length.
Return:
    Vector length (magnitude).
==============================================================================
*sourcemod-GetVectorVectors*


Syntax:
	GetVectorVectors(const Float:vec[3], Float:right[3], Float:up[3]);
Usage:
    vec                 Vector.
    right               Right vector buffer or NULL_VECTOR.
    up                  Up vector buffer or NULL_VECTOR.
Notes:
    Returns direction vectors from a vector.
Return:
    No return.
==============================================================================
*sourcemod-GivePlayerItem*


Syntax:
	GivePlayerItem(client, const String:item[], iSubType=0);
Usage:
    client              Client index.
    item                Item classname (such as weapon_ak47).
    iSubType            Unknown.
Notes:
    Gives a named item to a player.
Return:
    Entity index on success, or -1 on failure.
==============================================================================
*sourcemod-GuessSDKVersion*


Syntax:
	GuessSDKVersion();
Usage:
Notes:
    Guesses the SDK version a mod was compiled against.  If nothing specific is known 
    about the game, the engine version is used instead. The return values are guaranteed 
    to increase chronologically (that is, a later release will have a higher value).
Return:
    SOURCE_SDK version code.
==============================================================================
*sourcemod-HasEndOfMapVoteFinished*


Syntax:
	HasEndOfMapVoteFinished();
Usage:
Notes:
    Checks if MapChooser's end of map vote has completed.
Return:
    True if complete, false otherwise.
==============================================================================
*sourcemod-HookConVarChange*


Syntax:
	HookConVarChange(Handle:convar, ConVarChanged:callback);
Usage:
    convar              Handle to the convar.
    callback            An OnConVarChanged function pointer.
Notes:
    Creates a hook for when a console variable's value is changed.
Return:
    No return.
==============================================================================
*sourcemod-HookEntityOutput*


Syntax:
	HookEntityOutput(const String:classname[], const String:output[], EntityOutput:callback);
Usage:
    classname           The classname to hook.
    output              The output name to hook.
    callback            An EntityOutput function pointer.
Notes:
    Add an entity output hook on a entity classname
Return:
    No return.
==============================================================================
*sourcemod-HookEvent*


Syntax:
	HookEvent(const String:name[], EventHook:callback, EventHookMode:mode=EventHookMode_Post);
Usage:
    name                Name of event.
    callback            An EventHook function pointer.
    mode                Optional EventHookMode determining the type of hook.
Notes:
    Creates a hook for when a game event is fired.
Return:
    No return.
==============================================================================
*sourcemod-HookEventEx*


Syntax:
	HookEventEx(const String:name[], EventHook:callback, EventHookMode:mode=EventHookMode_Post);
Usage:
    name                Name of event.
    callback            An EventHook function pointer.
    mode                Optional EventHookMode determining the type of hook.
Notes:
    Creates a hook for when a game event is fired.
Return:
    True if event exists and was hooked successfully, false otherwise.
==============================================================================
*sourcemod-HookSingleEntityOutput*


Syntax:
	HookSingleEntityOutput(entity, const String:output[], EntityOutput:callback, bool:once=false);
Usage:
    entity              The entity on which to add a hook.
    output              The output name to hook.
    callback            An EntityOutput function pointer.
    once                Only fire this hook once and then remove itself.
Notes:
    Add an entity output hook on a single entity instance
Return:
    No return.
==============================================================================
*sourcemod-HookUserMessage*


Syntax:
	HookUserMessage(UserMsg:msg_id, MsgHook:hook, bool:intercept=false, MsgPostHook:post=MsgPostHook:-1);
Usage:
    msg_id              Message index.
    hook                Function to use as a hook.
    intercept           If intercept is true, message will be fully intercepted, allowing the user to block the message.  Otherwise, the hook is normal and ignores the return value.
    notify              Notification function.
Notes:
    Hooks a user message.
Return:
    No return.
==============================================================================
*sourcemod-IgniteEntity*


Syntax:
	IgniteEntity(entity, Float:time, bool:npc=false, Float:size=0.0, bool:level=false);
Usage:
    entity              Entity index.
    time                Number of seconds to set on fire.
    npc                 True to only affect NPCs.
    size                Unknown.
    level               Unknown.
Notes:
    Ignites an entity on fire.
Return:
    No return.
==============================================================================
*sourcemod-ImplodeStrings*


Syntax:
	ImplodeStrings(const String:strings[][], numStrings, const String:join[], String:buffer[], maxLength);
Usage:
    strings             An array of strings.
    numStrings          Number of strings in the array.
    join                The join string to insert between each string.
    buffer              Output buffer to write the joined string to.
    maxLength           Maximum length of the output buffer.
Notes:
    Joins an array of strings into one string, with a 'join' string inserted in between 
    each given string.  This function complements ExplodeString.
Return:
    Number of bytes written to the output buffer.
==============================================================================
*sourcemod-InitiateMapChooserVote*


Syntax:
	InitiateMapChooserVote(MapChange:when, Handle:inputarray=INVALID_HANDLE);
Usage:
    when                MapChange consant of when the resulting mapchange should occur.
    inputarray          ADT array list of maps to add to the vote.
Notes:
    Initiates a MapChooser map vote Note: If no input array is specified mapchooser will 
    use its internal list. This includes any nominations and excluded maps (as per mapchoosers 
    convars).
Return:
    
==============================================================================
*sourcemod-InsertMenuItem*


Syntax:
	InsertMenuItem(Handle:menu, position, const String:info[], const String:display[], style=ITEMDRAW_DEFAULT);
Usage:
    menu                Menu Handle.
    position            Position, starting from 0.
    info                Item information string.
    display             Default item display string.
    style               Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.
Notes:
    Inserts an item into the menu before a certain position; the new item will be at 
    the given position and all next items pushed forward.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-InsertServerCommand*


Syntax:
	InsertServerCommand(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Inserts a server command at the beginning of the server command buffer.
Return:
    No return.
==============================================================================
*sourcemod-InternalShowMenu*


Syntax:
	InternalShowMenu(client, const String:str[], time, keys=-1, MenuHandler:handler=MenuHandler:-1);
Usage:
    client              Client index.
    str                 Full menu string as would be passed over the network.
    time                Time to hold the menu for.
    keys                Selectable key bitstring.
    handler             Optional handler function, with the same rules as SendPanelToClient().
Notes:
    This function is provided for legacy code only.  Some older plugins may use network 
    messages instead of the panel API.  This function wraps the panel API for eased 
    portability into the SourceMod menu system. This function is only usable with the 
    Radio Menu style.  You do not need to split up your menu into multiple packets; 
    SourceMod will break the string up internally.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-IntToString*


Syntax:
	IntToString(num, String:str[], maxlength);
Usage:
    num                 Integer to convert.
    str                 Buffer to store string in.
    maxlength           Maximum length of string buffer.
Notes:
    Converts an integer to a string.
Return:
    Number of cells written to buffer.
==============================================================================
*sourcemod-IsCharAlpha*


Syntax:
	IsCharAlpha(chr);
Usage:
    char                Character to test.
Notes:
    Returns whether a character is an ASCII alphabet character.
Return:
    True if character is alphabetical, otherwise false.
==============================================================================
*sourcemod-IsCharLower*


Syntax:
	IsCharLower(chr);
Usage:
    char                Character to test.
Notes:
    Returns whether an alphabetic character is lowercase.
Return:
    True if character is lowercase, otherwise false.
==============================================================================
*sourcemod-IsCharMB*


Syntax:
	IsCharMB(chr);
Usage:
    char                Character to test.
Notes:
    Returns if a character is multi-byte or not.
Return:
    0 for a normal 7-bit ASCII character, otherwise number of bytes in multi-byte character.
==============================================================================
*sourcemod-IsCharNumeric*


Syntax:
	IsCharNumeric(chr);
Usage:
    char                Character to test.
Notes:
    Returns whether a character is numeric.
Return:
    True if character is numeric, otherwise false.
==============================================================================
*sourcemod-IsCharSpace*


Syntax:
	IsCharSpace(chr);
Usage:
    char                Character to test.
Notes:
    Returns whether a character is whitespace.
Return:
    True if character is whitespace, otherwise false.
==============================================================================
*sourcemod-IsCharUpper*


Syntax:
	IsCharUpper(chr);
Usage:
    char                Character to test.
Notes:
    Returns whether an alphabetic character is uppercase.
Return:
    True if character is uppercase, otherwise false.
==============================================================================
*sourcemod-IsChatTrigger*


Syntax:
	IsChatTrigger();
Usage:
Notes:
    Returns whether the current say hook is a chat trigger. This function is only meaningful 
    inside say or say_team hooks.
Return:
    True if a chat trigger, false otherwise.
==============================================================================
*sourcemod-IsClientAuthorized*


Syntax:
	IsClientAuthorized(client);
Usage:
    client              Player index.
Notes:
    Returns if a certain player has been authenticated.
Return:
    True if player has been authenticated, false otherwise.
==============================================================================
*sourcemod-IsClientConnected*


Syntax:
	IsClientConnected(client);
Usage:
    client              Player index.
Notes:
    Returns if a certain player is connected.
Return:
    True if player is connected to the server, false otherwise.
==============================================================================
*sourcemod-IsClientInGame*


Syntax:
	IsClientInGame(client);
Usage:
    client              Player index (index does not have to be connected).
Notes:
    Returns if a certain player has entered the game.
Return:
    True if player has entered the game, false otherwise.
==============================================================================
*sourcemod-IsClientInKickQueue*


Syntax:
	IsClientInKickQueue(client);
Usage:
    client              Player index (must be connected).
Notes:
    Returns if a client is in the 'kick queue' (i.e. the client will be kicked shortly 
    and thus they should not appear as valid).
Return:
    True if in the kick queue, false otherwise.
==============================================================================
*sourcemod-IsClientInVotePool*


Syntax:
	IsClientInVotePool(client);
Usage:
    client              Client index.
Notes:
    Returns whether a client is in the pool of clients allowed to participate in the 
    current vote.  This is determined by the client list passed to StartVote().
Return:
    True if client is allowed to vote, false otherwise.
==============================================================================
*sourcemod-IsClientObserver*


Syntax:
	IsClientObserver(client);
Usage:
    client              Player index.
Notes:
    Returns if a certain player is an observer/spectator.
Return:
    True if player is an obverser, false otherwise.
==============================================================================
*sourcemod-IsClientTimingOut*


Syntax:
	IsClientTimingOut(client);
Usage:
    client              Player's index.
Notes:
    Returns if a client is timing out
Return:
    True if client is timing out, false otherwise.
==============================================================================
*sourcemod-IsDecalPrecached*


Syntax:
	IsDecalPrecached(const String:decal[]);
Usage:
    decal               Name of the decal to check.
Notes:
    Returns if a given decal is precached.
Return:
    True if precached, false otherwise.
==============================================================================
*sourcemod-IsDedicatedServer*


Syntax:
	IsDedicatedServer();
Usage:
Notes:
    Returns whether the server is dedicated.
Return:
    True if dedicated, false otherwise.
==============================================================================
*sourcemod-IsEndOfFile*


Syntax:
	IsEndOfFile(Handle:file);
Usage:
    file                Handle to the file.
Notes:
    Tests if the end of file has been reached.
Return:
    True if end of file has been reached, false otherwise.
==============================================================================
*sourcemod-IsEntNetworkable*


Syntax:
	IsEntNetworkable(edict);
Usage:
    edict               Index of the edict.
Notes:
    Returns whether or not an entity is a valid networkable edict.
Return:
    True if networkable, false if invalid or not networkable.
==============================================================================
*sourcemod-IsFakeClient*


Syntax:
	IsFakeClient(client);
Usage:
    client              Player index.
Notes:
    Returns if a certain player is a fake client.
Return:
    True if player is a fake client, false otherwise.
==============================================================================
*sourcemod-IsGenericPrecached*


Syntax:
	IsGenericPrecached(const String:generic[]);
Usage:
    decal               Name of the generic file to check.
Notes:
    Returns if a given generic file is precached.
Return:
    True if precached, false otherwise.
==============================================================================
*sourcemod-IsMapValid*


Syntax:
	IsMapValid(const String:map[]);
Usage:
    map                 Map name, excluding .bsp extension.
Notes:
    Returns whether a map is valid or not.
Return:
    True if valid, false otherwise.
==============================================================================
*sourcemod-IsModelPrecached*


Syntax:
	IsModelPrecached(const String:model[]);
Usage:
    model               Name of the model to check.
Notes:
    Returns if a given model is precached.
Return:
    True if precached, false otherwise.
==============================================================================
*sourcemod-IsNewVoteAllowed*


Syntax:
	IsNewVoteAllowed();
Usage:
Notes:
    Quick stock to determine whether voting is allowed.  This doesn't let you fine-tune 
    a reason for not voting, so it's not recommended for lazily telling clients that 
    voting isn't allowed.
Return:
    True if voting is allowed, false if voting is in progress or the cooldown is active.
==============================================================================
*sourcemod-IsPackReadable*


Syntax:
	IsPackReadable(Handle:pack, bytes);
Usage:
    pack                Handle to the data pack.
    bytes               Number of bytes to simulate reading.
Notes:
    Returns whether or not a specified number of bytes from the data pack position to 
    the end can be read.
Return:
    True if can be read, false otherwise.
==============================================================================
*sourcemod-IsPlayerAlive*


Syntax:
	IsPlayerAlive(client);
Usage:
    client              Player's index.
Notes:
    Returns if the client is alive or dead. Note: This function was originally in SDKTools 
    and was moved to core.
Return:
    True if the client is alive, false otherwise.
==============================================================================
*sourcemod-IsPluginDebugging*


Syntax:
	IsPluginDebugging(Handle:hndl);
Usage:
    plugin              Plugin Handle (INVALID_HANDLE uses the calling plugin).
Notes:
    Retrieves whether or not a plugin is being debugged.
Return:
    True if being debugged, false otherwise.
==============================================================================
*sourcemod-IsServerProcessing*


Syntax:
	IsServerProcessing();
Usage:
Notes:
    Returns whether or not the server is processing frames or not. The server does not 
    process frames until at least one client joins the game. Once the first player has 
    in, even if that player, leaves, the server's timers and entities will work.
Return:
    True if the server is ticking, false otherwise.
==============================================================================
*sourcemod-IsSoundPrecached*


Syntax:
	IsSoundPrecached(const String:sound[]);
Usage:
    sound               Name of the sound to check.
Notes:
    Returns if a given sound is precached.
Return:
    True if precached, false otherwise.
==============================================================================
*sourcemod-IsStackEmpty*


Syntax:
	IsStackEmpty(Handle:stack);
Usage:
    stack               Stack Handle.
Notes:
    Checks if a stack is empty.
Return:
    True if empty, false if not empty.
==============================================================================
*sourcemod-IsValidConVarChar*


Syntax:
	IsValidConVarChar(c);
Usage:
    c                   Character to validate.
Notes:
    Returns true if the supplied character is valid in a ConVar name.
Return:
    True is valid for ConVars, false otherwise
==============================================================================
*sourcemod-IsValidEdict*


Syntax:
	IsValidEdict(edict);
Usage:
    edict               Index of the edict.
Notes:
    Returns whether or not an edict index is valid.
Return:
    True if valid, false otherwise.
==============================================================================
*sourcemod-IsValidEntity*


Syntax:
	IsValidEntity(edict);
Usage:
    edict               Index of the entity/edict.
Notes:
    Returns whether or not an entity is valid.  Returns false if there is no matching 
    CBaseEntity for this edict index.
Return:
    True if valid, false otherwise.
==============================================================================
*sourcemod-IsVoteInProgress*


Syntax:
	IsVoteInProgress(Handle:menu=INVALID_HANDLE);
Usage:
    menu                Deprecated; no longer used.
Notes:
    Returns whether a vote is in progress.
Return:
    True if a vote is in progress, false otherwise.
==============================================================================
*sourcemod-KeyValuesToFile*


Syntax:
	KeyValuesToFile(Handle:kv, const String:file[]);
Usage:
    kv                  KeyValues Handle.
    file                File to dump write to.
Notes:
    Converts a KeyValues tree to a file.  The tree is dumped from the current position.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-KickClient*


Syntax:
	KickClient(client, const String:format[]='', any:...);
Usage:
    client              Client index.
    format              Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine.
    ...                 Variable number of format parameters.
Notes:
    Disconnects a client from the server as soon as the next frame starts. Note: Originally, 
    KickClient() was immediate.  The delay was introduced because despite warnings, 
    plugins were using it in ways that would crash. The new safe version can break cases 
    that rely on immediate disconnects, but ensures that plugins do not accidentally 
    cause crashes. If you need immediate disconnects, use KickClientEx(). Note: IsClientInKickQueue() 
    will return true before the kick occurs.
Return:
    No return.
==============================================================================
*sourcemod-KickClientEx*


Syntax:
	KickClientEx(client, const String:format[]='', any:...);
Usage:
    client              Client index.
    format              Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine.
    ...                 Variable number of format parameters.
Notes:
    Immediately disconnects a client from the server. Kicking clients from certain events 
    or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer 
    to kick the client in the next available frame.
Return:
    No return.
==============================================================================
*sourcemod-KillTimer*


Syntax:
	KillTimer(Handle:timer, bool:autoClose=false);
Usage:
    autoClose           If autoClose is true, the data that was passed to CreateTimer() will be closed as a handle if TIMER_DATA_HNDL_CLOSE was not specified.
Notes:
    Kills a timer.  Use this instead of CloseHandle() if you need more options.
Return:
    No return.
==============================================================================
*sourcemod-KvCopySubkeys*


Syntax:
	KvCopySubkeys(Handle:origin, Handle:dest);
Usage:
    origin              Origin KeyValues Handle.
    dest                Destination KeyValues Handlee.
Notes:
    Makes a new copy of all subkeys in the origin KeyValues to the destination KeyValues. 
    NOTE: All KeyValues are processed from the current location not the root one.
Return:
    No return.
==============================================================================
*sourcemod-KvDeleteKey*


Syntax:
	KvDeleteKey(Handle:kv, const String:key[]);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key.
Notes:
    Removes the given key from the current position.
Return:
    True on success, false if key did not exist.
==============================================================================
*sourcemod-KvDeleteThis*


Syntax:
	KvDeleteThis(Handle:kv);
Usage:
    kv                  KeyValues Handle.
Notes:
    Removes the current sub-key and attempts to set the position to the sub-key after 
    the removed one.  If no such sub-key exists, the position will be the parent key 
    in the traversal stack. Given the sub-key having position 'N' in the traversal stack, 
    the removal will always take place from position 'N-1.'
Return:
    1 if removal succeeded and there was another key. 0 if the current node was not contained 
    in the previous node, or no previous node exists. -1 if removal succeeded and there 
    were no more keys, thus the state is as if KvGoBack() was called.
==============================================================================
*sourcemod-KvFindKeyById*


Syntax:
	KvFindKeyById(Handle:kv, id, String:name[], maxlength);
Usage:
    kv                  KeyValues Handle.
    id                  KeyValues id.
    name                Buffer to store the name.
    maxlength           Maximum length of the value buffer.
Notes:
    Finds a KeyValues name by id.
Return:
    True on success, false if id not found.
==============================================================================
*sourcemod-KvGetColor*


Syntax:
	KvGetColor(Handle:kv, const String:key[], &r, &g, &b, &a);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    r                   Red value, set by reference.
    g                   Green value, set by reference.
    b                   Blue value, set by reference.
    a                   Alpha value, set by reference.
Notes:
    Retrieves a set of color values from a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvGetDataType*


Syntax:
	KvGetDataType(Handle:kv, const String:key[]);
Usage:
    kv                  KeyValues Handle.
    key                 Key name.
Notes:
    Returns the data type at a key.
Return:
    KvDataType value of the key.
==============================================================================
*sourcemod-KvGetFloat*


Syntax:
	KvGetFloat(Handle:kv, const String:key[], Float:defvalue=0.0);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    defvalue            Optional default value to use if the key is not found.
Notes:
    Retrieves a floating point value from a KeyValues key.
Return:
    Floating point value of the key.
==============================================================================
*sourcemod-KvGetNameSymbol*


Syntax:
	KvGetNameSymbol(Handle:kv, const String:key[], &id);
Usage:
    kv                  KeyValues Handle.
    key                 Key name.
    id                  Id of the found KeyValue.
Notes:
    Finds a KeyValues id inside a KeyValues tree.
Return:
    True on success, false if key not found.
==============================================================================
*sourcemod-KvGetNum*


Syntax:
	KvGetNum(Handle:kv, const String:key[], defvalue=0);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    defvalue            Optional default value to use if the key is not found.
Notes:
    Retrieves an integer value from a KeyValues key.
Return:
    Integer value of the key.
==============================================================================
*sourcemod-KvGetSectionName*


Syntax:
	KvGetSectionName(Handle:kv, String:section[], maxlength);
Usage:
    kv                  KeyValues Handle.
    section             Buffer to store the section name.
    maxlength           Maximum length of the name buffer.
Notes:
    Retrieves the current section name.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-KvGetSectionSymbol*


Syntax:
	KvGetSectionSymbol(Handle:kv, &id);
Usage:
    kv                  KeyValues Handle.
    id                  Id of the current section.
Notes:
    Retrieves the current section id.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-KvGetString*


Syntax:
	KvGetString(Handle:kv, const String:key[], String:value[], maxlength, const String:defvalue[]='');
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               Buffer to store key value in.
    maxlength           Maximum length of the value buffer.
    defvalue            Optional default value to use if the key is not found.
Notes:
    Retrieves a string value from a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvGetUInt64*


Syntax:
	KvGetUInt64(Handle:kv, const String:key[], value[2], defvalue[2]={0,0});
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               Array to represent the large integer.
    defvalue            Optional default value to use if the key is not found.
Notes:
    Retrieves a large integer value from a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvGetVector*


Syntax:
	KvGetVector(Handle:kv, const String:key[], Float:vec[3], const Float:defvalue[3]={0.0,0.0,0.0});
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    vec                 Destination vector to store the value in.
    defvalue            Optional default value to use if the key is not found.
Notes:
    Retrieves a vector value from a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvGoBack*


Syntax:
	KvGoBack(Handle:kv);
Usage:
    kv                  KeyValues Handle.
Notes:
    Jumps back to the previous position.  Returns false if there are no previous positions 
    (i.e., at the root node).  This should be called once for each successful Jump call, 
    in order to return to the top node. This function pops one node off the internal 
    traversal stack.
Return:
    True on success, false if there is no higher node.
==============================================================================
*sourcemod-KvGotoFirstSubKey*


Syntax:
	KvGotoFirstSubKey(Handle:kv, bool:keyOnly=true);
Usage:
    kv                  KeyValues Handle.
    keyOnly             If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the first sub key. This native 
    adds to the internal traversal stack.
Return:
    True on success, false if there was no first sub key.
==============================================================================
*sourcemod-KvGotoNextKey*


Syntax:
	KvGotoNextKey(Handle:kv, bool:keyOnly=true);
Usage:
    kv                  KeyValues Handle.
    keyOnly             If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the next sub key. This native 
    does NOT add to the internal traversal stack, and thus KvGoBack() is not needed 
    for each successive call to this function.
Return:
    True on success, false if there was no next sub key.
==============================================================================
*sourcemod-KvJumpToKey*


Syntax:
	KvJumpToKey(Handle:kv, const String:key[], bool:create=false);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key.
    create              If true, and the key does not exist, it will be created.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not and was not created.
==============================================================================
*sourcemod-KvJumpToKeySymbol*


Syntax:
	KvJumpToKeySymbol(Handle:kv, id);
Usage:
    kv                  KeyValues Handle.
    id                  KeyValues id.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not.
==============================================================================
*sourcemod-KvNodesInStack*


Syntax:
	KvNodesInStack(Handle:kv);
Usage:
    kv                  KeyValues Handle.
Notes:
    Returns the position in the jump stack; I.e. the number of calls required for KvGoBack 
    to return to the root node.  If at the root node, 0 is returned.
Return:
    Number of non-root nodes in the jump stack.
==============================================================================
*sourcemod-KvRewind*


Syntax:
	KvRewind(Handle:kv);
Usage:
    kv                  KeyValues Handle.
Notes:
    Sets the position back to the top node, emptying the entire node traversal history. 
     This can be used instead of looping KvGoBack() if recursive iteration is not important.
Return:
    No return.
==============================================================================
*sourcemod-KvSavePosition*


Syntax:
	KvSavePosition(Handle:kv);
Usage:
    kv                  KeyValues Handle.
Notes:
    Saves the current position in the traversal stack onto the traversal stack.  This 
    can be useful if you wish to use KvGotoNextKey() and have the previous key saved 
    for backwards traversal.
Return:
    No return.
==============================================================================
*sourcemod-KvSetColor*


Syntax:
	KvSetColor(Handle:kv, const String:key[], r, g, b, a=0);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    r                   Red value.
    g                   Green value.
    b                   Blue value.
    a                   Alpha value.
Notes:
    Sets a set of color values of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvSetEscapeSequences*


Syntax:
	KvSetEscapeSequences(Handle:kv, bool:useEscapes);
Usage:
    kv                  KeyValues Handle.
    useEscapes          Whether or not to read escape sequences.
Notes:
    Sets whether or not the KeyValues parser will read escape sequences. For example, 
      would be read as a literal newline.  This defaults to false for new KeyValues 
    structures.
Return:
    No return.
==============================================================================
*sourcemod-KvSetFloat*


Syntax:
	KvSetFloat(Handle:kv, const String:key[], Float:value);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               Floating point value.
Notes:
    Sets a floating point value of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvSetNum*


Syntax:
	KvSetNum(Handle:kv, const String:key[], value);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               Value number.
Notes:
    Sets an integer value of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvSetSectionName*


Syntax:
	KvSetSectionName(Handle:kv, const String:section[]);
Usage:
    kv                  KeyValues Handle.
    section             Section name.
Notes:
    Sets the current section name.
Return:
    No return.
==============================================================================
*sourcemod-KvSetString*


Syntax:
	KvSetString(Handle:kv, const String:key[], const String:value[]);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               String value.
Notes:
    Sets a string value of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvSetUInt64*


Syntax:
	KvSetUInt64(Handle:kv, const String:key[], const value[2]);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    value               Large integer value (0=High bits, 1=Low bits)
Notes:
    Sets a large integer value of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-KvSetVector*


Syntax:
	KvSetVector(Handle:kv, const String:key[], const Float:vec[3]);
Usage:
    kv                  KeyValues Handle.
    key                 Name of the key, or NULL_STRING.
    vec                 Vector value.
Notes:
    Sets a vector value of a KeyValues key.
Return:
    No return.
==============================================================================
*sourcemod-LibraryExists*


Syntax:
	LibraryExists(const String:name[]);
Usage:
    name                Library name of a plugin or extension.
Notes:
    Returns whether a library exists.  This function should be considered expensive; 
    it should only be called on plugin to determine availability of resources.  Use 
    OnLibraryAdded()/OnLibraryRemoved() to detect changes in optional resources.
Return:
    True if exists, false otherwise.
==============================================================================
*sourcemod-LoadGameConfigFile*


Syntax:
	LoadGameConfigFile(const String:file[]);
Usage:
    file                File to load.  The path must be relative to the 'gamedata' folder under the config folder and the extension should be omitted.
Notes:
    Loads a game config file.
Return:
    A handle to the game config file or INVALID_HANDLE in failure.
==============================================================================
*sourcemod-LoadTopMenuConfig*


Syntax:
	LoadTopMenuConfig(Handle:topmenu, const String:file[], String:error[], maxlength);
Usage:
    topmenu             TopMenu Handle.
    file                File path.
    error               Error buffer.
    maxlength           Maximum size of the error buffer. Error buffer will be filled with a zero-terminated string if false is returned.
Notes:
    Re-sorts the items in a TopMenu via a configuration file. The format of the configuration 
    file should be a Valve Key-Values formatted file that SourceMod can parse.  There 
    should be one root section, and one sub-section for each category.  Each sub-section's 
    name should match the category name. Each sub-section may only contain key/value 
    pairs in the form of: key: 'item' value: Name of the item as passed to AddToTopMenu(). 
    The TopMenu will draw items in the order declared in the configuration file.  If 
    items do not appear in the configuration file, they are sorted per-player based 
    on how the handler function renders for that player. These items appear after the 
    configuration sorted items.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-LoadTranslations*


Syntax:
	LoadTranslations(const String:file[]);
Usage:
    path                Translation file.
Notes:
    Loads a translation file for the plugin calling this native. If no extension is specified, 
    .txt is assumed.
Return:
    No return.
==============================================================================
*sourcemod-LockStringTables*


Syntax:
	LockStringTables(bool:lock);
Usage:
    lock                Determines whether network string tables should be locked. True means the tables should be locked for writing; false means unlocked.
Notes:
    Locks or unlocks the network string tables.
Return:
    Previous lock state.
==============================================================================
*sourcemod-LogAction*


Syntax:
	LogAction(client, target, const String:message[], any:...);
Usage:
    client              Client performing the action, 0 for server, or -1 if not applicable.
    target              Client being targetted, or -1 if not applicable.
    message             Message format.
    ...                 Message formatting parameters.
Notes:
    Logs an action from a command or event whereby interception and routing may be important. 
     This is intended to be a logging version of ShowActivity().
Return:
    No return.
==============================================================================
*sourcemod-Logarithm*


Syntax:
	Logarithm(Float:value, Float:base=10.0);
Usage:
    value               Input value.
    base                Logarithm base to use, default is 10.
Notes:
    Returns the logarithm of any base specified.
Return:
    log(value)/log(base).
==============================================================================
*sourcemod-LogError*


Syntax:
	LogError(const String:format[], any:...);
Usage:
    format              String format.
    ...                 Format arguments.
Notes:
    Logs a plugin error message to the SourceMod logs.
Return:
    No return.
==============================================================================
*sourcemod-LogMessage*


Syntax:
	LogMessage(const String:format[], any:...);
Usage:
    format              String format.
    ...                 Format arguments.
Notes:
    Logs a plugin message to the SourceMod logs.  The log message will be prefixed by 
    the plugin's logtag (filename).
Return:
    No return.
==============================================================================
*sourcemod-LogMessageEx*


Syntax:
	LogMessageEx(const String:format[], any:...);
Usage:
    format              String format.
    ...                 Format arguments.
Notes:
    Logs a message to the SourceMod logs without any plugin logtag.  This is useful for 
    re-routing messages from other plugins, for example, messages from LogAction().
Return:
    No return.
==============================================================================
*sourcemod-LogToFile*


Syntax:
	LogToFile(const String:file[], const String:format[], any:...);
Usage:
    file                File to write the log message in.
    format              String format.
    ...                 Format arguments.
Notes:
    Logs a message to any file.  The log message will be in the normal SourceMod format, 
    with the plugin logtag prepended.
Return:
    No return.
==============================================================================
*sourcemod-LogToFileEx*


Syntax:
	LogToFileEx(const String:file[], const String:format[], any:...);
Usage:
    file                File to write the log message in.
    format              String format.
    ...                 Format arguments.
Notes:
    Same as LogToFile(), except no plugin logtag is prepended.
Return:
    No return.
==============================================================================
*sourcemod-LogToGame*


Syntax:
	LogToGame(const String:format[], any:...);
Usage:
    format              String format.
    ...                 Format arguments.
Notes:
    Logs a generic message to the HL2 logs.
Return:
    No return.
==============================================================================
*sourcemod-LogToOpenFile*


Syntax:
	LogToOpenFile(Handle:hndl, const String:message[], any:...);
Usage:
    hndl                Handle to the file.
    message             Message format.
    ...                 Message format parameters.
Notes:
    Same as LogToFile(), except uses an open file Handle.  The file must be opened in 
    text appending mode.
Return:
    No return.
==============================================================================
*sourcemod-LogToOpenFileEx*


Syntax:
	LogToOpenFileEx(Handle:hndl, const String:message[], any:...);
Usage:
    hndl                Handle to the file.
    message             Message format.
    ...                 Message format parameters.
Notes:
    Same as LogToFileEx(), except uses an open file Handle.  The file must be opened 
    in text appending mode.
Return:
    No return.
==============================================================================
*sourcemod-MakeVectorFromPoints*


Syntax:
	MakeVectorFromPoints(const Float:pt1[3], const Float:pt2[3], Float:output[3]);
Usage:
    pt1                 First point (to be subtracted from the second).
    pt2                 Second point.
    output              Output vector buffer.
Notes:
    Builds a vector from two points by subtracting the points.
Return:
    No return.
==============================================================================
*sourcemod-MarkNativeAsOptional*


Syntax:
	MarkNativeAsOptional(const String:name[]);
Usage:
    name                Native name.
Notes:
    Sets a native as optional, such that if it is unloaded, removed, or otherwise non-existent, 
    the plugin will still work.  Calling removed natives results in a run-time error.
Return:
    No return.
==============================================================================
*sourcemod-MatchRegex*


Syntax:
	MatchRegex(Handle:regex, const String:str[], &RegexError:ret = REGEX_ERROR_NONE);
Usage:
    str                 The string to check.
    regex               Regex Handle from CompileRegex()
    ret                 Error code, if applicable.
Notes:
    Matches a string against a pre-compiled regular expression pattern.
Return:
    Number of substrings found or -1 on failure.
==============================================================================
*sourcemod-MenuHandler*


Syntax:
	MenuHandler(Handle:menu, MenuAction:action, param1, param2);
Usage:
    menu                The menu being acted upon.
    action              The action of the menu.
    param1              First action parameter (usually the client).
    param2              Second action parameter (usually the item).
Notes:
    Called when a menu action is completed.
Return:
    No return.
==============================================================================
*sourcemod-MorePlugins*


Syntax:
	MorePlugins(Handle:iter);
Usage:
    iter                Handle to the plugin iterator.
Notes:
    Returns whether there are more plugins available in the iterator.
Return:
    True on more plugins, false otherwise.
==============================================================================
*sourcemod-MsgHook*


Syntax:
	MsgHook(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init);
Usage:
    msg_id              Message index.
    bf                  Handle to the input bit buffer of the message.
    players             Array containing player indexes.
    playersNum          Number of players in the array.
    reliable            True if message is reliable, false otherwise.
    init                True if message is an initmsg, false otherwise.
Notes:
    Called when a message is hooked
Return:
    Ignored for normal hooks.  For intercept hooks, Plugin_Handled blocks the message 
    from being sent, and Plugin_Continue resumes normal functionality.
==============================================================================
*sourcemod-MsgSentNotify*


Syntax:
	MsgSentNotify(UserMsg:msg_id);
Usage:
    msg_id              Message index.
Notes:
    Called when a message is finished sending.
Return:
    
==============================================================================
*sourcemod-NativeCall*


Syntax:
	NativeCall(Handle:plugin, numParams);
Usage:
    plugin              Handle of the calling plugin.
    numParams           Number of parameters passed to the native.
Notes:
    Defines a native function. It is not necessary to validate the parameter count
Return:
    Value for the native call to return.
==============================================================================
*sourcemod-NegateVector*


Syntax:
	NegateVector(Float:vec[3]);
Usage:
    vec                 Vector.
Notes:
    Negatives a vector.
Return:
    No return.
==============================================================================
*sourcemod-NominateMap*


Syntax:
	NominateMap(const String:map[], bool:force, owner);
Usage:
    map                 Map to add.
    force               Should we force the map in even if it requires overwriting an existing nomination?
    owner               Client index of the nominater. If the client disconnects the nomination will be removed. Use 0 for constant nominations
Notes:
    Attempt to add a map to the mapchooser map list.
Return:
    Nominate Result of the outcome
==============================================================================
*sourcemod-NormalizeVector*


Syntax:
	NormalizeVector(const Float:vec[3], Float:result[3]);
Usage:
    vec                 Vector.
    result              Resultant vector.
Notes:
    Normalizes a vector.  The input array can be the same as the output array.
Return:
    Vector length.
==============================================================================
*sourcemod-NormalSHook*


Syntax:
	NormalSHook(clients[64], &numClients, String:sample[PLATFORM_MAX_PATH], &entity, &channel, &Float:volume, &level, &pitch, &flags);
Usage:
    clients             Array of client indexes.
    numClients          Number of clients in the array (modify this value if you add/remove elements from the client array).
    sample              Sound file name relative to the 'sounds' folder.
    entity              Entity emitting the sound.
    channel             Channel emitting the sound.
    volume              Sound volume.
    level               Sound level.
    pitch               Sound pitch.
    flags               Sound flags.
Notes:
    Called when a sound is going to be emitted to one or more clients. NOTICE: all params 
    can be overwritten to modify the default behaviour.
Return:
    Plugin_Continue to allow the sound to be played, Plugin_Stop to block it, Plugin_Changed 
    when any parameter has been modified.
==============================================================================
*sourcemod-NotifyPostAdminCheck*


Syntax:
	NotifyPostAdminCheck(client);
Usage:
    client              Client index.
Notes:
    Signals that a player has completed post-connection admin checks. Has no effect if 
    the player has already had this event signalled. Note: This must be sent even if 
    no admin id was assigned.
Return:
    No return.
==============================================================================
*sourcemod-OnAdminMenuCreated*


Syntax:
	OnAdminMenuCreated(Handle:topmenu);
Usage:
    topmenu             Handle to the admin menu's TopMenu.
Notes:
    Called when the admin menu is created and 3rd party plugins can grab the Handle or 
    add categories.
Return:
    No return.
==============================================================================
*sourcemod-OnAdminMenuReady*


Syntax:
	OnAdminMenuReady(Handle:topmenu);
Usage:
    topmenu             Handle to the admin menu's TopMenu.
Notes:
    Called when the admin menu is ready to have items added.
Return:
    No return.
==============================================================================
*sourcemod-OnAllPluginsLoaded*


Syntax:
	OnAllPluginsLoaded();
Usage:
Notes:
    Called after all plugins have been loaded.  This is called once for every plugin. 
     If a plugin late loads, it will be called immediately after OnPluginStart().
Return:
    
==============================================================================
*sourcemod-OnAutoConfigsBuffered*


Syntax:
	OnAutoConfigsBuffered();
Usage:
Notes:
    This is called once, right after OnMapStart() but any time before OnConfigsExecuted(). 
     It is called after the 'exec sourcemod.cfg' command and all AutoExecConfig() exec 
    commands have been added to the ServerCommand() buffer. If you need to load per-map 
    settings that override default values, adding commands to the ServerCommand() buffer 
    here will guarantee that they're set before OnConfigsExecuted(). Unlike OnMapStart() 
    and OnConfigsExecuted(), this is not called on late loads that occur after OnMapStart().
Return:
    No return.
==============================================================================
*sourcemod-OnBanClient*


Syntax:
	OnBanClient(client, time, flags, const String:reason[], const String:kick_message[], const String:command[], any:source);
Usage:
    client              Client being banned.
    time                Time the client is being banned for (0 = permanent).
    flags               One if AUTHID or IP will be enabled.  If AUTO is also enabled, it means Core autodetected which to use.
    reason              Reason passed via BanClient().
    kick_message        Kick message passed via BanClient().
    command             Command string to identify the ban source.
    source              Source value passed via BanClient().
Notes:
    Called for calls to BanClient() with a non-empty command.
Return:
    Plugin_Handled to block the actual server banning. Kicking will still occur.
==============================================================================
*sourcemod-OnBanIdentity*


Syntax:
	OnBanIdentity(const String:identity[], time, flags, const String:reason[], const String:command[], any:source);
Usage:
    identity            Identity string being banned (authstring or ip).
    time                Time the client is being banned for (0 = permanent).
    flags               Ban flags (only IP or AUTHID are valid here).
    reason              Reason passed via BanIdentity().
    command             Command string to identify the ban source.
    source              Source value passed via BanIdentity().
Notes:
    Called for calls to BanIdentity() with a non-empty command.
Return:
    Plugin_Handled to block the actual server banning.
==============================================================================
*sourcemod-OnClientAuthorized*


Syntax:
	OnClientAuthorized(client, const String:auth[]);
Usage:
    client              Client index.
    auth                Client auth string.
Notes:
    Called when a client receives a Steam ID.  The state of a client's authorization 
    via Steam or as an admin is not guaranteed here. Use OnClientAuthorized() or OnClientPostAdminCheck() 
    for those, respectively. This is called by bots, but the ID will be 'BOT'.
Return:
    No return.
==============================================================================
*sourcemod-OnClientCommand*


Syntax:
	OnClientCommand(client, args);
Usage:
    client              Client index.
    args                Number of arguments.
Notes:
    Called when a client is sending a command.
Return:
    No return.
==============================================================================
*sourcemod-OnClientConnect*


Syntax:
	OnClientConnect(client, String:rejectmsg[], maxlen);
Usage:
    client              Client index.
    rejectmsg           Buffer to store the rejection message when the connection is refused.
    maxlen              Maximum number of characters for rejection buffer.
Notes:
    Called on client connection.  If you return true, the client will be allowed in the 
    server. If you return false (or return nothing), the client will be rejected.  If 
    the client is rejected by this forward or any other, OnClientDisconnect will not 
    be called.
Return:
    True to validate client's connection, false to refuse it.
==============================================================================
*sourcemod-OnClientConnected*


Syntax:
	OnClientConnected(client);
Usage:
    client              Client index.
Notes:
    Called once a client successfully connects.  This callback is paired with OnClientDisconnect.
Return:
    No return.
==============================================================================
*sourcemod-OnClientCookiesCached*


Syntax:
	OnClientCookiesCached(client);
Usage:
    client              Client index.
Notes:
    Called once a client's saved cookies have been loaded from the database.
Return:
    
==============================================================================
*sourcemod-OnClientDisconnect*


Syntax:
	OnClientDisconnect(client);
Usage:
    client              Client index.
Notes:
    Called when a client is disconnecting from the server.
Return:
    No return.
==============================================================================
*sourcemod-OnClientDisconnect_Post*


Syntax:
	OnClientDisconnect_Post(client);
Usage:
    client              Client index.
Notes:
    Called when a client is disconnected from the server.
Return:
    No return.
==============================================================================
*sourcemod-OnClientFloodCheck*


Syntax:
	OnClientFloodCheck(client);
Usage:
    client              Client index.  The server (0) will never be passed.
Notes:
    Called when a client has sent chat text.  This must return either true or false to 
    indicate that a client is or is not spamming the server. The return value is a hint 
    only.  Core or another plugin may decide otherwise.
Return:
    True if client is spamming the server, false otherwise.
==============================================================================
*sourcemod-OnClientFloodResult*


Syntax:
	OnClientFloodResult(client, bool:blocked);
Usage:
    client              Client index.  The server (0) will never be passed.
    blocked             True if client flooded last 'say', false otherwise.
Notes:
    Called after a client's flood check has been computed.  This can be used by antiflood 
    algorithms to decay/increase flooding weights. Since the result from 'OnClientFloodCheck' 
    isn't guaranteed to be the final result, it is generally a good idea to use this 
    to play with other algorithms nicely.
Return:
    No return.
==============================================================================
*sourcemod-OnClientPostAdminCheck*


Syntax:
	OnClientPostAdminCheck(client);
Usage:
    client              Client index.
Notes:
    Called once a client is authorized and fully in-game, and after all post-connection 
    authorizations have been performed. This callback is gauranteed to occur on all 
    clients, and always after each OnClientPutInServer() call.
Return:
    No return.
==============================================================================
*sourcemod-OnClientPostAdminFilter*


Syntax:
	OnClientPostAdminFilter(client);
Usage:
    client              Client index.
Notes:
    Called directly before OnClientPostAdminCheck() as a method to alter administrative 
    permissions before plugins perform final post-connect operations. In general, do 
    not use this function unless you are specifically attempting to change access permissions. 
     Use OnClientPostAdminCheck() instead if you simply want to perform post-connect 
    authorization routines. See OnClientPostAdminCheck() for more information.
Return:
    No return.
==============================================================================
*sourcemod-OnClientPreAdminCheck*


Syntax:
	OnClientPreAdminCheck(client);
Usage:
    client              Client index.
Notes:
    Called once a client is authorized and fully in-game, but before admin checks are 
    done.  This can be used to override the default admin checks for a client.  You 
    should only use this for overriding; use OnClientPostAdminCheck() instead if you 
    want notification. Note: If handled/blocked, PostAdminCheck must be signalled manually 
    via NotifyPostAdminCheck(). This callback is gauranteed to occur on all clients, 
    and always after each OnClientPutInServer() call.
Return:
    Plugin_Handled to block admin checks.
==============================================================================
*sourcemod-OnClientPutInServer*


Syntax:
	OnClientPutInServer(client);
Usage:
    client              Client index.
Notes:
    Called when a client is entering the game. Whether a client has a steamid is undefined 
    until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. 
    Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting 
    players are admins. GetClientCount() will include clients as they are passed through 
    this function, as clients are already in game at this point.
Return:
    No return.
==============================================================================
*sourcemod-OnClientSettingsChanged*


Syntax:
	OnClientSettingsChanged(client);
Usage:
    client              Client index.
Notes:
    Called whenever the client's settings are changed.
Return:
    No return.
==============================================================================
*sourcemod-OnConfigsExecuted*


Syntax:
	OnConfigsExecuted();
Usage:
Notes:
    Called when the map has loaded, servercfgfile (server.cfg) has been executed, and 
    all plugin configs are done executing.  This is the best place to initialize plugin 
    functions which are based on cvar data.
Return:
    No return.
==============================================================================
*sourcemod-OnGameFrame*


Syntax:
	OnGameFrame();
Usage:
Notes:
    Called before every server frame.  Note that you should avoid doing expensive computations 
    here, and you should declare large local arrays using 'decl' instead of 'new'.
Return:
    
==============================================================================
*sourcemod-OnLibraryAdded*


Syntax:
	OnLibraryAdded(const String:name[]);
Usage:
    name                Library name.
Notes:
    Called after a library is added that the current plugin references optionally. A 
    library is either a plugin name or extension name, as exposed via its include file.
Return:
    
==============================================================================
*sourcemod-OnLibraryRemoved*


Syntax:
	OnLibraryRemoved();
Usage:
    name                Library name.
Notes:
    Called right before a library is removed that the current plugin references optionally. 
     A library is either a plugin name or extension name, as exposed via its include 
    file.
Return:
    ">
				<Param name="const String:name[]); #define MAPLIST_FLAG_MAPSFOLDER        (1&lt;&lt;0)        /**&lt; On failure"/>
				<Param name="use all maps in the maps folder. */ #define MAPLIST_FLAG_CLEARARRAY        (1&lt;&lt;1)        /**&lt; If an input array is specified"/>
				<Param name="clear it before adding. */ #define MAPLIST_FLAG_NO_DEFAULT        (1&lt;&lt;2"/>
		</KeyWord>
==============================================================================
*sourcemod-OnLogAction*


Syntax:
	OnLogAction(Handle:source, Identity:ident, client, target, const String:message[]);
Usage:
    source              Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action.
    ident               Type of object logging the action (plugin, ext, or core).
    client              Client the action is from; 0 for server, -1 if not applicable.
    target              Client the action is targetting, or -1 if not applicable.
    message             Message that is being logged.
Notes:
    Called when an action is going to be logged.
Return:
    Plugin_Continue will cause Core to defaulty log the message. Plugin_Handled will 
    stop Core from logging the message. Plugin_Stop is the same as Handled, but prevents 
    any other plugins from handling the message.
==============================================================================
*sourcemod-OnMapEnd*


Syntax:
	OnMapEnd();
Usage:
Notes:
    Called right before a map ends.
Return:
    
==============================================================================
*sourcemod-OnMapStart*


Syntax:
	OnMapStart();
Usage:
Notes:
    Called when the map is loaded.
Return:
    
==============================================================================
*sourcemod-OnMapTimeLeftChanged*


Syntax:
	OnMapTimeLeftChanged();
Usage:
Notes:
    Notification that the map's time left has changed via a change in the time limit 
    or a change in the game rules (such as mp_restartgame).  This is useful for plugins 
    trying to create timers based on the time left in the map. Calling ExtendMapTimeLimit() 
    from here, without proper precaution, will cause infinite recursion. If the operation 
    is not supported, this will never be called. If the server has not yet processed 
    any frames (i.e. no players have joined the map yet), then this will be called once 
    the server begins ticking, even if there is no time limit set.
Return:
    
==============================================================================
*sourcemod-OnNominationRemoved*


Usage:
Notes:
    Called when mapchooser removes a nomination from its list. Nominations cleared on 
    map start will not trigger this forward
Return:
    ">
(const String:map[], owner);
==============================================================================
*sourcemod-OnPlayerRunCmd*


Syntax:
	OnPlayerRunCmd(client, &buttons, &impulse, Float:vel[3], Float:angles[3], &weapon);
		Syntax:
			/KeyWord>
Usage:
    client                Index of the client
    buttons                 Copyback buffer containing the current commands (as bitflags)
    impulse                 Copyback buffer containing the impulse command
    vel                 Players desired velocity.
    angles                 Players desired view angles.
    weapon                 Entity index of the new weapon if player switches weapon, 0 otherwise.
Notes:
    Called when a clients movement buttons are being processed.
Return:
    Plugin_Handled to block the commands from being processed, Plugin_Continue otherwise.
==============================================================================
*sourcemod-OnPluginEnd*


Syntax:
	OnPluginEnd();
Usage:
Notes:
    Called when the plugin is about to be unloaded.
Return:
    No return.
==============================================================================
*sourcemod-OnPluginPauseChange*


Syntax:
	OnPluginPauseChange(bool:pause);
Usage:
    pause               True if the plugin is being paused, false otherwise.
Notes:
    Called when the plugin's pause status is changing.
Return:
    No return.
==============================================================================
*sourcemod-OnPluginStart*


Syntax:
	OnPluginStart();
Usage:
Notes:
    Called when the plugin is fully initialized and all known external references are 
    resolved. This is only called once in the lifetime of the plugin, and is paired 
    with OnPluginEnd(). If any run-time error is thrown during this callback, the plugin 
    will be marked as failed. It is not necessary to close any handles or remove hooks 
    in this function. SourceMod guarantees that plugin shutdown automatically and correctly 
    releases all resources.
Return:
    No return.
==============================================================================
*sourcemod-OnRebuildAdminCache*


Syntax:
	OnRebuildAdminCache(AdminCachePart:part);
Usage:
    part                Part of the admin cache to rebuild.
Notes:
    Called when part of the cache which needs to be rebuilt.
Return:
    
==============================================================================
*sourcemod-OnRemoveBan*


Syntax:
	OnRemoveBan(const String:identity[], flags, const String:command[], any:source);
Usage:
    identity            Identity string being banned (authstring or ip).
    flags               Ban flags (only IP or AUTHID are valid here).
    command             Command string to identify the ban source.
    source              Source value passed via BanIdentity().
Notes:
    Called for calls to RemoveBan() with a non-empty command.
Return:
    Plugin_Handled to block the actual server banning.
==============================================================================
*sourcemod-OpenDirectory*


Syntax:
	OpenDirectory(const String:path[]);
Usage:
    path                Path to open.
Notes:
    Opens a directory/folder for contents enumeration.
Return:
    A Handle to the directory, INVALID_HANDLE on open error.
==============================================================================
*sourcemod-OpenFile*


Syntax:
	OpenFile(const String:file[], const String:mode[]);
Usage:
    file                File to open.
    mode                Open mode.
Notes:
    Opens a file.
Return:
    A Handle to the file, INVALID_HANDLE on open error.
==============================================================================
*sourcemod-operator%*


Syntax:
	operator%(Float:oper2);
Usage:
Notes:
    Forbidden operators.
Return:
    ">
(Float:oper1, <Param name="Float:oper2); forward operator%(Float:oper1"/>
				<Param name="oper2); forward operator%(oper1"/>
		</KeyWord>
==============================================================================
*sourcemod-PopStack*


Syntax:
	PopStack(Handle:stack);
Usage:
    stack               Stack Handle.
Notes:
    Pops a value off a stack, ignoring it completely.
Return:
    True if something was popped, false otherwise.
==============================================================================
*sourcemod-PopStackArray*


Syntax:
	PopStackArray(Handle:stack, any:buffer[], size=-1);
Usage:
    stack               Stack Handle.
    buffer              Buffer to store the array in.
    size                If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used.
Notes:
    Pops an array of cells from a stack.
Return:
    True on success, false if the stack is empty.
==============================================================================
*sourcemod-PopStackCell*


Syntax:
	PopStackCell(Handle:stack, &any:value, block=0, bool:asChar=false);
Usage:
    stack               Stack Handle.
    value               Variable to store the value.
    block               Optionally specify which block to read from (useful if the blocksize > 0).
    asChar              Optionally read as a byte instead of a cell.
Notes:
    Pops a cell value from a stack.
Return:
    True on success, false if the stack is empty.
==============================================================================
*sourcemod-PopStackString*


Syntax:
	PopStackString(Handle:stack, String:buffer[], maxlength, &written=0);
Usage:
    stack               Stack Handle.
    buffer              Buffer to store string.
    maxlength           Maximum size of the buffer.
Notes:
    Pops a string value from a stack.
Return:
    True on success, false if the stack is empty.
==============================================================================
*sourcemod-Pow*


Syntax:
	Pow(Float:value, Float:exponent);
Usage:
    value               Value to be raised.
    exponent            Value to raise the base.
Notes:
    Returns the value raised to the power of the exponent.
Return:
    value^exponent.
==============================================================================
*sourcemod-PrecacheDecal*


Syntax:
	PrecacheDecal(const String:decal[], bool:preload=false);
Usage:
    decal               Name of the decal to precache.
    preload             If preload is true the file will be precached before level startup.
Notes:
    Precaches a given decal.
Return:
    Returns a decal index.
==============================================================================
*sourcemod-PrecacheGeneric*


Syntax:
	PrecacheGeneric(const String:generic[], bool:preload=false);
Usage:
    generic             Name of the generic file to precache.
    preload             If preload is true the file will be precached before level startup.
Notes:
    Precaches a given generic file.
Return:
    Returns a generic file index.
==============================================================================
*sourcemod-PrecacheModel*


Syntax:
	PrecacheModel(const String:model[], bool:preload=false);
Usage:
    model               Name of the model to precache.
    preload             If preload is true the file will be precached before level startup.
Notes:
    Precaches a given model.
Return:
    Returns the model index, 0 for error.
==============================================================================
*sourcemod-PrecacheSentenceFile*


Syntax:
	PrecacheSentenceFile(const String:file[], bool:preload=false);
Usage:
    file                Name of the sentence file to precache.
    preload             If preload is true the file will be precached before level startup.
Notes:
    Precaches a given sentence file.
Return:
    Returns a sentence file index.
==============================================================================
*sourcemod-PrecacheSound*


Syntax:
	PrecacheSound(const String:sound[], bool:preload=false);
Usage:
    sound               Name of the sound to precache.
    preload             If preload is true the file will be precached before level startup.
Notes:
    Precaches a given sound.
Return:
    True if successfully precached, false otherwise.
==============================================================================
*sourcemod-PrefetchSound*


Syntax:
	PrefetchSound(const String:nane[]);
Usage:
    name                Sound file name relative to the 'sounds' folder.
Notes:
    Prefetches a sound.
Return:
    No return.
==============================================================================
*sourcemod-PrepSDKCall_AddParameter*


Syntax:
	PrepSDKCall_AddParameter(SDKType:type, SDKPassMethod:pass, decflags=0, encflags=0);
Usage:
    type                Data type to convert to/from.
    pass                How the data is passed in C++.
    decflags            Flags on decoding from the plugin to C++.
    encflags            Flags on encoding from C++ to the plugin.
Notes:
    Adds a parameter to the calling convention.  This should be called in normal ascending 
    order.
Return:
    No return.
==============================================================================
*sourcemod-PrepSDKCall_SetFromConf*


Syntax:
	PrepSDKCall_SetFromConf(Handle:gameconf, SDKFuncConfSource:source, const String:name[]);
Usage:
    gameconf            GameConfig Handle, or INVALID_HANDLE to use sdktools.games.txt.
    source              Whether to look in Offsets or Signatures.
    name                Name of the property to find.
Notes:
    Finds an address or virtual function index in a GameConfig file and sets it as the 
    calling information for the SDK call.
Return:
    True on success, false if nothing was found.
==============================================================================
*sourcemod-PrepSDKCall_SetReturnInfo*


Syntax:
	PrepSDKCall_SetReturnInfo(SDKType:type, SDKPassMethod:pass, decflags=0, encflags=0);
Usage:
    type                Data type to convert to/from.
    pass                How the data is passed in C++.
    decflags            Flags on decoding from the plugin to C++.
    encflags            Flags on encoding from C++ to the plugin.
Notes:
    Sets the return information of an SDK call.  Do not call this if there is no return 
    data. This must be called if there is a return value (i.e. it is not necessarily 
    safe to ignore the data).
Return:
    No return.
==============================================================================
*sourcemod-PrepSDKCall_SetSignature*


Syntax:
	PrepSDKCall_SetSignature(SDKLibrary:lib, const String:signature[], bytes);
Usage:
    lib                 Library to use.
    signature           Binary data to search for in the library.  If it starts with '@', the bytes parameter is ignored and the signature is interpreted as a symbol lookup in the library.
    bytes               Number of bytes in the binary search string.
Notes:
    Finds an address in a library and sets it as the address to use for the SDK call.
Return:
    True on success, false if nothing was found.
==============================================================================
*sourcemod-PrepSDKCall_SetVirtual*


Syntax:
	PrepSDKCall_SetVirtual(vtblidx);
Usage:
    vtblidx             Virtual table index.
Notes:
    Sets the virtual index of the SDK call if it is virtual.
Return:
    No return.
==============================================================================
*sourcemod-PrintCenterText*


Syntax:
	PrintCenterText(client, const String:format[], any:...);
Usage:
    client              Client index.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to a specific client in the center of the screen.
Return:
    No return.
==============================================================================
*sourcemod-PrintCenterTextAll*


Syntax:
	PrintCenterTextAll(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to all clients in the center of the screen.
Return:
    No return.
==============================================================================
*sourcemod-PrintHintText*


Syntax:
	PrintHintText(client, const String:format[], any:...);
Usage:
    client              Client index.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to a specific client with a hint box.
Return:
    No return.
==============================================================================
*sourcemod-PrintHintTextToAll*


Syntax:
	PrintHintTextToAll(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to all clients with a hint box.
Return:
    No return.
==============================================================================
*sourcemod-PrintToChat*


Syntax:
	PrintToChat(client, const String:format[], any:...);
Usage:
    client              Client index.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to a specific client in the chat area.
Return:
    No return.
==============================================================================
*sourcemod-PrintToChatAll*


Syntax:
	PrintToChatAll(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Prints a message to all clients in the chat area.
Return:
    No return.
==============================================================================
*sourcemod-PrintToConsole*


Syntax:
	PrintToConsole(client, const String:format[], any:...);
Usage:
    client              Client index.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Sends a message to a client's console.
Return:
    No return.
==============================================================================
*sourcemod-PrintToServer*


Syntax:
	PrintToServer(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Sends a message to the server console.
Return:
    No return.
==============================================================================
*sourcemod-ProcessTargetString*


Syntax:
	ProcessTargetString(const String:pattern[], admin, targets[], max_targets, filter_flags, String:target_name[], tn_maxlength, &bool:tn_is_ml);
Usage:
    pattern             Pattern to find clients against.
    admin               Admin performing the action, or 0 if the server.
    targets             Array to hold targets.
    max_targets         Maximum size of the targets array.
    filter_flags        Filter flags.
    target_name         Buffer to store the target name.
    tn_maxlength        Maximum length of the target name buffer.
    tn_is_ml            OUTPUT: Will be true if the target name buffer is an ML phrase, false if it is a normal string.
Notes:
    Processes a generic command target string, and resolves it to a list of clients or 
    one client, based on filtering rules and a pattern. Note that you should use LoadTranslations('common.phrases') 
    in OnPluginStart(), as that file is guaranteed to contain all of the translatable 
    phrases that ProcessTargetString() will return.
Return:
    If a multi-target pattern was used, the number of clients found is returned.  If 
    a single-target pattern was used, 1 is returned if one valid client is found.  Otherwise, 
    a COMMAND_TARGET reason for failure is returned.
==============================================================================
*sourcemod-PushArrayArray*


Syntax:
	PushArrayArray(Handle:array, const any:values[], size=-1);
Usage:
    array               Array Handle.
    values              Block of values to copy.
    size                If not set, the number of elements copied from the array will be equal to the blocksize.  If set higher than the blocksize, the operation will be truncated.
Notes:
    Pushes an array of cells onto the end of an array.  The cells are pushed as a block 
    (i.e. the entire array sits at the index), rather than pushing each cell individually.
Return:
    Index of the new entry.
==============================================================================
*sourcemod-PushArrayCell*


Syntax:
	PushArrayCell(Handle:array, any:value);
Usage:
    array               Array Handle.
    value               Value to push.
Notes:
    Pushes a value onto the end of an array, adding a new index. This may safely be used 
    even if the array has a blocksize greater than 1.
Return:
    Index of the new entry.
==============================================================================
*sourcemod-PushArrayString*


Syntax:
	PushArrayString(Handle:array, const String:value[]);
Usage:
    array               Array Handle.
    value               String to push.
Notes:
    Pushes a string onto the end of an array, truncating it if it is too big.
Return:
    Index of the new entry.
==============================================================================
*sourcemod-PushStackArray*


Syntax:
	PushStackArray(Handle:stack, const any:values[], size=-1);
Usage:
    stack               Stack Handle.
    values              Block of values to copy.
    size                If not set, the number of elements copied from the array will be equal to the blocksize.  If set higher than the blocksize, the operation will be truncated.
Notes:
    Pushes an array of cells onto the end of a stack.  The cells are pushed as a block 
    (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.
Return:
    No return.
==============================================================================
*sourcemod-PushStackCell*


Syntax:
	PushStackCell(Handle:stack, any:value);
Usage:
    stack               Stack Handle.
    value               Value to push.
Notes:
    Pushes a value onto the end of the stack, adding a new index. This may safely be 
    used even if the stack has a blocksize greater than 1.
Return:
    No return.
==============================================================================
*sourcemod-PushStackString*


Syntax:
	PushStackString(Handle:stack, const String:value[]);
Usage:
    stack               Stack Handle.
    value               String to push.
Notes:
    Pushes a string onto the end of a stack, truncating it if it is too big.
Return:
    No return.
==============================================================================
*sourcemod-QueryClientConVar*


Syntax:
	QueryClientConVar(client, const String:cvarName[], ConVarQueryFinished:callback, any:value=0);
Usage:
    client              Player index.
    name                Name of client convar to query.
    callback            A function to use as a callback when the query has finished.
    value               Optional value to pass to the callback function.
Notes:
    Starts a query to retrieve the value of a client's console variable.
Return:
    A cookie that uniquely identifies the query. Returns QUERYCOOKIE_FAILED on failure, 
    such as when used on a bot.
==============================================================================
*sourcemod-RadToDeg*


Syntax:
	RadToDeg(Float:angle);
Usage:
    angle               Radians.
Notes:
    Converts degrees to radians.
Return:
    Degrees.
==============================================================================
*sourcemod-ReadCommandIterator*


Syntax:
	ReadCommandIterator(Handle:iter, String:name[], nameLen, &eflags=0, String:desc[]='', descLen=0);
Usage:
    iter                Command iterator Handle.
    name                Name buffer.
    nameLen             Name buffer size.
    eflags              Effective default flags of a command.
    desc                Command description buffer.
    descLen             Command description buffer size.
Notes:
    Reads a command iterator, then advances to the next command if any. Only SourceMod 
    specific commands are returned.
Return:
    True on success, false if there are no more commands.
==============================================================================
*sourcemod-ReadCookieIterator*


Syntax:
	ReadCookieIterator(Handle:iter, String:name[], nameLen, &CookieAccess:access, String:desc[]='', descLen=0);
Usage:
    iter                Cookie iterator Handle.
    name                Name buffer.
    nameLen             Name buffer size.
    access              Access level of the cookie.
    desc                Cookie description buffer.
    descLen             Cookie description buffer size.
Notes:
    Reads a cookie iterator, then advances to the next cookie if any.
Return:
    True on success, false if there are no more commands.
==============================================================================
*sourcemod-ReadDirEntry*


Syntax:
	ReadDirEntry(Handle:dir, String:buffer[], maxlength, &FileType:type=FileType_Unknown);
Usage:
    dir                 Handle to a directory.
    buffer              String buffer to hold directory name.
    maxlength           Maximum size of string buffer.
    type                Optional variable to store the file type.
Notes:
    Reads the current directory entry as a local filename, then moves to the next file.
Return:
    True on success, false if there are no more files to read.
==============================================================================
*sourcemod-ReadFile*


Syntax:
	ReadFile(Handle:hndl, items[], num_items, size);
Usage:
    hndl                Handle to the file.
    items               Array to store each item read.
    num_items           Number of items to read into the array.
    size                Size of each element, in bytes, to be read. Valid sizes are 1, 2, or 4.
Notes:
    Reads binary data from a file.
Return:
    Number of elements read, or -1 on error.
==============================================================================
*sourcemod-ReadFileCell*


Syntax:
	ReadFileCell(Handle:hndl, &data, size);
Usage:
    hndl                Handle to the file.
    data                Variable to store the data read.
    size                Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.
Notes:
    Reads a single binary cell from a file.
Return:
    Number of elements read (max 1), or -1 on error.
==============================================================================
*sourcemod-ReadFileLine*


Syntax:
	ReadFileLine(Handle:hndl, String:buffer[], maxlength);
Usage:
    hndl                Handle to the file.
    buffer              String buffer to hold the line.
    maxlength           Maximum size of string buffer.
Notes:
    Reads a line from a text file.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-ReadFileString*


Syntax:
	ReadFileString(Handle:hndl, String:buffer[], max_size, read_count=-1);
Usage:
    hndl                Handle to the file.
    buffer              Buffer to store the string.
    max_size            Maximum size of the string buffer.
    read_count          If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file.
Notes:
    Reads a UTF8 or ANSI string from a file.
Return:
    Number of characters written to the buffer, or -1 if an error was encountered.
==============================================================================
*sourcemod-ReadFlagString*


Syntax:
	ReadFlagString(const String:flags[], &numchars=0);
Usage:
    flags               Flag ASCII string.
    numchars            Optional variable to store the number of bytes read.
Notes:
    Converts a string of flag characters to a bit string.
Return:
    Bit string of ADMFLAG values.
==============================================================================
*sourcemod-ReadMapList*


Syntax:
	ReadMapList(Handle:array=INVALID_HANDLE, &serial=-1, const String:str[]='default', flags=MAPLIST_FLAG_CLEARARRAY);
Usage:
    array               Array to store the map list.  If INVALID_HANDLE, a new blank array will be created.  The blocksize should be at least 16; otherwise results may be truncated.  Items are added to the array as strings.  The array is never checked for duplicates, and it is not read beforehand.  Only the serial number is used to detect changes.
    serial              Serial number to identify last known map list change.  If -1, the the value will not be checked.  If the map list has since changed, the serial is updated (even if -1 was passed).  If there is an error finding a valid maplist, then the serial is set to -1.
    str                 Config name, or 'default' for the default map list.  Config names should be somewhat descriptive.  For example, the admin menu uses a config name of 'admin menu'.  The list names can be configured by users in addons/sourcemod/configs/maplists.cfg.
    flags               MAPLIST_FLAG flags.
Notes:
    Loads a map list to an ADT Array. A map list is a list of maps from a file.  SourceMod 
    allows easy configuration of maplists through addons/sourcemod/configs/maplists.cfg. 
     Each entry is given a name and a file (for example, 'rtv' => 'rtv.cfg'), or a name 
    and a redirection (for example, 'rtv' => 'default').  This native will read a map 
    list entry, cache the file, and return the list of maps it holds. Serial change 
    numbers are used to identify if a map list has changed.  Thus, if you pass a serial 
    change number and it's equal to what SourceMod currently knows about the map list, 
    then SourceMod won't reparse the file. If the maps end up being read from the maps 
    folder (MAPLIST_FLAG_MAPSFOLDER), they are automatically sorted in alphabetical, 
    ascending order. Arrays created by this function are temporary and must be freed 
    via CloseHandle(). Modifying arrays created by this function will not affect future 
    return values or or the contents of arrays returned to other plugins.
Return:
    On failure: INVALID_HANDLE is returned, the serial is set to -1, and the input array 
    (if any) is left unchanged. On no change: On success: A valid array Handle is returned, 
    containing at least one map string. If an array was passed, the return value is 
    eq
==============================================================================
*sourcemod-ReadPackCell*


Syntax:
	ReadPackCell(Handle:pack);
Usage:
    pack                Handle to the data pack.
Notes:
    Reads a cell from a data pack.
Return:
    Cell value.
==============================================================================
*sourcemod-ReadPackFloat*


Syntax:
	ReadPackFloat(Handle:pack);
Usage:
    pack                Handle to the data pack.
Notes:
    Reads a float from a data pack.
Return:
    Float value.
==============================================================================
*sourcemod-ReadPackString*


Syntax:
	ReadPackString(Handle:pack, String:buffer[], maxlen);
Usage:
    pack                Handle to the data pack.
    buffer              Destination string buffer.
    maxlen              Maximum length of output string buffer.
Notes:
    Reads a string from a data pack.
Return:
    No return.
==============================================================================
*sourcemod-ReadPlugin*


Syntax:
	ReadPlugin(Handle:iter);
Usage:
    iter                Handle to the plugin iterator.
Notes:
    Returns the current plugin in the iterator and advances the iterator.
Return:
    Current plugin the iterator is at, before the iterator is advanced.
==============================================================================
*sourcemod-ReadStringTable*


Syntax:
	ReadStringTable(tableidx, stringIdx, String:str[], maxlength);
Usage:
    tableidx            A string table index.
    stringidx           A string index.
    name                Buffer to store the string value.
    maxlength           Maximum length of string buffer.
Notes:
    Retrieves the string at a given index of a string table.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
==============================================================================
*sourcemod-RedisplayAdminMenu*


Syntax:
	RedisplayAdminMenu(Handle:topmenu, client);
Usage:
    topmenu             TopMenu Handle.
    client              Client index.
Notes:
    Re-displays the admin menu to a client after selecting an item. Auto-aborts if the 
    Handle is invalid.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-RedrawClientVoteMenu*


Syntax:
	RedrawClientVoteMenu(client);
Usage:
    client              Client index.
Notes:
    Redraws the current vote menu to a client in the voting pool.
Return:
    True on success, false if the client is in the vote pool but cannot vote again.
==============================================================================
*sourcemod-RedrawMenuItem*


Syntax:
	RedrawMenuItem(const String:text[]);
Usage:
    text                Menu text to draw.
Notes:
    Redraws menu text from inside a MenuAction_DisplayItem callback.
Return:
    Item position; must be returned via the callback.
==============================================================================
*sourcemod-RegAdminCmd*


Syntax:
	RegAdminCmd(const String:cmd[], ConCmd:callback, adminflags, const String:description[]='', const String:group[]='', flags=0);
Usage:
    cmd                 String containing command to register.
    callback            A function to use as a callback for when the command is invoked.
    adminflags          Administrative flags (bitstring) to use for permissions.
    description         Optional description to use for help.
    group               String containing the command group to use.  If empty, the plugin's filename will be used instead.
    flags               Optional console flags.
Notes:
    Creates a console command as an administrative command.  If the command does not 
    exist, it is created.  When this command is invoked, the access rights of the player 
    are automatically checked before allowing it to continue. Admin commands are case 
    sensitive from both the client and server.
Return:
    No return.
==============================================================================
*sourcemod-RegClientCookie*


Syntax:
	RegClientCookie(const String:name[], const String:description[], CookieAccess:access);
Usage:
    name                Name of the new preference cookie.
    description         Optional description of the preference cookie.
    access              What CookieAccess level to assign to this cookie.
Notes:
    Creates a new Client preference cookie.
Return:
    A handle to the newly created cookie. If the cookie already exists, a handle to it 
    will still be returned.
==============================================================================
*sourcemod-RegConsoleCmd*


Syntax:
	RegConsoleCmd(const String:cmd[], ConCmd:callback, const String:description[]='', flags=0);
Usage:
    cmd                 Name of the command to hook or create.
    callback            A function to use as a callback for when the command is invoked.
    description         Optional description to use for command creation.
    flags               Optional flags to use for command creation.
Notes:
    Creates a console command, or hooks an already existing one. Console commands are 
    case sensitive.  However, if the command already exists in the game, the a client 
    may enter the command in any case.  SourceMod corrects for this automatically, and 
    you should only hook the 'real' version of the command.
Return:
    No return.
==============================================================================
*sourcemod-RegisterAuthIdentType*


Syntax:
	RegisterAuthIdentType(const String:name[]);
Usage:
    codename            Codename to use for your authentication type.
Notes:
    Registers an authentication identity type.  You normally never need to call this 
    except for very specific systems.
Return:
    No return.
==============================================================================
*sourcemod-RegPluginLibrary*


Syntax:
	RegPluginLibrary(const String:name[]);
Usage:
    name                Library name.
Notes:
    Registers a library name for identifying as a dependency to other plugins.
Return:
    No return.
==============================================================================
*sourcemod-RegServerCmd*


Syntax:
	RegServerCmd(const String:cmd[], SrvCmd:callback, const String:description[]='', flags=0);
Usage:
    cmd                 Name of the command to hook or create.
    callback            A function to use as a callback for when the command is invoked.
    description         Optional description to use for command creation.
    flags               Optional flags to use for command creation.
Notes:
    Creates a server-only console command, or hooks an already existing one. Server commands 
    are case sensitive.
Return:
    No return.
==============================================================================
*sourcemod-RemoveAdmin*


Syntax:
	RemoveAdmin(AdminId:id);
Usage:
    id                  AdminId index to remove/invalidate.
Notes:
    Removes an admin entry from the cache.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-RemoveAllFromForward*


Syntax:
	RemoveAllFromForward(Handle:fwd, Handle:plugin);
Usage:
    fwd                 Handle to private forward.
    plugin              Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin.
Notes:
    Removes all instances of a plugin from a private forward's call list.
Return:
    Number of functions removed from forward.
==============================================================================
*sourcemod-RemoveAllMenuItems*


Syntax:
	RemoveAllMenuItems(Handle:menu);
Usage:
    menu                Menu Handle.
Notes:
    Removes all items from a menu.
Return:
    No return.
==============================================================================
*sourcemod-RemoveAmbientSoundHook*


Syntax:
	RemoveAmbientSoundHook(AmbientSHook:hook);
Usage:
    hook                Function used for the hook.
Notes:
    Unhooks all played ambient sounds.
Return:
    No return.
==============================================================================
*sourcemod-RemoveBan*


Syntax:
	RemoveBan(const String:identity[], flags, const String:command[]='', any:source=0);
Usage:
    identity            String to unban (ip or authstring).
    flags               Flags (only IP and AUTHID are valid flags here).
    command             Command string to identify the source.  If this is left empty, then OnRemoveBan will not be called.
    source              A source value that could be interpreted as a player index of any sort (not actually checked by Core).
Notes:
    Removes a ban that was written to the server (either in memory or on disk).
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-RemoveDir*


Syntax:
	RemoveDir(const String:path[]);
Usage:
    path                Path to the directory.
Notes:
    Removes a directory.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-RemoveEdict*


Syntax:
	RemoveEdict(edict);
Usage:
    edict               Index of the edict.
Notes:
    Removes an edict from the world.
Return:
    No return.
==============================================================================
*sourcemod-RemoveFromArray*


Syntax:
	RemoveFromArray(Handle:array, index);
Usage:
    array               Array Handle.
    index               Index in the array to remove at.
Notes:
    Removes an array index, shifting the entire array down from that position on.  For 
    example, if item 8 of 10 is removed, the last 3 items will then be (6,7,8) instead 
    of (7,8,9), and all indexes before 8 will remain unchanged.
Return:
    No return.
==============================================================================
*sourcemod-RemoveFromForward*


Syntax:
	RemoveFromForward(Handle:fwd, Handle:plugin, Function:func);
Usage:
    fwd                 Handle to private forward.
    plugin              Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.
    func                Function to remove from forward.
Notes:
    Removes a function from a private forward's call list.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-RemoveFromTopMenu*


Syntax:
	RemoveFromTopMenu(Handle:topmenu, TopMenuObject:object);
Usage:
    topmenu             TopMenu Handle.
    object              TopMenuObject ID.
Notes:
    Removes an object from a TopMenu. Plugins' objects are automatically removed all 
    TopMenus when the given plugin unloads or pauses.  In the case of unpausing, all 
    items are restored.
Return:
    No return.
==============================================================================
*sourcemod-RemoveFromTrie*


Syntax:
	RemoveFromTrie(Handle:trie, const String:key[]);
Usage:
    trie                Trie Handle.
    key                 Key string.
Notes:
    Removes a key entry from a Trie.
Return:
    True on success, false if the value was never set.
==============================================================================
*sourcemod-RemoveGameLogHook*


Syntax:
	RemoveGameLogHook(GameLogHook:hook);
Usage:
    hook                Hook function.
Notes:
    Removes a game log hook.
Return:
    No return.
==============================================================================
*sourcemod-RemoveMenuItem*


Syntax:
	RemoveMenuItem(Handle:menu, position);
Usage:
    menu                Menu Handle.
    position            Position, starting from 0.
Notes:
    Removes an item from the menu.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-RemoveNormalSoundHook*


Syntax:
	RemoveNormalSoundHook(NormalSHook:hook);
Usage:
    hook                Function used for the hook.
Notes:
    Unhooks all played normal sounds.
Return:
    No return.
==============================================================================
*sourcemod-RemovePlayerItem*


Syntax:
	RemovePlayerItem(client, item);
Usage:
    client              Client index.
    item                CBaseCombatWeapon entity index.
Notes:
    Removes a player's item.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-RemoveServerTag*


Syntax:
	RemoveServerTag(const String:tag[]);
Usage:
    tag                 Tag string to remove.
Notes:
    Removes a string from valve's sv_tags convar.Note: You can only remove tags created 
    by you.
Return:
    No return.
==============================================================================
*sourcemod-RemoveTempEntHook*


Syntax:
	RemoveTempEntHook(const String:te_name[], TEHook:hook);
Usage:
    te_name             TE name to unhook.
    hook                Function used for the hook.
Notes:
    Removes a temp entity hook.
Return:
    No return.
==============================================================================
*sourcemod-RemoveUserFlags*


Syntax:
	RemoveUserFlags(client, AdminFlag:...);
Usage:
    client              Player's index.
    ...                 Flags to remove from the client.
Notes:
    Removes flags from a client.  If the client is not an admin, this has no effect.
Return:
    No return.
==============================================================================
*sourcemod-RenameFile*


Syntax:
	RenameFile(const String:newpath[], const String:oldpath[]);
Usage:
    newpath             New path to the file.
    oldpath             Path to the existing file.
Notes:
    Renames a file.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-ReplaceString*


Syntax:
	ReplaceString(String:text[], maxlength, const String:search[], const String:replace[], bool:caseSensitive=true);
Usage:
    text                String to perform search and replacements on.
    maxlength           Maximum length of the string buffer.
    search              String to search for.
    replace             String to replace the search string with.
    caseSensitive       If true (default), search is case sensitive.
Notes:
    Given a string, replaces all occurrences of a search string with a replacement string.
Return:
    Number of replacements that were performed.
==============================================================================
*sourcemod-ReplaceStringEx*


Syntax:
	ReplaceStringEx(String:text[], maxlength, const String:search[], const String:replace[], searchLen=-1, replaceLen=-1, bool:caseSensitive=true);
Usage:
    text                String to perform search and replacements on.
    maxlength           Maximum length of the string buffer.
    search              String to search for.
    replace             String to replace the search string with.
    searchLen           If higher than -1, its value will be used instead of a strlen() call on the search parameter.
    replaceLen          If higher than -1, its value will be used instead of a strlen() call on the replace parameter.
    caseSensitive       If true (default), search is case sensitive.
Notes:
    Given a string, replaces the first occurrence of a search string with a replacement 
    string.
Return:
    Index into the buffer (relative to the start) from where the last replacement ended, 
    or -1 if no replacements were made.
==============================================================================
*sourcemod-ReplyToCommand*


Syntax:
	ReplyToCommand(client, const String:format[], any:...);
Usage:
    client              Client index, or 0 for server.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Reples to a message in a command. A client index of 0 will use PrintToServer(). If 
    the command was from the console, PrintToConsole() is used. If the command was from 
    chat, PrintToChat() is used.
Return:
    No return.
==============================================================================
*sourcemod-ReplyToTargetError*


Syntax:
	ReplyToTargetError(client, reason);
Usage:
    client              Client index, or 0 for server.
    reason              COMMAND_TARGET reason.
Notes:
    Replies to a client with a given message describing a targetting failure reason. 
    Note: The translation phrases are found in common.phrases.txt.
Return:
    No return.
==============================================================================
*sourcemod-ResetConVar*


Syntax:
	ResetConVar(Handle:convar, bool:replicate=false, bool:notify=false);
Usage:
    convar              Handle to the convar.
    replicate           If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients.
    notify              If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Resets the console variable to its default value. Note: The replicate and notify 
    params are ignored on the engines for Episode 2/Orange Box and Left 4 Dead. These 
    engines automatically replicates and notifies as soon as the convar is changed.
Return:
    No return.
==============================================================================
*sourcemod-ResetPack*


Syntax:
	ResetPack(Handle:pack, bool:clear=false);
Usage:
    pack                Handle to the data pack.
    clear               If true, clears the contained data.
Notes:
    Resets the position in a data pack.
Return:
    No return.
==============================================================================
*sourcemod-ResizeArray*


Syntax:
	ResizeArray(Handle:array, newsize);
Usage:
    array               Array Handle.
    newsize             New size.
Notes:
    Resizes an array.  If the size is smaller than the current size, the array is truncated.
Return:
    No return.
==============================================================================
*sourcemod-RoundFloat*


Syntax:
	RoundFloat(Float:value);
Usage:
    value               Floating point value to round.
Notes:
    Rounds a floating point number using the 'round to nearest' algorithm.
Return:
    The value rounded to the nearest integer.
==============================================================================
*sourcemod-RoundToCeil*


Syntax:
	RoundToCeil(Float:value);
Usage:
    value               Input value to be rounded.
Notes:
    Rounds a float to the next highest integer value.
Return:
    Rounded value.
==============================================================================
*sourcemod-RoundToFloor*


Syntax:
	RoundToFloor(Float:value);
Usage:
    value               Input value to be rounded.
Notes:
    Rounds a float to the next lowest integer value.
Return:
    Rounded value.
==============================================================================
*sourcemod-RoundToNearest*


Syntax:
	RoundToNearest(Float:value);
Usage:
    value               Input value to be rounded.
Notes:
    Standard IEEE rounding.
Return:
    Rounded value.
==============================================================================
*sourcemod-RoundToZero*


Syntax:
	RoundToZero(Float:value);
Usage:
    value               Input value to be rounded.
Notes:
    Rounds a float to the closest integer to zero.
Return:
    Rounded value.
==============================================================================
*sourcemod-RunAdminCacheChecks*


Syntax:
	RunAdminCacheChecks(client);
Usage:
    client              Client index.
Notes:
    Runs through the Core-defined admin authorization checks on a player. Has no effect 
    if the player is already an admin. Note: This function is based on the internal 
    cache only.
Return:
    True if access was changed, false if it did not.
==============================================================================
*sourcemod-ScaleVector*


Syntax:
	ScaleVector(Float:vec[3], Float:scale);
Usage:
    vec                 Vector.
    scale               Scale value.
Notes:
    Scales a vector.
Return:
    No return.
==============================================================================
*sourcemod-SDKCall*


Syntax:
	SDKCall(Handle:call, any:...);
Usage:
    call                SDKCall Handle.
    ...                 Call Parameters.
Notes:
    Calls an SDK function with the given parameters. If the call type is Entity or Player, 
    the index MUST ALWAYS be the FIRST parameter passed. If the call type is GameRules, 
    then nothing special needs to be passed. If the return value is a Vector or QAngles, 
    the SECOND parameter must be a Float[3]. If the return value is a string, the THIRD 
    parameter must be a String buffer, and the FOURTH parameter must be the maximum 
    length. All parameters must be passed after the above is followed.  Failure to follow 
    these rules will result in crashes or wildly unexpected behavior! If the return 
    value is a float or integer, the return value will be this value. If the return 
    value is a CBaseEntity, CBasePlayer, or edict, the return value will always be the 
    entity index, or -1 for NULL.
Return:
    Simple return value, if any.
==============================================================================
*sourcemod-SendConVarValue*


Syntax:
	SendConVarValue(client, Handle:convar, const String:value[]);
Usage:
    client              Client index
    convar              ConVar handle
    value               String value to send
Notes:
    Replicates a convar value to a specific client. This does not change the actual convar 
    value.
Return:
    True on success, false on failure
==============================================================================
*sourcemod-SendPanelToClient*


Syntax:
	SendPanelToClient(Handle:panel, client, MenuHandler:handler, time);
Usage:
    panel               A MenuPanel Handle.
    client              A client to draw to.
    handler             The MenuHandler function to catch actions with.
    time                Time to hold the menu for.
Notes:
    Sends a panel to a client.  Unlike full menus, the handler function will only receive 
    the following actions, both of which will have INVALID_HANDLE for a menu, and the 
    client as param1. MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel 
    (param2 will be the reason) Also, if the menu fails to display, no callbacks will 
    be called.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-ServerCommand*


Syntax:
	ServerCommand(const String:format[], any:...);
Usage:
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Executes a server command as if it were on the server console (or RCON)
Return:
    No return.
==============================================================================
*sourcemod-ServerExecute*


Syntax:
	ServerExecute();
Usage:
Notes:
    Executes every command in the server's command buffer, rather than once per frame.
Return:
    No return.
==============================================================================
*sourcemod-SetAdmGroupAddFlag*


Syntax:
	SetAdmGroupAddFlag(GroupId:id, AdminFlag:flag, bool:enabled);
Usage:
    id                  Group id.
    flag                Admin flag to toggle.
    enabled             True to set the flag, false to unset/disable.
Notes:
    Adds or removes a flag from a group's flag set.
Return:
    No return.
==============================================================================
*sourcemod-SetAdmGroupImmuneFrom*


Syntax:
	SetAdmGroupImmuneFrom(GroupId:id, GroupId:other_id);
Usage:
    id                  Group id.
    other_id            Group id to receive immunity to.
Notes:
    Adds immunity to a specific group.
Return:
    No return.
==============================================================================
*sourcemod-SetAdmGroupImmunityLevel*


Syntax:
	SetAdmGroupImmunityLevel(GroupId:gid, level);
Usage:
    gid                 Group Id.
    level               Immunity level value.
Notes:
    Sets a group's immunity level.
Return:
    Old immunity level value.
==============================================================================
*sourcemod-SetAdminFlag*


Syntax:
	SetAdminFlag(AdminId:id, AdminFlag:flag, bool:enabled);
Usage:
    id                  AdminId index of the admin.
    flag                Admin flag to use.
    enabled             True to enable, false to disable.
Notes:
    Sets whether or not a flag is enabled on an admin.
Return:
    No return.
==============================================================================
*sourcemod-SetAdminImmunityLevel*


Syntax:
	SetAdminImmunityLevel(AdminId:id, level);
Usage:
    id                  Admin Id.
    level               Immunity level value.
Notes:
    Sets an admin's immunity level.
Return:
    Old immunity level value.
==============================================================================
*sourcemod-SetAdminPassword*


Syntax:
	SetAdminPassword(AdminId:id, const String:password[]);
Usage:
    id                  AdminId index of the admin.
    passwd              String containing the password.
Notes:
    Sets a password on an admin.
Return:
    No return.
==============================================================================
*sourcemod-SetArrayArray*


Syntax:
	SetArrayArray(Handle:array, index, const any:values[], size=-1);
Usage:
    array               Array Handle.
    index               Index in the array.
    buffer              Array to copy.
    size                If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used.
Notes:
    Sets an array of cells in an array.
Return:
    Number of cells copied.
==============================================================================
*sourcemod-SetArrayCell*


Syntax:
	SetArrayCell(Handle:array, index, any:value, block=0, bool:asChar=false);
Usage:
    array               Array Handle.
    index               Index in the array.
    value               Cell value to set.
    block               Optionally specify which block to write to (useful if the blocksize > 0).
    asChar              Optionally set as a byte instead of a cell.
Notes:
    Sets a cell value in an array.
Return:
    No return.
==============================================================================
*sourcemod-SetArrayString*


Syntax:
	SetArrayString(Handle:array, index, const String:buffer[]);
Usage:
    array               Array Handle.
    index               Index in the array.
    value               String value to set.
Notes:
    Sets a string value in an array.
Return:
    Number of characters copied.
==============================================================================
*sourcemod-SetClientCookie*


Syntax:
	SetClientCookie(client, Handle:cookie, const String:value[]);
Usage:
    client              Client index.
    cookie              Client preference cookie handle.
    value               String value to set.
Notes:
    Set the value of a Client preference cookie.
Return:
    No return.
==============================================================================
*sourcemod-SetClientInfo*


Syntax:
	SetClientInfo(client, const String:key[], const String:value[]);
Usage:
    client              Player's index.
    key                 Key string.
    value               Value string.
Notes:
    Sets values to client info buffer keys and notifies the engine of the change. The 
    change does not get propogated to mods until the next frame.
Return:
    No return.
==============================================================================
*sourcemod-SetClientListening*


Syntax:
	SetClientListening(iReceiver, iSender, bool:bListen);
Usage:
    iReceiver           The listener index.
    iSender             The sender index.
Notes:
    Set the receiver ability to listen to the sender.
Return:
    True if successful otherwise false.
==============================================================================
*sourcemod-SetClientListeningFlags*


Syntax:
	SetClientListeningFlags(client, flags);
Usage:
    client              The client index
    flags               The voice flags
Notes:
    Set the client listening flags.
Return:
    No return.
==============================================================================
*sourcemod-SetClientViewEntity*


Syntax:
	SetClientViewEntity(client, entity);
Usage:
    client              Client index.
    entity              Entity index.
Notes:
    Sets a client's 'viewing entity.'
Return:
    No return.
==============================================================================
*sourcemod-SetCmdReplySource*


Syntax:
	SetCmdReplySource(ReplySource:source);
Usage:
    source              New ReplySource value.
Notes:
    Sets the current reply source of a command. Only use this if you know what you are 
    doing.  You should save the old value and restore it once you are done.
Return:
    Old ReplySource value.
==============================================================================
*sourcemod-SetCommandFlags*


Syntax:
	SetCommandFlags(const String:name[], flags);
Usage:
    name                Name of the command.
    flags               A bitstring containing the FCVAR_* flags to enable.
Notes:
    Sets the bitstring of flags of a command.
Return:
    True on success, otherwise false.
==============================================================================
*sourcemod-SetConVarBool*


Syntax:
	SetConVarBool(Handle:convar, bool:value, bool:replicate=false, bool:notify=false);
Usage:
    convar              Handle to the convar.
    value               New boolean value.
    replicate           If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients.
    notify              If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the boolean value of a console variable. Note: The replicate and notify params 
    are ignored on the engines for Episode 2/Orange Box and Left 4 Dead. These engines 
    automatically replicates and notifies as soon as the convar is changed.
Return:
    No return.
==============================================================================
*sourcemod-SetConVarBounds*


Syntax:
	SetConVarBounds(Handle:convar, ConVarBounds:type, bool:set, Float:value=0.0);
Usage:
    convar              Handle to the convar.
    type                Type of bound to set, ConVarBound_Lower or ConVarBound_Upper
    set                 If set to true, convar will use specified bound. If false, bound will be removed.
    value               Floating point value to use as the specified bound.
Notes:
    Sets the specified bound of a console variable.
Return:
    No return.
==============================================================================
*sourcemod-SetConVarFlags*


Syntax:
	SetConVarFlags(Handle:convar, flags);
Usage:
    convar              Handle to the convar.
    flags               A bitstring containing the FCVAR_* flags to enable.
Notes:
    Sets the bitstring of flags on a console variable.
Return:
    No return.
==============================================================================
*sourcemod-SetConVarFloat*


Syntax:
	SetConVarFloat(Handle:convar, Float:value, bool:replicate=false, bool:notify=false);
Usage:
    convar              Handle to the convar.
    value               New floating point value.
    replicate           If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients.
    notify              If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the floating point value of a console variable. Note: The replicate and notify 
    params are ignored on the engines for Episode 2/Orange Box and Left 4 Dead. These 
    engines automatically replicates and notifies as soon as the convar is changed.
Return:
    No return.
==============================================================================
*sourcemod-SetConVarInt*


Syntax:
	SetConVarInt(Handle:convar, value, bool:replicate=false, bool:notify=false);
Usage:
    convar              Handle to the convar.
    value               New integer value.
    replicate           If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients.
    notify              If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the integer value of a console variable. Note: The replicate and notify params 
    are ignored on the engines for Episode 2/Orange Box and Left 4 Dead. These engines 
    automatically replicates and notifies as soon as the convar is changed.
Return:
    No return.
==============================================================================
*sourcemod-SetConVarString*


Syntax:
	SetConVarString(Handle:convar, const String:value[], bool:replicate=false, bool:notify=false);
Usage:
    convar              Handle to the convar.
    value               New string value.
    replicate           If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients.
    notify              If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the string value of a console variable. Note: The replicate and notify params 
    are ignored on the engines for Episode 2/Orange Box and Left 4 Dead. These engines 
    automatically replicates and notifies as soon as the convar is changed.
Return:
    No return.
==============================================================================
*sourcemod-SetCookieMenuItem*


Syntax:
	SetCookieMenuItem(CookieMenuHandler:handler, any:info, const String:display[]);
Usage:
    handler             A MenuHandler callback function.
    info                Data to pass to the callback.
    display             Text to show on the menu.
Notes:
    Adds a new item to the client cookie settings menu. Note: This only adds the top 
    level menu item. You need to handle any submenus from the callback.
Return:
    No return.
==============================================================================
*sourcemod-SetCookiePrefabMenu*


Syntax:
	SetCookiePrefabMenu(Handle:cookie, CookieMenu:type, const String:display[], CookieMenuHandler:handler=CookieMenuHandler:-1, info=0);
Usage:
    cookie              Client preference cookie handle.
    type                A CookieMenu prefab menu type.
    display             Text to show on the menu.
    handler             Optional handler callback for translations and output on selection
    info                Info data to pass to the callback.
Notes:
    Add a new prefab item to the client cookie settings menu. Note: This handles everything 
    automatically and does not require a callback
Return:
    No return.
==============================================================================
*sourcemod-SetEdictFlags*


Syntax:
	SetEdictFlags(edict, flags);
Usage:
    edict               Index of the entity.
    flags               Flags to set.
Notes:
    Sets the flags on an edict.  These are not the same as entity flags.
Return:
    No return.
==============================================================================
*sourcemod-SetEntData*


Syntax:
	SetEntData(entity, offset, any:value, size=4, bool:changeState=false);
Usage:
    entity              Edict index.
    offset              Offset to use.
    size                Number of bytes to write (valid values are 1, 2, or 4).
    changeState         If true, change will be sent over the network.
Notes:
    Peeks into an entity's object data and sets the integer value at the given offset.
Return:
    Value at the given memory location. 0
==============================================================================
*sourcemod-SetEntDataArray*


Syntax:
	SetEntDataArray(entity, offset, const array[], arraySize, dataSize=4, bool:changeState=false);
Usage:
    entity              Entity index.
    offset              Offset to use.
    array               Array of values to copy.
    arraySize           Number of values to copy.
    dataSize            Size of each value in bytes (1, 2, or 4).
    changeState         True to set the network state as changed; false otherwise.
Notes:
    Copies an array of cells to an entity at a given offset.
Return:
    No return.
==============================================================================
*sourcemod-SetEntDataEnt2*


Syntax:
	SetEntDataEnt2(entity, offset, other, bool:changeState=false);
Usage:
    entity              Edict index.
    offset              Offset to use.
    other               Entity index to set, or -1 to clear.
    changeState         If true, change will be sent over the network.
Notes:
    Peeks into an entity's object data and sets the entity index at the given offset. 
    Note: This will only work on offsets that are stored as 'entity handles' (which 
    usually looks like m_h* in properties).  These are not SourceMod Handles, but internal 
    Source structures.
Return:
    No return.
==============================================================================
*sourcemod-SetEntDataFloat*


Syntax:
	SetEntDataFloat(entity, offset, Float:value, bool:changeState=false);
Usage:
    entity              Edict index.
    offset              Offset to use.
    changeState         If true, change will be sent over the network.
Notes:
    Peeks into an entity's object data and sets the integer value at the given offset.
Return:
    Value at the given memory location. 0
==============================================================================
*sourcemod-SetEntDataString*


Syntax:
	SetEntDataString(entity, offset, const String:buffer[], maxlen, bool:changeState=false);
Usage:
    entity              Edict index.
    offset              Offset to use.
    buffer              String to set.
    maxlen              Maximum length of bytes to write.
    changeState         If true, change will be sent over the network.
Notes:
    Peeks into an entity's object data and sets the string at the given offset.
Return:
    Number of non-null bytes written.
==============================================================================
*sourcemod-SetEntDataVector*


Syntax:
	SetEntDataVector(entity, offset, const Float:vec[3], bool:changeState=false);
Usage:
    entity              Edict index.
    offset              Offset to use.
    vec                 Vector to set.
    changeState         If true, change will be sent over the network.
Notes:
    Peeks into an entity's object data and sets the vector at the given offset.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityGravity*


Syntax:
	SetEntityGravity(entity, Float:amount);
Usage:
    entity              Entity index.
    amount              Gravity to set (default = 1.0, half = 0.5, double = 2.0).
Notes:
    Sets an entity's gravity.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityHealth*


Syntax:
	SetEntityHealth(entity, amount);
Usage:
    entity              Entity index.
    amount              Health amount.
Notes:
    Sets an entity's health
Return:
    No return.
==============================================================================
*sourcemod-SetEntityModel*


Syntax:
	SetEntityModel(entity, const String:model[]);
Usage:
    entity              Entity index.
    model               Model name.
Notes:
    Sets the model to a given entity.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityMoveType*


Syntax:
	SetEntityMoveType(entity, MoveType:mt);
Usage:
    entity              Entity index.
    mt                  Movetype, see enum above.
Notes:
    Sets an entity's movetype.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityRenderColor*


Syntax:
	SetEntityRenderColor(entity, r=255, g=255, b=255, a=255);
Usage:
    entity              Entity index
    r                   Amount of red (0-255)
    g                   Amount of green (0-255)
    b                   Amount of blue (0-255)
    a                   Amount of alpha (0-255)
Notes:
    Sets an entity's color.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityRenderFx*


Syntax:
	SetEntityRenderFx(entity, RenderFx:fx);
Usage:
    entity              Entity index.
    fx                  RenderFx value.
Notes:
    Sets an entity's render Fx.
Return:
    No return.
==============================================================================
*sourcemod-SetEntityRenderMode*


Syntax:
	SetEntityRenderMode(entity, RenderMode:mode);
Usage:
    entity              Entity index.
    mode                RenderMode value.
Notes:
    Sets an entity's render mode.
Return:
    No return.
==============================================================================
*sourcemod-SetEntProp*


Syntax:
	SetEntProp(entity, PropType:type, const String:prop[], any:value, size=4);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    size                Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails.
Notes:
    Sets an integer value in an entity's property. This function is considered safer 
    and more robust over SetEntData, because it performs strict offset checking and 
    typing rules.
Return:
    No return.
==============================================================================
*sourcemod-SetEntPropEnt*


Syntax:
	SetEntPropEnt(entity, PropType:type, const String:prop[], other);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    other               Entity index to set, or -1 to unset.
Notes:
    Sets an entity index in an entity's property. This function is considered safer and 
    more robust over SetEntDataEnt*, because it performs strict offset checking and 
    typing rules.
Return:
    No return.
==============================================================================
*sourcemod-SetEntPropFloat*


Syntax:
	SetEntPropFloat(entity, PropType:type, const String:prop[], Float:value);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    value               Value to set.
Notes:
    Sets a float value in an entity's property. This function is considered safer and 
    more robust over SetEntDataFloat, because it performs strict offset checking and 
    typing rules.
Return:
    No return.
==============================================================================
*sourcemod-SetEntPropString*


Syntax:
	SetEntPropString(entity, PropType:type, const String:prop[], const String:buffer[]);
Usage:
    entity              Edict index.
    type                Property type.
    prop                Property to use.
    buffer              String to set.
Notes:
    Sets a network property as a string. This cannot set property fields of type PropField_String_T 
    (such as 'm_target'). To set such fields, you should use DispatchKeyValue() from 
    SDKTools.
Return:
    Number of non-null bytes written.
==============================================================================
*sourcemod-SetEntPropVector*


Syntax:
	SetEntPropVector(entity, PropType:type, const String:prop[], const Float:vec[3]);
Usage:
    entity              Entity/edict index.
    type                Property type.
    prop                Property name.
    vec                 Vector to set.
Notes:
    Sets a vector of floats in an entity, given a named network property. This function 
    is considered safer and more robust over SetEntDataVector, because it performs strict 
    offset checking and typing rules.
Return:
    No return.
==============================================================================
*sourcemod-SetEventBool*


Syntax:
	SetEventBool(Handle:event, const String:key[], bool:value);
Usage:
    event               Handle to the event.
    key                 Name of event key.
    value               New boolean value.
Notes:
    Sets the boolean value of a game event's key.
Return:
    No return.
==============================================================================
*sourcemod-SetEventFloat*


Syntax:
	SetEventFloat(Handle:event, const String:key[], Float:value);
Usage:
    event               Handle to the event.
    key                 Name of event key.
    value               New floating point value.
Notes:
    Sets the floating point value of a game event's key.
Return:
    No return.
==============================================================================
*sourcemod-SetEventInt*


Syntax:
	SetEventInt(Handle:event, const String:key[], value);
Usage:
    event               Handle to the event.
    key                 Name of event key.
    value               New integer value.
Notes:
    Sets the integer value of a game event's key. Integer value refers to anything that 
    can be reduced to an integer. The various size specifiers, such as 'byte' and 'short' 
    are still integers, and only refer to how much data will actually be sent over the 
    network (if applicable).
Return:
    No return.
==============================================================================
*sourcemod-SetEventString*


Syntax:
	SetEventString(Handle:event, const String:key[], const String:value[]);
Usage:
    event               Handle to the event.
    key                 Name of event key.
    value               New string value.
Notes:
    Sets the string value of a game event's key.
Return:
    No return.
==============================================================================
*sourcemod-SetFailState*


Syntax:
	SetFailState(const String:string[], any:...);
Usage:
    string              Format specifier string.
    ...                 Formatting arguments.
Notes:
    Causes the plugin to enter a failed state.  An error will be thrown and the plugin 
    will be paused until it is unloaded or reloaded. For backwards compatibility, if 
    no extra arguments are passed, no formatting is applied.  If one or more additional 
    arguments is passed, the string is formatted using Format().  If any errors are 
    encountered during formatting, both the format specifier string and an additional 
    error message are written. This function does not return, and no further code in 
    the plugin is executed.
Return:
    No return.
==============================================================================
*sourcemod-SetFakeClientConVar*


Syntax:
	SetFakeClientConVar(client, const String:cvar[], const String:value[]);
Usage:
    client              Client index.
    cvar                ConVar name.
    value               ConVar value.
Notes:
    Sets a convar value on a fake client.
Return:
    No return.
==============================================================================
*sourcemod-SetGlobalTransTarget*


Syntax:
	SetGlobalTransTarget(client);
Usage:
    client              Client index or LANG_SERVER.
Notes:
    Sets the global language target.  This is useful for creating functions that will 
    be compatible with the %t format specifier.  Note that invalid indexes can be specified 
    but the error will occur during translation, not during this function call.
Return:
    No return.
==============================================================================
*sourcemod-SetHudTextParams*


Syntax:
	SetHudTextParams(Float:x, Float:y, Float:holdTime, r, g, b, a, effect = 0, Float:fxTime=6.0, Float:fadeIn=0.1, Float:fadeOut=0.2);
Usage:
    x                   x coordinate, from 0 to 1.  -1.0 is the center.
    y                   y coordinate, from 0 to 1.  -1.0 is the center.
    holdTime            Number of seconds to hold the text.
    r                   Red color value.
    g                   Green color value.
    b                   Blue color value.
    a                   Alpha transparency value.
    effect              0/1 causes the text to fade in and fade out. 2 causes the text to flash[?].
    fxTime              Duration of chosen effect (may not apply to all effects).
    fadeIn              Number of seconds to spend fading in.
    fadeOut             Number of seconds to spend fading out.
Notes:
    Sets the HUD parameters for drawing text.  These parameters are stored globally, 
    although nothing other than this function and SetHudTextParamsEx modify them. You 
    must call this function before drawing text.  If you are drawing text to multiple 
    clients, you can set the parameters once, since they won't be modified.  However, 
    as soon as you pass control back to other plugins, you must reset the parameters 
    next time you draw.
Return:
    No return.
==============================================================================
*sourcemod-SetHudTextParamsEx*


Syntax:
	SetHudTextParamsEx(Float:x, Float:y, Float:holdTime, color1[4], color2[4]={255,255,255,0}, effect = 0, Float:fxTime=6.0, Float:fadeIn=0.1, Float:fadeOut=0.2);
Usage:
    x                   x coordinate, from 0 to 1.  -1.0 is the center.
    y                   y coordinate, from 0 to 1.  -1.0 is the center.
    holdTime            Number of seconds to hold the text.
    color1              First color set, array values being [red, green, blue, alpha]
    color2              Second color set, array values being [red, green, blue, alpha]
    effect              0/1 causes the text to fade in and fade out. 2 causes the text to flash[?].
    fxTime              Duration of chosen effect (may not apply to all effects).
    fadeIn              Number of seconds to spend fading in.
    fadeOut             Number of seconds to spend fading out.
Notes:
    Sets the HUD parameters for drawing text.  These parameters are stored globally, 
    although nothing other than this function and SetHudTextParams modify them. This 
    is the same as SetHudTextParams(), except it lets you set the alternate color for 
    when effects require it.
Return:
    No return.
==============================================================================
*sourcemod-SetLightStyle*


Syntax:
	SetLightStyle(style, const String:value[]);
Usage:
    style               Light style (from 0 to MAX_LIGHTSTYLES-1)
    value               Light value string (see world.cpp/light.cpp in dlls)
Notes:
    Sets a light style.
Return:
    No return.
==============================================================================
*sourcemod-SetMapListCompatBind*


Syntax:
	SetMapListCompatBind(const String:name[], const String:file[]);
Usage:
    name                Configuration name that would be used with ReadMapList().
    file                Default file to use.
Notes:
    Makes a compatibility binding for map lists.  For example, if a function previously 
    used 'clam.cfg' for map lists, this function will insert a 'fake' binding to 'clam.cfg' 
    that will be overridden if it's in the maplists.cfg file.
Return:
    No return.
==============================================================================
*sourcemod-SetMenuExitBackButton*


Syntax:
	SetMenuExitBackButton(Handle:menu, bool:button);
Usage:
    menu                Menu Handle.
    button              True to enable the button, false to remove it.
Notes:
    Sets whether or not the menu has an 'exit back' button. By default, menus do not 
    have an exit back button. Exit Back buttons appear as 'Back' on page 1 of paginated 
    menus and have functionality defined by the user in MenuEnd_ExitBack.
Return:
    
==============================================================================
*sourcemod-SetMenuExitButton*


Syntax:
	SetMenuExitButton(Handle:menu, bool:button);
Usage:
    menu                Menu Handle.
    button              True to enable the button, false to remove it.
Notes:
    Sets whether or not the menu has an exit button.  By default, paginated menus have 
    an exit button. If a menu's pagination is changed to MENU_NO_PAGINATION, and the 
    pagination was previously a different value, then the Exit button status is changed 
    to false.  It must be explicitly re-enabled afterwards. If a non-paginated menu 
    has an exit button, then at most 9 items will be displayed.
Return:
    True if allowed; false on failure.
==============================================================================
*sourcemod-SetMenuOptionFlags*


Syntax:
	SetMenuOptionFlags(Handle:menu, flags);
Usage:
    menu                Menu Handle.
    flags               A new bitstring of MENUFLAG bits.
Notes:
    Sets a menu's option flags. If a certain bit is not supported, it will be stripped 
    before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() 
    for information on Exit Back buttons.
Return:
    No return.
==============================================================================
*sourcemod-SetMenuPagination*


Syntax:
	SetMenuPagination(Handle:menu, itemsPerPage);
Usage:
    menu                Handle to the menu.
    itemsPerPage        Number of items per page, or MENU_NO_PAGINATION.
Notes:
    Sets whether the menu should be paginated or not. If itemsPerPage is MENU_NO_PAGINATION, 
    and the exit button flag is set, then the exit button flag is removed.  It can be 
    re-applied if desired.
Return:
    True on success, false if pagination is too high or low.
==============================================================================
*sourcemod-SetMenuTitle*


Syntax:
	SetMenuTitle(Handle:menu, const String:fmt[], any:...);
Usage:
    menu                Menu Handle.
    fmt                 Message string format
    ...                 Message string arguments.
Notes:
    Sets the menu's default title/instruction message.
Return:
    No return.
==============================================================================
*sourcemod-SetNativeArray*


Syntax:
	SetNativeArray(param, const any:local[], size);
Usage:
    param               Parameter number, starting from 1.
    local               Local array to copy from.
    size                Size of the local array to copy.
Notes:
    Copies a local array into a native parameter array (always by reference).
Return:
    SP_ERROR_NONE on success, anything else on failure.
==============================================================================
*sourcemod-SetNativeCellRef*


Syntax:
	SetNativeCellRef(param, any:value);
Usage:
    param               Parameter number, starting from 1.
    value               Cell value at the parameter number to set by reference.
Notes:
    Sets a cell from a native parameter, by reference.
Return:
    No return.
==============================================================================
*sourcemod-SetNativeString*


Syntax:
	SetNativeString(param, const String:source[], maxlength, bool:utf8=true, &bytes=0);
Usage:
    param               Parameter number, starting from 1.
    source              Source string to use.
    maxlength           Maximum number of bytes to write.
    utf8                If false, string will not be written with UTF8 safety.
    bytes               Optionally store the number of bytes written.
Notes:
    Sets a string in a native parameter.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
==============================================================================
*sourcemod-SetNextMap*


Syntax:
	SetNextMap(const String:map[]);
Usage:
    map                 Next map to set.
Notes:
    Sets SourceMod's internal nextmap. Equivalent to changing sm_nextmap but with an 
    added validity check.
Return:
    True if the nextmap was set, false if map was invalid.
==============================================================================
*sourcemod-SetPackPosition*


Syntax:
	SetPackPosition(Handle:pack, position);
Usage:
    pack                Handle to the data pack.
    position            New position to set.
Notes:
    Sets the read/write position in a data pack.
Return:
    No return.
==============================================================================
*sourcemod-SetPanelCurrentKey*


Syntax:
	SetPanelCurrentKey(Handle:panel, key);
Usage:
    panel               A MenuPanel Handle.
    key                 Key that is greater or equal to GetPanelCurrentKey().
Notes:
    Sets the next key position.  This cannot be used to traverse backwards.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-SetPanelKeys*


Syntax:
	SetPanelKeys(Handle:panel, keys);
Usage:
    keys                An integer where each bit N allows key N+1 to be selected.  If no keys are selectable, then key 0 (bit 9) is automatically set.
Notes:
    Sets the selectable key map of a panel.  This is not supported by all styles (only 
    by Radio, as of this writing).
Return:
    True if supported, false otherwise.
==============================================================================
*sourcemod-SetPanelTitle*


Syntax:
	SetPanelTitle(Handle:panel, const String:text[], bool:onlyIfEmpty=false);
Usage:
    panel               A MenuPanel Handle.
    title               Text to set as the title.
    onlyIfEmpty         If true, the title will only be set if no title is set.
Notes:
    Sets the panel's title.
Return:
    No return.
==============================================================================
*sourcemod-SetRandomSeed*


Syntax:
	SetRandomSeed(seed);
Usage:
    seed                Seed value.
Notes:
    Sets the seed value for the global Half-Life 2 Random Stream.
Return:
    No return.
==============================================================================
*sourcemod-SetStringTableData*


Syntax:
	SetStringTableData(tableidx, stringIdx, const String:userdata[], length);
Usage:
    tableidx            A string table index.
    stringidx           A string index.
    userdata            User data string that will be set.
    length              Length of user data string. This should include the null terminator.
Notes:
    Sets the user data associated with a given string index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
==============================================================================
*sourcemod-SetTeamScore*


Syntax:
	SetTeamScore(index, value);
Usage:
    index               Team index.
    value               New score value.
Notes:
    Sets the score of a team based on a team index. Note: This native should not be called 
    before OnMapStart.
Return:
    Score.
==============================================================================
*sourcemod-SetTrieArray*


Syntax:
	SetTrieArray(Handle:trie, const String:key[], const any:array[], num_items, bool:replace=true);
Usage:
    trie                Trie Handle.
    key                 Key string.
    array               Array to store.
    num_items           Number of items in the array.
    replace             If false, operation will fail if the key is already set.
Notes:
    Sets an array value in a Trie, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-SetTrieString*


Syntax:
	SetTrieString(Handle:trie, const String:key[], const String:value[], bool:replace=true);
Usage:
    trie                Trie Handle.
    key                 Key string.
    array               Array to store.
    num_items           Number of items in the array.
    replace             If false, operation will fail if the key is already set.
Notes:
    Sets a string value in a Trie, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-SetTrieValue*


Syntax:
	SetTrieValue(Handle:trie, const String:key[], any:value, bool:replace=true);
Usage:
    trie                Trie Handle.
    key                 Key string.
    value               Value to store at this key.
    replace             If false, operation will fail if the key is already set.
Notes:
    Sets a value in a Trie, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-SetUserAdmin*


Syntax:
	SetUserAdmin(client, AdminId:id, bool:temp=false);
Usage:
    client              Player's index.
    id                  AdminId to set.  INVALID_ADMIN_ID removes admin permissions.
    temp                True if the id should be freed on disconnect.
Notes:
    Sets a client's AdminId.
Return:
    No return.
==============================================================================
*sourcemod-SetUserFlagBits*


Syntax:
	SetUserFlagBits(client, flags);
Usage:
    client              Player's index.
    flags               Bitstring of flags to set on client.
Notes:
    Sets access flags on a client using bits instead of flags.  If the client is not 
    an admin, and flags not 0, a temporary, anonymous AdminId is given.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantBool*


Syntax:
	SetVariantBool(bool:val);
Usage:
    val                 Input value.
Notes:
    Sets a bool value in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantColor*


Syntax:
	SetVariantColor(const color[4]);
Usage:
    color               Input color.
Notes:
    Sets a color in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantEntity*


Syntax:
	SetVariantEntity(entity);
Usage:
    entity              Entity index.
Notes:
    Sets an entity in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantFloat*


Syntax:
	SetVariantFloat(Float:val);
Usage:
    val                 Input value.
Notes:
    Sets a floating point value in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantInt*


Syntax:
	SetVariantInt(val);
Usage:
    val                 Input value.
Notes:
    Sets an integer value in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantPosVector3D*


Syntax:
	SetVariantPosVector3D(const Float:vec[3]);
Usage:
    vec                 Input position vector.
Notes:
    Sets a 3D position vector in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantString*


Syntax:
	SetVariantString(const String:str[]);
Usage:
    str                 Input string.
Notes:
    Sets a string in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVariantVector3D*


Syntax:
	SetVariantVector3D(const Float:vec[3]);
Usage:
    vec                 Input vector.
Notes:
    Sets a 3D vector in the global variant object.
Return:
    No return.
==============================================================================
*sourcemod-SetVoteResultCallback*


Syntax:
	SetVoteResultCallback(Handle:menu, VoteHandler:callback);
Usage:
    menu                Menu Handle.
    callback            Callback function.
Notes:
    Sets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd 
    will not be called.
Return:
    No return.
==============================================================================
*sourcemod-ShiftArrayUp*


Syntax:
	ShiftArrayUp(Handle:array, index);
Usage:
    array               Array Handle.
    index               Index in the array to shift up from.
Notes:
    Shifts an array up.  All array contents after and including the given index are shifted 
    up by one, and the given index is then 'free.' After shifting, the contents of the 
    given index is undefined.
Return:
    No return.
==============================================================================
*sourcemod-ShowActivity*


Syntax:
	ShowActivity(client, const String:format[], any:...);
Usage:
    client              Client index doing the action, or 0 for server.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Displays usage of an admin command to users depending on the setting of the sm_show_activity 
    cvar. This version does not display a message to the originating client if used 
    from chat triggers or menus.  If manual replies are used for these cases, then this 
    function will suffice.  Otherwise, ShowActivity2() is slightly more useful.
Return:
    No return.
==============================================================================
*sourcemod-ShowActivity2*


Syntax:
	ShowActivity2(client, const String:tag[], const String:format[], any:...);
Usage:
    client              Client index doing the action, or 0 for server.
    tag                 Tag to prepend to the message.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Displays usage of an admin command to users depending on the setting of the sm_show_activity 
    cvar.  All users receive a message in their chat text, except for the originating 
    client, who receives the message based on the current ReplySource.
Return:
    No return.
==============================================================================
*sourcemod-ShowActivityEx*


Syntax:
	ShowActivityEx(client, const String:tag[], const String:format[], any:...);
Usage:
    client              Client index doing the action, or 0 for server.
    tag                 Tag to display with.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Same as ShowActivity(), except the tag parameter is used instead of '[SM] ' (note 
    that you must supply any spacing).
Return:
    No return.
==============================================================================
*sourcemod-ShowCookieMenu*


Syntax:
	ShowCookieMenu(client);
Usage:
    client              Client index.
Notes:
    Displays the settings menu to a client.
Return:
    No return.
==============================================================================
*sourcemod-ShowHudText*


Syntax:
	ShowHudText(client, channel, const String:message[], any:...);
Usage:
    client              Client index to send the message to.
    channel             A channel number. If -1, then a channel will automatically be selected based on the least-recently-used channel.  If the channel is any other number, it will be modulo'd with the channel count to get a final channel number.
    message             Message text or formatting rules.
    ...                 Message formatting parameters.
Notes:
    Shows a HUD message to a client on the given channel. As of this writing, only TF, 
    HL2MP, and SourceForts support HUD Text.
Return:
    -1 on failure (lack of mod support). Any other return value is the channel number 
    that was used to render the text.
==============================================================================
*sourcemod-ShowMOTDPanel*


Syntax:
	ShowMOTDPanel(client, const String:title[], const String:msg[], type=MOTDPANEL_TYPE_INDEX);
Usage:
    client              Client index.
    title               Title of the panel (printed on the top border of the window).
    msg                 Contents of the panel, it can be treated as an url, filename or plain text depending on the type parameter (WARNING: msg has to be 192 bytes maximum!)
    type                Determines the way to treat the message body of the panel.
Notes:
    Shows a MOTD panel to a specific client.
Return:
    No return.
==============================================================================
*sourcemod-ShowSyncHudText*


Syntax:
	ShowSyncHudText(client, Handle:sync, const String:message[], any:...);
Usage:
    client              Client index to send the message to.
    sync                Synchronization object.
    message             Message text or formatting rules.
    ...                 Message formatting parameters.
Notes:
    Shows a synchronized HUD message to a client. As of this writing, only TF, HL2MP, 
    and SourceForts support HUD Text.
Return:
    -1 on failure, anything else on success. This function fails if the mod does not 
    support it.
==============================================================================
*sourcemod-ShowVGUIPanel*


Syntax:
	ShowVGUIPanel(client, const String:name[], Handle:Kv=INVALID_HANDLE, bool:show=true);
Usage:
    client              Client index.
    name                Panel type name (Check viewport_panel_names.h to see a list of some panel names).
    Kv                  KeyValues handle with all the data for the panel setup (Depends on the panel type and may be unused).
    show                True to show the panel, or false to remove it from the client screen.
Notes:
    Shows a VGUI panel to a specific client.
Return:
    No return.
==============================================================================
*sourcemod-SimpleRegexMatch*


Syntax:
	SimpleRegexMatch(const String:str[], const String:pattern[], flags = 0, String:error[]='', maxLen = 0);
Usage:
    str                 The string to check.
    pattern             The regular expression pattern.
    flags               General flags for the regular expression.
    error               Error message, if applicable.
    maxLen              Maximum length of the error buffer.
Notes:
    Matches a string against a regular expression pattern.
Return:
    Number of substrings found or -1 on failure.
==============================================================================
*sourcemod-Sine*


Syntax:
	Sine(Float:value);
Usage:
    value               Input value in radians.
Notes:
    Returns the sine of the argument.
Return:
    sin(value).
==============================================================================
*sourcemod-SlapPlayer*


Syntax:
	SlapPlayer(client, health=5, bool:sound=true);
Usage:
    client              Client index.
    health              Health to subtract.
    sound               False to disable the sound effects.
Notes:
    Slaps a player in a random direction.
Return:
    No return.
==============================================================================
*sourcemod-SMC_CreateParser*


Syntax:
	SMC_CreateParser();
Usage:
Notes:
    Creates a new SMC file format parser.  This is used to set parse hooks.
Return:
    A new Handle to an SMC Parse structure.
==============================================================================
*sourcemod-SMC_EndSection*


Syntax:
	SMC_EndSection(Handle:smc);
Usage:
    smc                 The SMC Parse Handle.
Notes:
    Called when the parser finds the end of the current section.
Return:
    An SMCResult action to take.
==============================================================================
*sourcemod-SMC_GetErrorString*


Syntax:
	SMC_GetErrorString(SMCError:error, String:buffer[], buf_max);
Usage:
    error               The SMCParseError code.
    buffer              A string buffer for the error (contents undefined on failure).
    buf_max             The maximum size of the buffer.
Notes:
    Gets an error string for an SMCError code.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-SMC_KeyValue*


Syntax:
	SMC_KeyValue(Handle:smc, const String:key[], const String:value[], bool:key_quotes, bool:value_quotes);
Usage:
    smc                 The SMC Parse Handle.
    key                 String containing key name.
    value               String containing value name.
    key_quotes          Whether or not the key was enclosed in quotes.
    value_quotes        Whether or not the value was enclosed in quotes.
Notes:
    Called when the parser finds a new key/value pair.
Return:
    An SMCResult action to take.
==============================================================================
*sourcemod-SMC_NewSection*


Syntax:
	SMC_NewSection(Handle:smc, const String:name[], bool:opt_quotes);
Usage:
    smc                 The SMC Parse Handle.
    name                String containing section name.
    opt_quotes          True if the section name was quote-enclosed in the file.
Notes:
    Called when the parser is entering a new section or sub-section.
Return:
    An SMCResult action to take.
==============================================================================
*sourcemod-SMC_ParseEnd*


Syntax:
	SMC_ParseEnd(Handle:smc, bool:halted, bool:failed);
Usage:
    smc                 The SMC Parse Handle.
    halted              True if abnormally halted, false otherwise.
    failed              True if parsing failed, false otherwise.
Notes:
    Called when parsing is halted.
Return:
    No return.
==============================================================================
*sourcemod-SMC_ParseFile*


Syntax:
	SMC_ParseFile(Handle:smc, const String:file[], &line=0, &col=0);
Usage:
    smc                 A Handle to an SMC Parse structure.
    file                A string containing the file path.
    line                An optional by reference cell to store the last line number read.
    col                 An optional by reference cell to store the last column number read.
Notes:
    Parses an SMC file.
Return:
    An SMCParseError result.
==============================================================================
*sourcemod-SMC_ParseStart*


Syntax:
	SMC_ParseStart(Handle:smc);
Usage:
    smc                 The SMC Parse Handle.
Notes:
    Called when parsing is started.
Return:
    No return.
==============================================================================
*sourcemod-SMC_RawLine*


Syntax:
	SMC_RawLine(Handle:smc, const String:line[], lineno);
Usage:
    smc                 The SMC Parse Handle.
    line                A string containing the raw line from the file.
    lineno              The line number it occurs on.
Notes:
    Called whenever a raw line is read.
Return:
    An SMCResult action to take.
==============================================================================
*sourcemod-SMC_SetParseEnd*


Syntax:
	SMC_SetParseEnd(Handle:smc, SMC_ParseEnd:func);
Usage:
    smc                 Handle to an SMC Parse.
    func                SMC_ParseEnd function.
Notes:
    Sets the SMC_ParseEnd of a parse handle.
Return:
    No return.
==============================================================================
*sourcemod-SMC_SetParseStart*


Syntax:
	SMC_SetParseStart(Handle:smc, SMC_ParseStart:func);
Usage:
    smc                 Handle to an SMC Parse.
    func                SMC_ParseStart function.
Notes:
    Sets the SMC_ParseStart function of a parse Handle.
Return:
    No return.
==============================================================================
*sourcemod-SMC_SetRawLine*


Syntax:
	SMC_SetRawLine(Handle:smc, SMC_RawLine:func);
Usage:
    smc                 Handle to an SMC Parse.
    func                SMC_RawLine function.
Notes:
    Sets a raw line reader on an SMC parser Handle.
Return:
    No return.
==============================================================================
*sourcemod-SMC_SetReaders*


Syntax:
	SMC_SetReaders(Handle:smc, SMC_NewSection:ns, SMC_KeyValue:kv, SMC_EndSection:es);
Usage:
    smc                 An SMC parse Handle.
    ns                  An SMC_NewSection function pointer.
    kv                  An SMC_KeyValue function pointer.
    es                  An SMC_EndSection function pointer.
Notes:
    Sets the three main reader functions.
Return:
    No return.
==============================================================================
*sourcemod-SortADTArray*


Syntax:
	SortADTArray(Handle:array, SortOrder:order, SortType:type);
Usage:
    array               Array Handle to sort
    order               Sort order to use, same as other sorts.
    type                Data type stored in the ADT Array
Notes:
    Sort an ADT Array. Specify the type as Integer, Float, or String.
Return:
    No return.
==============================================================================
*sourcemod-SortADTArrayCustom*


Syntax:
	SortADTArrayCustom(Handle:array, SortFuncADTArray:sortfunc, Handle:hndl=INVALID_HANDLE);
Usage:
    array               Array Handle to sort
    sortfunc            Sort comparision function to use
    hndl                Optional Handle to pass through the comparison calls.
Notes:
    Custom sorts an ADT Array. You must pass in a comparison function.
Return:
    No return.
==============================================================================
*sourcemod-SortCustom1D*


Syntax:
	SortCustom1D(array[], array_size, SortFunc1D:sortfunc, Handle:hndl=INVALID_HANDLE);
Usage:
    array               Array to sort.
    array_size          Size of the array to sort.
    sortfunc            Sort function.
    hndl                Optional Handle to pass through the comparison calls.
Notes:
    Sorts a custom 1D array.  You must pass in a comparison function.
Return:
    No return.
==============================================================================
*sourcemod-SortCustom2D*


Syntax:
	SortCustom2D(array[][], array_size, SortFunc2D:sortfunc, Handle:hndl=INVALID_HANDLE);
Usage:
    array               Array to sort.
    array_size          Size of the major array to sort (first index, outermost).
    sortfunc            Sort comparison function to use.
    hndl                Optional Handle to pass through the comparison calls.
Notes:
    Sorts a custom 2D array.  You must pass in a comparison function.
Return:
    No return.
==============================================================================
*sourcemod-SortFloats*


Syntax:
	SortFloats(Float:array[], array_size, SortOrder:order = Sort_Ascending);
Usage:
    array               Array of floating point numbers to sort in-place.
    array_size          Size of the array.
    order               Sorting order to use.
Notes:
    Sorts an array of float point numbers.
Return:
    No return.
==============================================================================
*sourcemod-SortFunc1D*


Syntax:
	SortFunc1D(elem1, elem2, const array[], Handle:hndl);
Usage:
    elem1               First element to compare.
    elem2               Second element to compare.
    array               Array that is being sorted (order is undefined).
    hndl                Handle optionally passed in while sorting.
Notes:
    Sort comparison function for 1D array elements.
Return:
    -1 if first should go before second 0 if first is equal to second 1 if first should 
    go after second
==============================================================================
*sourcemod-SortFuncADTArray*


Syntax:
	SortFuncADTArray(index1, index2, Handle:array, Handle:hndl);
Usage:
    index1              First index to compare.
    index2              Second index to compare.
    array               Array that is being sorted (order is undefined).
    hndl                Handle optionally passed in while sorting.
Notes:
    Sort comparison function for ADT Array elements. Function provides you with indexes 
    currently being sorted, use ADT Array functions to retrieve the index values and 
    compare.
Return:
    -1 if first should go before second 0 if first is equal to second 1 if first should 
    go after second
==============================================================================
*sourcemod-SortIntegers*


Syntax:
	SortIntegers(array[], array_size, SortOrder:order = Sort_Ascending);
Usage:
    array               Array of integers to sort in-place.
    array_size          Size of the array.
    order               Sorting order to use.
Notes:
    Sorts an array of integers.
Return:
    No return.
==============================================================================
*sourcemod-SortStrings*


Syntax:
	SortStrings(String:array[][], num_strings, SortOrder:order = Sort_Ascending);
Usage:
    array               Array of strings to sort in-place.
    array_size          Size of the array.
    order               Sorting order to use.
Notes:
    Sorts an array of strings.
Return:
    No return.
==============================================================================
*sourcemod-SplitString*


Syntax:
	SplitString(const String:source[], const String:split[], String:part[], partLen);
Usage:
    source              Source input string.
    split               A string which specifies a search point to break at.
    part                Buffer to store string part.
    partLen             Maximum length of the string part buffer.
Notes:
    Returns text in a string up until a certain character sequence is reached.
Return:
    -1 if no match was found; otherwise, an index into source marking the first index 
    after the searched text.  The index is always relative to the start of the input 
    string.
==============================================================================
*sourcemod-SQL_BindParamFloat*


Syntax:
	SQL_BindParamFloat(Handle:statement, param, Float:value);
Usage:
    statement           A statement (prepared query) Handle.
    param               The parameter index (starting from 0).
    float               The float number to bind.
Notes:
    Binds a parameter in a prepared statement to a given float value.
Return:
    No return.
==============================================================================
*sourcemod-SQL_BindParamInt*


Syntax:
	SQL_BindParamInt(Handle:statement, param, number, bool:signed=true);
Usage:
    statement           A statement (prepared query) Handle.
    param               The parameter index (starting from 0).
    number              The number to bind.
    signed              True to bind the number as signed, false to bind it as unsigned.
Notes:
    Binds a parameter in a prepared statement to a given integer value.
Return:
    No return.
==============================================================================
*sourcemod-SQL_BindParamString*


Syntax:
	SQL_BindParamString(Handle:statement, param, const String:value[], bool:copy);
Usage:
    statement           A statement (prepared query) Handle.
    param               The parameter index (starting from 0).
    value               The string to bind.
    copy                Whether or not SourceMod should copy the value locally if necessary.  If the string contents won't change before calling SQL_Execute(), this can be set to false for optimization.
Notes:
    Binds a parameter in a prepared statement to a given string value.
Return:
    No return.
==============================================================================
*sourcemod-SQL_CheckConfig*


Syntax:
	SQL_CheckConfig(const String:name[]);
Usage:
    name                Configuration name.
Notes:
    Returns if a named configuration is present in databases.cfg.
Return:
    True if it exists, false otherwise.
==============================================================================
*sourcemod-SQL_Connect*


Syntax:
	SQL_Connect(const String:confname[], bool:persistent, String:error[], maxlength);
Usage:
    confname            Named configuration.
    persistent          True to re-use a previous persistent connection if possible, false otherwise.
    error               Error buffer.
    maxlength           Maximum length of the error buffer.
Notes:
    Creates an SQL connection from a named configuration.
Return:
    A database connection Handle, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-SQL_ConnectCustom*


Syntax:
	SQL_ConnectCustom(Handle:keyvalues, String:error[], maxlength, bool:persistent);
Usage:
    keyvalues           Key/value pairs from a KeyValues handle, describing the connection.
    error               Error buffer.
    maxlength           Maximum length of the error buffer.
Notes:
    Connects to a database using key value pairs containing the database info. The key/value 
    pairs should match what would be in databases.cfg. I.e. 'driver' should be 'default' 
    or a driver name (or ommitted for the default).  For SQLite, only the 'database' 
    parameter is needed in addition. For drivers which require external connections, 
    more of the parameters may be needed. In general it is discouraged to use this function. 
     Connections should go through databases.cfg for greatest flexibility on behalf 
    of users.
Return:
    A database connection Handle, or INVALID_HANDLE on failure. On failure the error 
    buffer will be filled with a message.
==============================================================================
*sourcemod-SQL_DefConnect*


Syntax:
	SQL_DefConnect(String:error[], maxlength, bool:persistent=true);
Usage:
    error               Error buffer.
    maxlength           Maximum length of the error buffer.
    persistent          True to re-use a previous persistent connection if possible, false otherwise.
Notes:
    Creates a default SQL connection.
Return:
    A database connection Handle, or INVALID_HANDLE on failure. On failure the error 
    buffer will be filled with a message.
==============================================================================
*sourcemod-SQL_EscapeString*


Syntax:
	SQL_EscapeString(Handle:database, const String:string[], String:buffer[], maxlength, &written=0);
Usage:
    hndl                A database Handle.
    string              String to quote.
    buffer              Buffer to store quoted string in.
    maxlength           Maximum length of the buffer.
    written             Optionally returns the number of bytes written.
Notes:
    Escapes a database string for literal insertion.  This is not needed for binding 
    strings in prepared statements. Generally, database strings are inserted into queries 
    enclosed in single quotes (').  If user input has a single quote in it, the quote 
    needs to be escaped.  This function ensures that any unsafe characters are safely 
    escaped according to the database engine and the database's character set.
Return:
    True on success, false if buffer is not big enough. The buffer must be at least 2*strlen(string)+1.
==============================================================================
*sourcemod-SQL_Execute*


Syntax:
	SQL_Execute(Handle:statement);
Usage:
    statement           A statement (prepared query) Handle.
Notes:
    Executes a prepared statement.  All parameters must be bound beforehand.
Return:
    True on success, false on failure.
==============================================================================
*sourcemod-SQL_FastQuery*


Syntax:
	SQL_FastQuery(Handle:database, const String:query[], len=-1);
Usage:
    database            A database Handle.
    query               Query string.
    len                 Optional parameter to specify the query length, in bytes.  This can be used to send binary queries that have a premature terminator.
Notes:
    Executes a query and ignores the result set.
Return:
    True if query succeeded, false otherwise.  Use SQL_GetError to find the last error.
==============================================================================
*sourcemod-SQL_FetchFloat*


Syntax:
	SQL_FetchFloat(Handle:query, field, &DBResult:result=DBVal_Error);
Usage:
    query               A query (or statement) Handle.
    field               The field index (starting from 0).
    result              Optional variable to store the status of the return value.
Notes:
    Fetches a float from a field in the current row of a result set. If the result is 
    NULL, a value of 0.0 will be returned.  A NULL check can be done with the result 
    parameter, or SQL_IsFieldNull().
Return:
    A float value.
==============================================================================
*sourcemod-SQL_FetchInt*


Syntax:
	SQL_FetchInt(Handle:query, field, &DBResult:result=DBVal_Error);
Usage:
    query               A query (or statement) Handle.
    field               The field index (starting from 0).
    result              Optional variable to store the status of the return value.
Notes:
    Fetches an integer from a field in the current row of a result set. If the result 
    is NULL, a value of 0 will be returned.  A NULL check can be done with the result 
    parameter, or SQL_IsFieldNull().
Return:
    An integer value.
==============================================================================
*sourcemod-SQL_FetchMoreResults*


Syntax:
	SQL_FetchMoreResults(Handle:query);
Usage:
    query               A query Handle.
Notes:
    Advances to the next set of results. In some SQL implementations, multiple result 
    sets can exist on one query. This is possible in MySQL with simple queries when 
    executing a CALL query.  If this is the case, all result sets must be processed 
    before another query is made.
Return:
    True if there was another result set, false otherwise.
==============================================================================
*sourcemod-SQL_FetchRow*


Syntax:
	SQL_FetchRow(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Fetches a row from the current result set.  This must be successfully called before 
    any results are fetched. If this function fails, SQL_MoreResults() can be used to 
    tell if there was an error or the result set is finished.
Return:
    True if a row was fetched, false otherwise.
==============================================================================
*sourcemod-SQL_FetchSize*


Syntax:
	SQL_FetchSize(Handle:query, field);
Usage:
    query               A query (or statement) Handle.
    field               The field index (starting from 0).
Notes:
    Returns the length of a field's data in the current row of a result set.  This only 
    needs to be called for strings to determine how many bytes to use.  Note that the 
    return value does not include the null terminator.
Return:
    Number of bytes for the field's data size.
==============================================================================
*sourcemod-SQL_FetchString*


Syntax:
	SQL_FetchString(Handle:query, field, String:buffer[], maxlength, &DBResult:result=DBVal_Error);
Usage:
    query               A query (or statement) Handle.
    field               The field index (starting from 0).
    buffer              String buffer.
    maxlength           Maximum size of the string buffer.
    result              Optional variable to store the status of the return value.
Notes:
    Fetches a string from a field in the current row of a result set. If the result is 
    NULL, an empty string will be returned.  A NULL check can be done with the result 
    parameter, or SQL_IsFieldNull().
Return:
    Number of bytes written.
==============================================================================
*sourcemod-SQL_FieldNameToNum*


Syntax:
	SQL_FieldNameToNum(Handle:query, const String:name[], &field);
Usage:
    query               A query (or statement) Handle.
    name                Name of the field (case sensitive).
    field               Variable to store field index in.
Notes:
    Retrieves a field index by name.
Return:
    True if found, false if not found.
==============================================================================
*sourcemod-SQL_FieldNumToName*


Syntax:
	SQL_FieldNumToName(Handle:query, field, String:name[], maxlength);
Usage:
    query               A query (or statement) Handle.
    field               Field number (starting from 0).
    name                Name buffer.
    maxlength           Maximum length of the name buffer.
Notes:
    Retrieves the name of a field by index.
Return:
    No return.
==============================================================================
*sourcemod-SQL_GetAffectedRows*


Syntax:
	SQL_GetAffectedRows(Handle:hndl);
Usage:
    hndl                A database OR statement Handle.
Notes:
    Returns the number of affected rows from the last query.
Return:
    Number of rows affected by the last query.
==============================================================================
*sourcemod-SQL_GetDriver*


Syntax:
	SQL_GetDriver(const String:name[]='');
Usage:
    name                Driver identification string, or an empty string to return the default driver.
Notes:
    Returns a driver Handle from a name string. If the driver is not found, SourceMod 
    will attempt to load an extension named dbi.<name>.ext.[dll|so].
Return:
    Driver Handle, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-SQL_GetDriverIdent*


Syntax:
	SQL_GetDriverIdent(Handle:driver, String:ident[], maxlength);
Usage:
    driver              Driver Handle, or INVALID_HANDLE for the default driver.
    ident               Identification string buffer.
    maxlength           Maximum length of the buffer.
Notes:
    Retrieves a driver's identification string. Example: 'mysql', 'sqlite'
Return:
    No return.
==============================================================================
*sourcemod-SQL_GetDriverProduct*


Syntax:
	SQL_GetDriverProduct(Handle:driver, String:product[], maxlength);
Usage:
    driver              Driver Handle, or INVALID_HANDLE for the default driver.
    product             Product string buffer.
    maxlength           Maximum length of the buffer.
Notes:
    Retrieves a driver's product string. Example: 'MySQL', 'SQLite'
Return:
    No return.
==============================================================================
*sourcemod-SQL_GetError*


Syntax:
	SQL_GetError(Handle:hndl, String:error[], maxlength);
Usage:
    hndl                A database OR statement Handle.
    error               Error buffer.
    maxlength           Maximum length of the buffer.
Notes:
    Returns the error reported by the last query.
Return:
    True if there was an error, false otherwise.
==============================================================================
*sourcemod-SQL_GetFieldCount*


Syntax:
	SQL_GetFieldCount(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Retrieves the number of fields in the last result set.
Return:
    Number of fields in the current result set.
==============================================================================
*sourcemod-SQL_GetInsertId*


Syntax:
	SQL_GetInsertId(Handle:hndl);
Usage:
    hndl                A database OR statement Handle.
Notes:
    Returns the last query's insertion id.
Return:
    Last query's insertion id.
==============================================================================
*sourcemod-SQL_GetRowCount*


Syntax:
	SQL_GetRowCount(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Retrieves the number of rows in the last result set.
Return:
    Number of rows in the current result set.
==============================================================================
*sourcemod-SQL_HasResultSet*


Syntax:
	SQL_HasResultSet(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Returns whether or not a result set exists.  This will return true even if 0 results 
    were returned, but false on queries like UPDATE, INSERT, or DELETE.
Return:
    True if there is a result set, false otherwise.
==============================================================================
*sourcemod-SQL_IsFieldNull*


Syntax:
	SQL_IsFieldNull(Handle:query, field);
Usage:
    query               A query (or statement) Handle.
    field               The field index (starting from 0).
Notes:
    Returns whether a field's data in the current row of a result set is NULL or not. 
     NULL is an SQL type which means 'no data.'
Return:
    True if data is NULL, false otherwise.
==============================================================================
*sourcemod-SQL_IsSameConnection*


Syntax:
	SQL_IsSameConnection(Handle:hndl1, Handle:hndl2);
Usage:
    hndl1               First database Handle.
    hndl2               Second database Handle.
Notes:
    Tells whether two database handles both point to the same database connection.
Return:
    True if the Handles point to the same connection, false otherwise.
==============================================================================
*sourcemod-SQL_LockDatabase*


Syntax:
	SQL_LockDatabase(Handle:database);
Usage:
    database            A database Handle.
Notes:
    Locks a database so threading operations will not interrupt. If you are using a database 
    Handle for both threading and non-threading, this MUST be called before doing any 
    set of non-threading DB operations. Otherwise you risk corrupting the database driver's 
    memory or network connection. Leaving a lock on a database and then executing a 
    threaded query results in a dead lock! Make sure to call SQL_UnlockDatabase()! If 
    the lock cannot be acquired, the main thread will pause until the threaded operation 
    has concluded.
Return:
    No return.
==============================================================================
*sourcemod-SQL_MoreRows*


Syntax:
	SQL_MoreRows(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Returns if there are more rows.
Return:
    True if there are more rows, false otherwise.
==============================================================================
*sourcemod-SQL_PrepareQuery*


Syntax:
	SQL_PrepareQuery(Handle:database, const String:query[], String:error[], maxlength);
Usage:
    database            A database Handle.
    query               Query string.
    error               Error buffer.
    maxlength           Maximum size of the error buffer.
Notes:
    Creates a new prepared statement query.  Prepared statements can be executed any 
    number of times.  They can also have placeholder parameters, similar to variables, 
    which can be bound safely and securely (for example, you do not need to quote bound 
    strings). Statement handles will work in any function that accepts a Query handle.
Return:
    A new statement Handle on success, INVALID_HANDLE otherwise.  The Handle must be 
    freed with CloseHandle().
==============================================================================
*sourcemod-SQL_Query*


Syntax:
	SQL_Query(Handle:database, const String:query[], len=-1);
Usage:
    database            A database Handle.
    query               Query string.
    len                 Optional parameter to specify the query length, in bytes.  This can be used to send binary queries that have a premature terminator.
Notes:
    Executes a simple query and returns a new query Handle for receiving the results.
Return:
    A new Query Handle on success, INVALID_HANDLE otherwise.  The Handle must be freed 
    with CloseHandle().
==============================================================================
*sourcemod-SQL_QuoteString*


Syntax:
	SQL_QuoteString(Handle:database, const String:string[], String:buffer[], maxlength, &written=0);
Usage:
Notes:
    This is a backwards compatibility stock.  You should use SQL_EscapeString() instead, 
    as this function will probably be deprecated in SourceMod 1.1.
Return:
    
==============================================================================
*sourcemod-SQL_ReadDriver*


Syntax:
	SQL_ReadDriver(Handle:database, String:ident[]='', ident_length=0);
Usage:
    database            Database Handle.
    ident               Option buffer to store the identification string.
    ident_length        Maximum length of the buffer.
Notes:
    Reads the driver of an opened database.
Return:
    Driver Handle.
==============================================================================
*sourcemod-SQL_Rewind*


Syntax:
	SQL_Rewind(Handle:query);
Usage:
    query               A query (or statement) Handle.
Notes:
    Rewinds a result set back to the first result.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-SQL_TConnect*


Syntax:
	SQL_TConnect(SQLTCallback:callback, const String:name[]='default', any:data=0);
Usage:
    callback            Callback; new Handle will be in hndl, owner is the driver. If no driver was found, the owner is INVALID_HANDLE.
    name                Database name.
Notes:
    Connects to a database via a thread.  This can be used instead of SQL_Connect() if 
    you wish for non-blocking functionality. It is not necessary to use this to use 
    threaded queries.  However, if you don't (or you mix threaded/non-threaded queries), 
    you should see SQL_LockDatabase().
Return:
    No return.
==============================================================================
*sourcemod-SQL_TQuery*


Syntax:
	SQL_TQuery(Handle:database, SQLTCallback:callback, const String:query[], any:data=0, DBPriority:prio=DBPrio_Normal);
Usage:
    database            A database Handle.
    callback            Callback; database is in 'owner' and the query Handle is passed in 'hndl'.
    query               Query string.
    data                Extra data value to pass to the callback.
    prio                Priority queue to use.
Notes:
    Executes a simple query via a thread.  The query Handle is passed through the callback. 
    The database Handle returned through the callback is always a new Handle, and if 
    necessary, SQL_IsSameConnection() should be used to test against other conenctions. 
    The query Handle returned through the callback is temporary and destroyed at the 
    end of the callback.  If you need to hold onto it, use CloneHandle().
Return:
    No return.
==============================================================================
*sourcemod-SQL_UnlockDatabase*


Syntax:
	SQL_UnlockDatabase(Handle:database);
Usage:
    database            A database Handle.
Notes:
    Unlocks a database so threading operations may continue.
Return:
    No return.
==============================================================================
*sourcemod-SQLite_UseDatabase*


Syntax:
	SQLite_UseDatabase(const String:database[], String:error[], maxlength);
Usage:
    database            Database name.
    error               Error buffer.
    maxlength           Maximum length of the error buffer.
Notes:
    Grabs a handle to an SQLite database, creating one if it does not exist. Unless there 
    are extenuating circumstances, you should consider using 'sourcemod-local' as the 
    database name.  This provides some unification between plugins on behalf of users. 
    As a precaution, you should always create some sort of unique prefix to your table 
    names so there are no conflicts, and you should never drop or modify tables that 
    you do not own.
Return:
    A database connection Handle, or INVALID_HANDLE on failure. On failure the error 
    buffer will be filled with a message.
==============================================================================
*sourcemod-SQLTCallback*


Syntax:
	SQLTCallback(Handle:owner, Handle:hndl, const String:error[], any:data);
Usage:
    db                  Parent object of the Handle (or INVALID_HANDLE if none).
    hndl                Handle to the child object (or INVALID_HANDLE if none).
    error               Error string if there was an error.  The error could be empty even if an error condition exists, so it is important to check the actual Handle value instead.
    data                Data passed in via the original threaded invocation.
Notes:
    General callback for threaded SQL stuff.
Return:
    
==============================================================================
*sourcemod-SquareRoot*


Syntax:
	SquareRoot(Float:value);
Usage:
    value               Input value.
Notes:
    Returns the square root of the input value, equivalent to floatpower(value, 0.5).
Return:
    Square root of the value.
==============================================================================
*sourcemod-SrvCmd*


Syntax:
	SrvCmd(args);
Usage:
    s args              Number of arguments that were in the argument string.
Notes:
    Called when a server-only command is invoked.
Return:
    An Action value.  Not handling the command means that Source will report it as 'not 
    found.'
==============================================================================
*sourcemod-StartMessage*


Syntax:
	StartMessage(String:msgname[], clients[], numClients, flags=0);
Usage:
    msgname             Message name to start.
    clients             Array containing player indexes to broadcast to.
    numClients          Number of players in the array.
    flags               Optional flags to set.
Notes:
    Starts a usermessage (network message).
Return:
    A handle to a bf_write bit packing structure, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-StartMessageAll*


Syntax:
	StartMessageAll(String:msgname[], flags=0);
Usage:
    msgname             Message name to start.
    flags               Optional flags to set.
Notes:
    Starts a usermessage (network message) that broadcasts to all clients.
Return:
    A handle to a bf_write bit packing structure, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-StartMessageEx*


Syntax:
	StartMessageEx(UserMsg:msg, clients[], numClients, flags=0);
Usage:
    msg                 Message index to start.
    clients             Array containing player indexes to broadcast to.
    numClients          Number of players in the array.
    flags               Optional flags to set.
Notes:
    Starts a usermessage (network message).
Return:
    A handle to a bf_write bit packing structure, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-StartMessageOne*


Syntax:
	StartMessageOne(String:msgname[], client, flags=0);
Usage:
    msgname             Message name to start.
    client              Client to send to.
    flags               Optional flags to set.
Notes:
    Starts a simpler usermessage (network message) for one client.
Return:
    A handle to a bf_write bit packing structure, or INVALID_HANDLE on failure.
==============================================================================
*sourcemod-StartPrepSDKCall*


Syntax:
	StartPrepSDKCall(SDKCallType:type);
Usage:
    type                Type of function call this will be.
Notes:
    Starts the preparation of an SDK call.
Return:
    No return.
==============================================================================
*sourcemod-StartProfiling*


Syntax:
	StartProfiling(Handle:prof);
Usage:
    prof                Profiling object.
Notes:
    Starts profiling.
Return:
    No return.
==============================================================================
*sourcemod-StopProfiling*


Syntax:
	StopProfiling(Handle:prof);
Usage:
    prof                Profiling object.
Notes:
    Stops profiling.
Return:
    No return.
==============================================================================
*sourcemod-StopSound*


Syntax:
	StopSound(entity, channel, const String:name[]);
Usage:
    entity              Entity index.
    channel             Channel number.
    name                Sound file name relative to the 'sounds' folder.
Notes:
    Stops a sound.
Return:
    No return.
==============================================================================
*sourcemod-StrCat*


Syntax:
	StrCat(String:buffer[], maxlength, const String:source[]);
Usage:
    buffer              String to append to.
    maxlength           Maximum length of entire buffer.
    source              Source string to concatenate.
Notes:
    Concatenates one string onto another.
Return:
    Number of bytes written.
==============================================================================
*sourcemod-strcmp*


Syntax:
	strcmp(const String:str1[], const String:str2[], bool:caseSensitive=true);
Usage:
    str1                First string (left).
    str2                Second string (right).
    caseSensitive       If true (default), comparison is case sensitive. If false, comparison is case insensitive.
Notes:
    Compares two strings lexographically.
Return:
    -1 if str1 < str2 0 if str1 == str2 1 if str1 > str2
==============================================================================
*sourcemod-StrContains*


Syntax:
	StrContains(const String:str[], const String:substr[], bool:caseSensitive=true);
Usage:
    str                 String to search in.
    substr              Substring to find inside the original string.
    caseSensitive       If true (default), search is case sensitive. If false, search is case insensitive.
Notes:
    Tests whether a string is found inside another string.
Return:
    -1 on failure (no match found). Any other value indicates a position in the string 
    where the match starts.
==============================================================================
*sourcemod-strcopy*


Syntax:
	strcopy(String:dest[], destLen, const String:source[]);
Usage:
    dest                Destination string buffer to copy to.
    destlen             Destination buffer length (includes null terminator).
    source              Source string buffer to copy from.
Notes:
    Copies one string to another string.
Return:
    Number of cells written.
==============================================================================
*sourcemod-StrEqual*


Syntax:
	StrEqual(const String:str1[], const String:str2[], bool:caseSensitive=true);
Usage:
    str1                First string (left).
    str2                Second string (right).
    caseSensitive       If true (default), comparison is case sensitive. If false, comparison is case insensitive.
Notes:
    Returns whether two strings are equal.
Return:
    True if equal, false otherwise.
==============================================================================
*sourcemod-StringToFloat*


Syntax:
	StringToFloat(const String:str[]);
Usage:
    str                 String to convert to a foat.
Notes:
    Converts a string to a floating point number.
Return:
    Floating point result, or 0.0 on error.
==============================================================================
*sourcemod-StringToFloatEx*


Syntax:
	StringToFloatEx(const String:str[], &Float:result);
Usage:
    str                 String to convert to a foat.
    result              Variable to store result in.
Notes:
    Converts a string to a floating point number with some more options.
Return:
    Number of characters consumed.
==============================================================================
*sourcemod-StringToInt*


Syntax:
	StringToInt(const String:str[], nBase=10);
Usage:
    str                 String to convert.
    nBase               Numerical base to use.  10 is default.
Notes:
    Converts a string to an integer.
Return:
    Integer conversion of string, or 0 on failure.
==============================================================================
*sourcemod-StringToIntEx*


Syntax:
	StringToIntEx(const String:str[], &result, nBase=10);
Usage:
    str                 String to convert.
    result              Variable to store the result in.
    nBase               Numerical base to use.  10 is default.
Notes:
    Converts a string to an integer with some more options.
Return:
    Number of characters consumed.
==============================================================================
*sourcemod-StripQuotes*


Syntax:
	StripQuotes(String:text[]);
Usage:
    text                String to modify (in place).
Notes:
    Strips a quote pair off a string if it exists.  That is, the following replace rule 
    is applied once:  $'(.*)'^ -> $1^ Note that the leading and trailing quotes will 
    only be removed if both exist.  Otherwise, the string is left unmodified.  This 
    function should be considered O(k) (all characters get shifted down).
Return:
    True if string was modified, false if there was no set of quotes.
==============================================================================
*sourcemod-strlen*


Syntax:
	strlen(const String:str[]);
Usage:
    str                 String to check.
Notes:
    Calculates the length of a string.
Return:
    Number of valid character bytes in the string.
==============================================================================
*sourcemod-strncmp*


Syntax:
	strncmp(const String:str1[], const String:str2[], num, bool:caseSensitive=true);
Usage:
    str1                First string (left).
    str2                Second string (right).
    num                 Number of characters to compare.
    caseSensitive       If true (default), comparison is case sensitive. If false, comparison is case insensitive.
Notes:
    Compares two strings parts lexographically.
Return:
    -1 if str1 < str2 0 if str1 == str2 1 if str1 > str2
==============================================================================
*sourcemod-SubtractVectors*


Syntax:
	SubtractVectors(const Float:vec1[3], const Float:vec2[3], Float:result[3]);
Usage:
    vec1                First vector.
    vec2                Second vector to subtract from first.
    result              Result buffer.
Notes:
    Subtracts a vector from another vector.  It is safe to use either input buffer as 
    an output buffer.
Return:
    No return.
==============================================================================
*sourcemod-SwapArrayItems*


Syntax:
	SwapArrayItems(Handle:array, index1, index2);
Usage:
    array               Array Handle.
    index1              First index.
    index2              Second index.
Notes:
    Swaps two items in the array.
Return:
    No return.
==============================================================================
*sourcemod-Tangent*


Syntax:
	Tangent(Float:value);
Usage:
    value               Input value in radians.
Notes:
    Returns the tangent of the argument.
Return:
    tan(value).
==============================================================================
*sourcemod-TE_IsValidProp*


Syntax:
	TE_IsValidProp(const String:prop[]);
Usage:
    prop                Property to use.
Notes:
    Checks if a certain TE property exists.
Return:
    True if the property exists, otherwise false.
==============================================================================
*sourcemod-TE_ReadFloat*


Syntax:
	TE_ReadFloat(const String:prop[]);
Usage:
    prop                Property to use.
Notes:
    Reads a floating point number in the current temp entity.
Return:
    No return.
==============================================================================
*sourcemod-TE_ReadNum*


Syntax:
	TE_ReadNum(const String:prop[]);
Usage:
    prop                Property to use.
Notes:
    Reads an integer value in the current temp entity.
Return:
    Property value.
==============================================================================
*sourcemod-TE_ReadVector*


Syntax:
	TE_ReadVector(const String:prop[], Float:vector[3]);
Usage:
    prop                Property to use.
    vector              Vector to read.
Notes:
    Reads a vector in the current temp entity.
Return:
    No return.
==============================================================================
*sourcemod-TE_Send*


Syntax:
	TE_Send(clients[], numClients, Float:delay=0.0);
Usage:
    clients             Array containing player indexes to broadcast to.
    numClients          Number of players in the array.
    delay               Delay in seconds to send the TE.
Notes:
    Sends the current temp entity to one or more clients.
Return:
    No return.
==============================================================================
*sourcemod-TE_SendToAll*


Syntax:
	TE_SendToAll(Float:delay=0.0);
Usage:
    delay               Delay in seconds to send the TE.
Notes:
    Broadcasts the current temp entity to all clients.
Return:
    No return.
==============================================================================
*sourcemod-TE_SendToClient*


Syntax:
	TE_SendToClient(client, Float:delay=0.0);
Usage:
    client              Client to send to.
    delay               Delay in seconds to send the TE.
Notes:
    Sends the current TE to only a client.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupArmorRicochet*


Syntax:
	TE_SetupArmorRicochet(const Float:pos[3], const Float:dir[3]);
Usage:
    pos                 Position of the armor ricochet.
    dir                 Directon of the armor ricochet.
Notes:
    Sets up an armor ricochet effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBeamFollow*


Syntax:
	TE_SetupBeamFollow(EntIndex, ModelIndex, HaloIndex, Float:Life, Float:Width, Float:EndWidth, FadeLength, const Color[4]);
Usage:
    EntIndex            Entity index from where the beam starts.
    ModelIndex          Precached model index.
    HaloIndex           Precached model index.
    Life                Time duration of the beam.
    Width               Initial beam width.
    EndWidth            Final beam width.
    FadeLength          Beam fade time duration.
    color               Color array (r, g, b, a).
Notes:
    Sets up a follow beam effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBeamLaser*


Syntax:
	TE_SetupBeamLaser(StartEntity, EndEntity, ModelIndex, HaloIndex, StartFrame, FrameRate, Float:Life, Float:Width, Float:EndWidth, FadeLength, Float:Amplitude, const Color[4], Speed);
Usage:
    StartEntity         Entity index from where the beam starts.
    EndEntity           Entity index from where the beam ends.
    ModelIndex          Precached model index.
    HaloIndex           Precached model index.
    StartFrame          Initital frame to render.
    FrameRate           Beam frame rate.
    Life                Time duration of the beam.
    Width               Initial beam width.
    EndWidth            Final beam width.
    FadeLength          Beam fade time duration.
    Amplitude           Beam amplitude.
    color               Color array (r, g, b, a).
    Speed               Speed of the beam.
Notes:
    Sets up an entity to entity laser effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBeamPoints*


Syntax:
	TE_SetupBeamPoints(const Float:start[3], const Float:end[3], ModelIndex, HaloIndex, StartFrame, FrameRate, Float:Life, Float:Width, Float:EndWidth, FadeLength, Float:Amplitude, const Color[4], Speed);
Usage:
    start               Start position of the beam.
    end                 End position of the beam.
    ModelIndex          Precached model index.
    HaloIndex           Precached model index.
    StartFrame          Initital frame to render.
    FrameRate           Beam frame rate.
    Life                Time duration of the beam.
    Width               Initial beam width.
    EndWidth            Final beam width.
    FadeLength          Beam fade time duration.
    Amplitude           Beam amplitude.
    color               Color array (r, g, b, a).
    Speed               Speed of the beam.
Notes:
    Sets up a point to point beam effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBeamRing*


Syntax:
	TE_SetupBeamRing(StartEntity, EndEntity, ModelIndex, HaloIndex, StartFrame, FrameRate, Float:Life, Float:Width, Float:Amplitude, const Color[4], Speed, Flags);
Usage:
    StartEntity         Entity index from where the ring starts.
    EndEntity           Entity index from where the ring ends.
    ModelIndex          Precached model index.
    HaloIndex           Precached model index.
    StartFrame          Initital frame to render.
    FrameRate           Ring frame rate.
    Life                Time duration of the ring.
    Width               Beam width.
    Amplitude           Beam amplitude.
    color               Color array (r, g, b, a).
    Speed               Speed of the beam.
    Flags               Beam flags.
Notes:
    Sets up a beam ring effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBeamRingPoint*


Syntax:
	TE_SetupBeamRingPoint(const Float:center[3], Float:Start_Radius, Float:End_Radius, ModelIndex, HaloIndex, StartFrame, FrameRate, Float:Life, Float:Width, Float:Amplitude, const Color[4], Speed, Flags);
Usage:
    center              Center position of the ring.
    Start_Radius        Initial ring radius.
    End_Radius          Final ring radius.
    ModelIndex          Precached model index.
    HaloIndex           Precached model index.
    StartFrame          Initital frame to render.
    FrameRate           Ring frame rate.
    Life                Time duration of the ring.
    Width               Beam width.
    Amplitude           Beam amplitude.
    color               Color array (r, g, b, a).
    Speed               Speed of the beam.
    Flags               Beam flags.
Notes:
    Sets up a beam ring point effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupBloodSprite*


Syntax:
	TE_SetupBloodSprite(const Float:pos[3], const Float:dir[3], const color[4], Size, SprayModel, BloodDropModel);
Usage:
    pos                 Position of the sprite.
    dir                 Sprite direction.
    color               Color array (r, g, b, a).
    Size                Sprite size.
    SprayModel          Precached model index.
    BloodDropModel      Precached model index.
Notes:
    Sets up a blood sprite effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupDust*


Syntax:
	TE_SetupDust(const Float:pos[3], const Float:dir[3], Float:Size, Float:Speed);
Usage:
    pos                 Position of the dust.
    dir                 Direction of the dust.
    Size                Dust cloud size.
    Speed               Dust cloud speed.
Notes:
    Sets up a dust cloud effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupEnergySplash*


Syntax:
	TE_SetupEnergySplash(const Float:pos[3], const Float:dir[3], bool:Explosive);
Usage:
    pos                 Position of the energy splash.
    dir                 Direction of the energy splash.
    Explosive           Makes the effect explosive.
Notes:
    Sets up an energy splash effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupExplosion*


Syntax:
	TE_SetupExplosion(const Float:pos[3], Model, Float:Scale, Framerate, Flags, Radius, Magnitude, const Float:normal[3]=);
Usage:
    pos                 Explosion position.
    Model               Precached model index.
    Scale               Explosion scale.
    Framerate           Explosion frame rate.
    Flags               Explosion flags.
    Radius              Explosion radius.
    Magnitude           Explosion size.
    normal              Normal vector to the explosion.
    MaterialType        Exploded material type.
Notes:
    Sets up a explosion effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupGlowSprite*


Syntax:
	TE_SetupGlowSprite(const Float:pos[3], Model, Float:Life, Float:Size, Brightness);
Usage:
    pos                 Position of the sprite.
    Model               Precached model index.
    Life                Time duration of the sprite.
    Size                Sprite size.
    Brightness          Sprite brightness.
Notes:
    Sets up a glowing sprite effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupMetalSparks*


Syntax:
	TE_SetupMetalSparks(const Float:pos[3], const Float:dir[3]);
Usage:
    pos                 Position of the metal sparks.
    dir                 Direction of the metal sparks.
Notes:
    Sets up a metal sparks effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupMuzzleFlash*


Syntax:
	TE_SetupMuzzleFlash(const Float:pos[3], const Float:angles[3], Float:Scale, Type);
Usage:
    pos                 Position of the muzzle flash.
    angles              Rotation angles of the muzzle flash.
    Scale               Scale of the muzzle flash.
    Type                Muzzle flash type to render (Mod specific).
Notes:
    Sets up a muzzle flash effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupSmoke*


Syntax:
	TE_SetupSmoke(const Float:pos[3], Model, Float:Scale, FrameRate);
Usage:
    pos                 Position of the smoke.
    Model               Precached model index.
    Scale               Scale of the smoke.
    Framerate           Frame rate of the smoke.
Notes:
    Sets up a smoke effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_SetupSparks*


Syntax:
	TE_SetupSparks(const Float:pos[3], const Float:dir[3], Magnitude, TrailLength);
Usage:
    pos                 Position of the sparks.
    dir                 Direction of the sparks.
    Magnitude           Sparks size.
    TrailLength         Trail lenght of the sparks.
Notes:
    Sets up a sparks effect.
Return:
    No return.
==============================================================================
*sourcemod-TE_Start*


Syntax:
	TE_Start(const String:te_name[]);
Usage:
    te_name             TE name.
Notes:
    Starts a temp entity transmission.
Return:
    No return.
==============================================================================
*sourcemod-TE_WriteAngles*


Syntax:
	TE_WriteAngles(const String:prop[], const Float:angles[3]);
Usage:
    prop                Property to use.
    angles              Angles to set.
Notes:
    Sets a QAngle in the current temp entity.
Return:
    True on success, otherwise false.
==============================================================================
*sourcemod-TE_WriteEncodedEnt*


Syntax:
	TE_WriteEncodedEnt(const String:prop[], value);
Usage:
    prop                Property to use.
    value               Value to set.
Notes:
    Sets an encoded entity index in the current temp entity. (This is usually used for 
    m_nStartEntity and m_nEndEntity).
Return:
    No return.
==============================================================================
*sourcemod-TE_WriteFloat*


Syntax:
	TE_WriteFloat(const String:prop[], Float:value);
Usage:
    prop                Property to use.
    value               Floating point number to set.
Notes:
    Sets a floating point number in the current temp entity.
Return:
    No return.
==============================================================================
*sourcemod-TE_WriteFloatArray*


Syntax:
	TE_WriteFloatArray(const String:prop[], const Float:array[], arraySize);
Usage:
    prop                Property to use.
    array               Array of values to copy.
    arraySize           Number of values to copy.
Notes:
    Sets an array of floats in the current temp entity.
Return:
    True on success, otherwise false.
==============================================================================
*sourcemod-TE_WriteNum*


Syntax:
	TE_WriteNum(const String:prop[], value);
Usage:
    prop                Property to use.
    value               Integer value to set.
Notes:
    Sets an integer value in the current temp entity.
Return:
    No return.
==============================================================================
*sourcemod-TE_WriteVector*


Syntax:
	TE_WriteVector(const String:prop[], const Float:vector[3]);
Usage:
    prop                Property to use.
    vector              Vector to set.
Notes:
    Sets a vector in the current temp entity.
Return:
    No return.
==============================================================================
*sourcemod-TEHook*


Syntax:
	TEHook(const String:te_name[], const Players[], numClients, Float:delay);
Usage:
    te_name             TE name.
    Players             Array containing target player indexes.
    numClients          Number of players in the array.
    delay               Delay in seconds to send the TE.
Notes:
    Called when a temp entity is going to be sent.
Return:
    Plugin_Continue to allow the transmission of the TE, Plugin_Stop to block it.
==============================================================================
*sourcemod-TeleportEntity*


Syntax:
	TeleportEntity(entity, const Float:origin[3], const Float:angles[3], const Float:velocity[3]);
Usage:
    entity              Client index.
    origin              New origin, or NULL_VECTOR for no change.
    angles              New angles, or NULL_VECTOR for no change.
    velocity            New velocity, or NULL_VECTOR for no change.
Notes:
    Teleports an entity.
Return:
    No return.
==============================================================================
*sourcemod-TF2_CalcIsAttackCritical*


Syntax:
	TF2_CalcIsAttackCritical(client, weapon, String:weaponname[], &bool:result);
Usage:
    client              Client Index.
    weapon              Weapon entity Index.
    weaponname          Classname of the weapon.
    result              Buffer param for the result of the decision.
Notes:
    Called on weapon fire to decide if the current shot should be critical. Return Plugin_Continue 
    to let the original calculation or return a higher action to override the decision 
    with the value of 'result'
Return:
    
==============================================================================
*sourcemod-TF2_DisguisePlayer*


Syntax:
	TF2_DisguisePlayer(client, TFTeam:team, TFClassType:class);
Usage:
    client              Player's index.
    team                Team to disguise the player as (only TFTeam_Red and TFTeam_Blue have an effect)
    class               TFClassType class to disguise the player as
Notes:
    Disguises a client to the given model and team. Only has an effect on spies. Note: 
    This only starts the disguise process and a delay occurs before the spy is fully 
    disguised
Return:
    No return.
==============================================================================
*sourcemod-TF2_GetClass*


Syntax:
	TF2_GetClass(const String:classname[]);
Usage:
    classname           A classname string such as 'sniper' or 'demoman'
Notes:
    Finds the TFClassType for a given class name.
Return:
    A TFClassType constant.
==============================================================================
*sourcemod-TF2_GetPlayerClass*


Syntax:
	TF2_GetPlayerClass(client);
Usage:
    client              Player's index.
Notes:
    Get's a Clients current class.
Return:
    Current TFClassType of player.
==============================================================================
*sourcemod-TF2_GetPlayerResourceData*


Syntax:
	TF2_GetPlayerResourceData(client, TFResourceType:type);
Usage:
    client              Player's index.
    type                ResourceType constant
Notes:
    Retrieves client data from the resource entity
Return:
    Value or -1 on failure.
==============================================================================
*sourcemod-TF2_GetResourceEntity*


Syntax:
	TF2_GetResourceEntity();
Usage:
Notes:
    Retrieves the entity index of the CPlayerResource entity
Return:
    The current resource entity index.
==============================================================================
*sourcemod-TF2_RemoveAllWeapons*


Syntax:
	TF2_RemoveAllWeapons(client);
Usage:
    client              Player's index.
Notes:
    Removes all weapons from a client
Return:
    No return.
==============================================================================
*sourcemod-TF2_RemovePlayerDisguise*


Syntax:
	TF2_RemovePlayerDisguise(client);
Usage:
    client              Player's index.
Notes:
    Removes the current disguise from a client. Only has an effect on spies.
Return:
    No return.
==============================================================================
*sourcemod-TF2_RemoveWeaponSlot*


Syntax:
	TF2_RemoveWeaponSlot(client, slot);
Usage:
    client              Player's index.
    slot                Slot index (0-5)
Notes:
    Removes all weapons from a client's weapon slot
Return:
    No return.
==============================================================================
*sourcemod-TF2_RespawnPlayer*


Syntax:
	TF2_RespawnPlayer(client);
Usage:
    client              Player's index.
Notes:
    Respawns a client
Return:
    No return.
==============================================================================
*sourcemod-TF2_SetPlayerClass*


Syntax:
	TF2_SetPlayerClass(client, TFClassType:class, bool:weapons=true, bool:persistant=true);
Usage:
    client              Player's index.
    class               TFClassType class symbol.
    weapons             This paramater is ignored.
    persistant          If true changes the players desired class so the change stays after death.
Notes:
    Set's a Clients class. Note: If setting player class in a player spawn hook weapons 
    should be set to false.
Return:
    No return.
==============================================================================
*sourcemod-TF2_SetPlayerResourceData*


Syntax:
	TF2_SetPlayerResourceData(client, TFResourceType:type, any:value);
Usage:
    client              Player's index.
    type                ResourceType constant
    value               Value to set.
Notes:
    Sets client data in the resource entity Note: The game overwrites these values every 
    frame, so changing them will have very little effect.
Return:
    Value or -1 on failure.
==============================================================================
*sourcemod-ThrowError*


Syntax:
	ThrowError(const String:fmt[], any:...);
Usage:
    format              String format.
    ...                 Format arguments.
Notes:
    Aborts the current callback and throws an error.  This function does not return in 
    that no code is executed following it.
Return:
    No return.
==============================================================================
*sourcemod-ThrowNativeError*


Syntax:
	ThrowNativeError(error, const String:fmt[], any:...);
Usage:
    error               Error code to use.
    fmt                 Error message format.
    ...                 Format arguments.
Notes:
    Throws an error in the calling plugin of a native, instead of your own plugin.
Return:
    
==============================================================================
*sourcemod-TopMenuHandler*


Syntax:
	TopMenuHandler(Handle:topmenu, TopMenuAction:action, TopMenuObject:object_id, param, String:buffer[], maxlength);
Usage:
    topmenu             Handle to the TopMenu.
    action              TopMenuAction being performed.
    object_id           The object ID (if used).
    param               Extra parameter (if used).
    buffer              Output buffer (if used).
    maxlength           Output buffer (if used).
Notes:
    TopMenu callback prototype.
Return:
    No return.
==============================================================================
*sourcemod-TR_DidHit*


Syntax:
	TR_DidHit(Handle:hndl=INVALID_HANDLE);
Usage:
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns if there was any kind of collision along the trace ray.
Return:
    True if any collision found, otherwise false.
==============================================================================
*sourcemod-TR_GetEndPosition*


Syntax:
	TR_GetEndPosition(Float:pos[3], Handle:hndl=INVALID_HANDLE);
Usage:
    pos                 Vector buffer to store data in.
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the collision position of a trace result.
Return:
    No return.
==============================================================================
*sourcemod-TR_GetEntityIndex*


Syntax:
	TR_GetEntityIndex(Handle:hndl=INVALID_HANDLE);
Usage:
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the entity index that collided with the trace.
Return:
    Entity index or -1 for no collision.
==============================================================================
*sourcemod-TR_GetFraction*


Syntax:
	TR_GetFraction(Handle:hndl=INVALID_HANDLE);
Usage:
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the time fraction from a trace result (1.0 means no collision).
Return:
    Time fraction value of the trace.
==============================================================================
*sourcemod-TR_GetHitGroup*


Syntax:
	TR_GetHitGroup(Handle:hndl=INVALID_HANDLE);
Usage:
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns in which body hit group the trace collided if any.
Return:
    Body hit group.
==============================================================================
*sourcemod-TR_GetPlaneNormal*


Syntax:
	TR_GetPlaneNormal(Handle:hndl, Float:normal[3]);
Usage:
    hndl                A trace Handle, or INVALID_HANDLE to use a global trace result.
    normal              Vector buffer to store the vector normal to the collision plane
Notes:
    Find the normal vector to the collison plane of a trace.
Return:
    No return.
==============================================================================
*sourcemod-TR_GetPointContents*


Syntax:
	TR_GetPointContents(const Float:pos[3], &entindex=-1);
Usage:
    pos                 World position to test.
    entindex            Entity index found at the given position (by reference).
Notes:
    Get the contents mask and the entity index at the given position.
Return:
    Contents mask.
==============================================================================
*sourcemod-TR_GetPointContentsEnt*


Syntax:
	TR_GetPointContentsEnt(entindex, const Float:pos[3]);
Usage:
    entindex            Entity index to test.
    pos                 World position.
Notes:
    Get the point contents testing only the given entity index.
Return:
    Contents mask.
==============================================================================
*sourcemod-TR_TraceHull*


Syntax:
	TR_TraceHull(const Float:pos[3], const Float:vec[3], const Float:mins[3], const Float:maxs[3], flags);
Usage:
    pos                 Starting position of the ray.
    vec                 Ending position of the ray.
    mins                Hull minimum size.
    maxs                Hull maximum size.
    flags               Trace flags.
Notes:
    Starts up a new trace hull using a global trace result.
Return:
    No return.
==============================================================================
*sourcemod-TR_TraceHullEx*


Syntax:
	TR_TraceHullEx(const Float:pos[3], const Float:vec[3], const Float:mins[3], const Float:maxs[3], flags);
Usage:
    pos                 Starting position of the ray.
    vec                 Ending position of the ray.
    mins                Hull minimum size.
    maxs                Hull maximum size.
    flags               Trace flags.
Notes:
    Starts up a new trace hull using a new trace result.
Return:
    Ray trace handle, which must be closed via CloseHandle().
==============================================================================
*sourcemod-TR_TraceHullFilter*


Syntax:
	TR_TraceHullFilter(const Float:pos[3], const Float:vec[3], const Float:mins[3], const Float:maxs[3], flags, TraceEntityFilter:filter, any:data=0);
Usage:
    pos                 Starting position of the ray.
    vec                 Depending on RayType, it will be used as the ending point, or the direction angle.
    mins                Hull minimum size.
    maxs                Hull maximum size.
    flags               Trace flags.
    filter              Function to use as a filter.
    data                Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace hull using a global trace result and a customized trace ray 
    filter. Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter function 
    is currently not allowed and may not work.
Return:
    No return.
==============================================================================
*sourcemod-TR_TraceHullFilterEx*


Syntax:
	TR_TraceHullFilterEx(const Float:pos[3], const Float:vec[3], const Float:mins[3], const Float:maxs[3], flags, TraceEntityFilter:filter, any:data=0);
Usage:
    pos                 Starting position of the ray.
    vec                 Ending position of the ray.
    mins                Hull minimum size.
    maxs                Hull maximum size.
    flags               Trace flags.
    filter              Function to use as a filter.
    data                Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace hull using a new trace result and a customized trace ray filter. 
    Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter function is currently 
    not allowed and may not work.
Return:
    Ray trace handle, which must be closed via CloseHandle().
==============================================================================
*sourcemod-TR_TraceRay*


Syntax:
	TR_TraceRay(const Float:pos[3], const Float:vec[3], flags, RayType:rtype);
Usage:
    pos                 Starting position of the ray.
    vec                 Depending on RayType, it will be used as the ending point, or the direction angle.
    flags               Trace flags.
    rtype               Method to calculate the ray direction.
Notes:
    Starts up a new trace ray using a global trace result.
Return:
    No return.
==============================================================================
*sourcemod-TR_TraceRayEx*


Syntax:
	TR_TraceRayEx(const Float:pos[3], const Float:vec[3], flags, RayType:rtype);
Usage:
    pos                 Starting position of the ray.
    vec                 Depending on RayType, it will be used as the ending point, or the direction angle.
    flags               Trace flags.
    rtype               Method to calculate the ray direction.
Notes:
    Starts up a new trace ray using a new trace result.
Return:
    Ray trace handle, which must be closed via CloseHandle().
==============================================================================
*sourcemod-TR_TraceRayFilter*


Syntax:
	TR_TraceRayFilter(const Float:pos[3], const Float:vec[3], flags, RayType:rtype, TraceEntityFilter:filter, any:data=0);
Usage:
    pos                 Starting position of the ray.
    vec                 Depending on RayType, it will be used as the ending point, or the direction angle.
    flags               Trace flags.
    rtype               Method to calculate the ray direction.
    filter              Function to use as a filter.
    data                Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace ray using a global trace result and a customized trace ray 
    filter. Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter function 
    is currently not allowed and may not work.
Return:
    No return.
==============================================================================
*sourcemod-TR_TraceRayFilterEx*


Syntax:
	TR_TraceRayFilterEx(const Float:pos[3], const Float:vec[3], flags, RayType:rtype, TraceEntityFilter:filter, any:data=0);
Usage:
    pos                 Starting position of the ray.
    vec                 Depending on RayType, it will be used as the ending point, or the direction angle.
    flags               Trace flags.
    rtype               Method to calculate the ray direction.
    filter              Function to use as a filter.
    data                Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace ray using a new trace result and a customized trace ray filter. 
    Calling TR_Trace*Filter or TR_TraceRay*Ex from inside a filter function is currently 
    not allowed and may not work.
Return:
    Ray trace handle, which must be closed via CloseHandle().
==============================================================================
*sourcemod-TriggerTimer*


Syntax:
	TriggerTimer(Handle:timer, bool:reset=false);
Usage:
    timer               Timer Handle to trigger.
    reset               If reset is true, the elapsed time counter is reset so the full interval must pass again.
Notes:
    Manually triggers a timer so its function will be called.
Return:
    No return.
==============================================================================
*sourcemod-TrimString*


Syntax:
	TrimString(String:str[]);
Usage:
    str                 The string to trim.
Notes:
    Removes whitespace characters from the beginning and end of a string.
Return:
    Number of bytes written (UTF-8 safe).
==============================================================================
*sourcemod-UnhookConVarChange*


Syntax:
	UnhookConVarChange(Handle:convar, ConVarChanged:callback);
Usage:
    convar              Handle to the convar.
    callback            An OnConVarChanged function pointer.
Notes:
    Removes a hook for when a console variable's value is changed.
Return:
    No return.
==============================================================================
*sourcemod-UnhookEntityOutput*


Syntax:
	UnhookEntityOutput(const String:classname[], const String:output[], EntityOutput:callback);
Usage:
    classname           The classname to hook.
    output              The output name to hook.
    callback            An EntityOutput function pointer.
Notes:
    Remove an entity output hook.
Return:
    True on success, false if no valid hook was found.
==============================================================================
*sourcemod-UnhookEvent*


Syntax:
	UnhookEvent(const String:name[], EventHook:callback, EventHookMode:mode=EventHookMode_Post);
Usage:
    name                Name of event.
    callback            An EventHook function pointer.
    mode                Optional EventHookMode determining the type of hook.
Notes:
    Removes a hook for when a game event is fired.
Return:
    No return.
==============================================================================
*sourcemod-UnhookSingleEntityOutput*


Syntax:
	UnhookSingleEntityOutput(entity, const String:output[], EntityOutput:callback);
Usage:
    entity              The entity on which to remove the hook.
    output              The output name to hook.
    callback            An EntityOutput function pointer.
Notes:
    Remove a single entity output hook.
Return:
    True on success, false if no valid hook was found.
==============================================================================
*sourcemod-UnhookUserMessage*


Syntax:
	UnhookUserMessage(UserMsg:msg_id, MsgHook:hook, bool:intercept=false);
Usage:
    msg_id              Message index.
    hook                Function used for the hook.
    intercept           Specifies whether the hook was an intercept hook or not.
Notes:
    Removes one usermessage hook.
Return:
    No return.
==============================================================================
*sourcemod-UnsetCommandOverride*


Syntax:
	UnsetCommandOverride(const String:cmd[], OverrideType:type);
Usage:
    cmd                 String containing command name (case sensitive).
    type                Override type (specific command or group).
Notes:
    Unsets a command override.
Return:
    No return.
==============================================================================
*sourcemod-VFormat*


Syntax:
	VFormat(String:buffer[], maxlength, const String:format[], varpos);
Usage:
    buffer              Destination string buffer.
    maxlength           Maximum length of output string buffer.
    format              Formatting rules.
    varpos              Argument number which contains the '...' symbol. Note: Arguments start at 1.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
Return:
    Number of bytes written.
==============================================================================
*sourcemod-VoteHandler*


Syntax:
	VoteHandler(Handle:menu, num_votes, num_clients, const client_info[][2], num_items, const item_info[][2]);
Usage:
    menu                The menu being voted on.
    num_votes           Number of votes tallied in total.
    num_clients         Number of clients who could vote.
    client_info         Array of clients.  Use VOTEINFO_CLIENT_ defines.
    num_items           Number of unique items that were selected.
    item_info           Array of items, sorted by count.  Use VOTEINFO_ITEM defines.
Notes:
    Callback for when a vote has ended and results are available.
Return:
    No return.
==============================================================================
*sourcemod-VoteMenu*


Syntax:
	VoteMenu(Handle:menu, clients[], numClients, time);
Usage:
    menu                Menu Handle.
    clients             Array of clients to broadcast to.
    numClients          Number of clients in the array.
    time                Maximum time to leave menu on the screen.
Notes:
    Broadcasts a menu to a list of clients.  The most selected item will be returned 
    through MenuAction_End.  On a tie, a random item will be returned from a list of 
    the tied items. Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default 
    callbacks and do not need to be enabled.
Return:
    True on success, false if this menu already has a vote session in progress.
==============================================================================
*sourcemod-VoteMenuToAll*


Syntax:
	VoteMenuToAll(Handle:menu, time);
Usage:
    menu                Menu Handle.
    time                Maximum time to leave menu on the screen.
Notes:
    Sends a vote menu to all clients.  See VoteMenu() for more information.
Return:
    True on success, false if this menu already has a vote session in progress.
==============================================================================
*sourcemod-WriteFile*


Syntax:
	WriteFile(Handle:hndl, const items[], num_items, size);
Usage:
    hndl                Handle to the file.
    items               Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number.
    num_items           Number of items in the array.
    size                Size of each item in the array in bytes. Valid sizes are 1, 2, or 4.
Notes:
    Writes binary data to a file.
Return:
    True on success, false on error.
==============================================================================
*sourcemod-WriteFileCell*


Syntax:
	WriteFileCell(Handle:hndl, data, size);
Usage:
    hndl                Handle to the file.
    data                Cell to write to the file.
    size                Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.  If the size is less than 4 bytes, the data is truncated rather than casted.  That is, only the lower bits will be read.
Notes:
    Writes a single binary cell to a file.
Return:
    True on success, false on error.
==============================================================================
*sourcemod-WriteFileLine*


Syntax:
	WriteFileLine(Handle:hndl, const String:format[], any:...);
Usage:
    hndl                Handle to the file.
    format              Formatting rules.
    ...                 Variable number of format parameters.
Notes:
    Writes a line of text to a text file.  A newline is automatically appended.
Return:
    True on success, false otherwise.
==============================================================================
*sourcemod-WriteFileString*


Syntax:
	WriteFileString(Handle:hndl, const String:buffer[], bool:term);
Usage:
    hndl                Handle to th efile.
    buffer              String to write.
    term                True to append NUL terminator, false otherwise.
Notes:
    Writes a binary string to a file.
Return:
    True on success, false on error.
==============================================================================
*sourcemod-WritePackCell*


Syntax:
	WritePackCell(Handle:pack, cell);
Usage:
    pack                Handle to the data pack.
    cell                Cell to add.
Notes:
    Packs a normal cell into a data pack.
Return:
    No return.
==============================================================================
*sourcemod-WritePackFloat*


Syntax:
	WritePackFloat(Handle:pack, Float:val);
Usage:
    pack                Handle to the data pack.
    val                 Float to add.
Notes:
    Packs a float into a data pack.
Return:
    No return.
==============================================================================
*sourcemod-WritePackString*


Syntax:
	WritePackString(Handle:pack, const String:str[]);
Usage:
    pack                Handle to the data pack.
    str                 String to add.
Notes:
    Packs a string into a data pack.
Return:
    No return.
